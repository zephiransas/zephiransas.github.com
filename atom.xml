<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zephiransasのチラシの裏]]></title>
  <link href="http://zephiransas.github.com/atom.xml" rel="self"/>
  <link href="http://zephiransas.github.com/"/>
  <updated>2014-12-16T23:16:37+09:00</updated>
  <id>http://zephiransas.github.com/</id>
  <author>
    <name><![CDATA[Takafumi Yoshida (@zephiransas)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lambda-behaveでテストを書こう]]></title>
    <link href="http://zephiransas.github.com/blog/2014/12/16/about-lambda-behave/"/>
    <updated>2014-12-16T18:17:15+09:00</updated>
    <id>http://zephiransas.github.com/blog/2014/12/16/about-lambda-behave</id>
    <content type="html"><![CDATA[<p>これは<a href="http://qiita.com/advent-calendar/2014/java">Javaアドベントカレンダー2014</a>の12/16分の記事です。</p>

<p>昨日は<a href="https://github.com/grimrose">grimrose</a>さんの、<a href="http://grimrose.blogspot.jp/2014/12/gradle.html">[書評] Gradle徹底入門</a> でした。</p>

<p>自分はJavaのテストフレームワークである、<a href="https://github.com/RichardWarburton/lambda-behave">lambda-behave</a>について紹介します。</p>

<p>自分は普段はRailsでの開発を行っているのですが、現場では主にRSpecを使ってテストを記述しています。RSpecでのテストは以下のような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;Sample&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;hogeメソッドについて&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;fugaを返すこと&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Sample</span><span class="o">.</span><span class="n">hoge</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;fuga&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>RSpecでは上記のようにDSLを使って、なにをテストしているかを構造的に記述することができます。
lambda-behaveを使うと、このようなDSLっぽい記述のテストを、Java8のLambdaを使って書くことができるようになります。</p>

<h2>最初のテスト</h2>

<p>まずはテスト対象となるメソッドを準備します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">includeTax</span><span class="o">(</span><span class="n">Integer</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のようなstaticなメソッドを準備します。includeTaxメソッドは引数を一つ取り、その税込み金額を返すメソッドとします。<strong>実にギョーミーですね！</strong></p>

<p>今回はTDD的なノリで実装していきますので、ここでは中身の実装はおこないません。</p>

<p>それでは実際のテストを書いて行きましょう。ここでのテストシナリオは</p>

<ul>
<li>includeTaxメソッドに100を渡した場合に、108が返ってくること</li>
</ul>


<p>をテストするとします。これをlambda-behaveで書くと、以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">insightfullogic</span><span class="o">.</span><span class="na">lambdabehave</span><span class="o">.</span><span class="na">Suite</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JunitSuiteRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleSpec</span> <span class="o">{{</span>
</span><span class='line'>    <span class="n">describe</span><span class="o">(</span><span class="s">&quot;includeTax&quot;</span><span class="o">,</span> <span class="n">it</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">it</span><span class="o">.</span><span class="na">should</span><span class="o">(</span><span class="s">&quot;税込み価格が取得できること&quot;</span><span class="o">,</span> <span class="n">expect</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">expect</span><span class="o">.</span><span class="na">that</span><span class="o">(</span><span class="n">Sample</span><span class="o">.</span><span class="na">includeTax</span><span class="o">(</span><span class="mi">100</span><span class="o">)).</span><span class="na">is</span><span class="o">(</span><span class="mi">108</span><span class="o">)</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>static importを使ってlambda-behaveのメソッドを使えるようにし、こられを使って記述していきます。</p>

<p>JUnitのランナーも用意されていますので、これを@RunWithで指定すれば、IDEからも簡単にテストを実行可能です。早速、テストを実行してみましょう。</p>

<p><img src="http://zephiransas.github.com/images/20141216/screen1.png" alt="screen1" /></p>

<p>includeTaxは、まだ実装をおこなっていませんので、当然このとおりテストが失敗します。</p>

<p>次に、includeTaxを実装してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">includeTax</span><span class="o">(</span><span class="n">Integer</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">float</span> <span class="n">TAX_RATE</span> <span class="o">=</span> <span class="mf">0.08</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="n">price</span> <span class="o">*</span> <span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">TAX_RATE</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再度、テストを実行すれば、テストが成功しています。</p>

<p><img src="http://zephiransas.github.com/images/20141216/screen2.png" alt="screen2" /></p>

<h2>複数のテストデータでチェック</h2>

<p>先の例では1つの値でしかテストしませんでしたが、lambda-behaveでは同時に複数の値でテストすることもできます。以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">it</span><span class="o">.</span><span class="na">uses</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="mi">108</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="mi">216</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">toShow</span><span class="o">(</span><span class="s">&quot;税込み価格が取得できること&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">expect</span><span class="o">,</span> <span class="n">price</span><span class="o">,</span> <span class="n">includeTax</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">expect</span><span class="o">.</span><span class="na">that</span><span class="o">(</span><span class="n">Sample</span><span class="o">.</span><span class="na">includeTax</span><span class="o">(</span><span class="n">price</span><span class="o">)).</span><span class="na">is</span><span class="o">(</span><span class="n">includeTax</span><span class="o">);</span>
</span><span class='line'>  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>itのあとにuseとandをチェインして値を準備し、これを使ってtoShowメソッド内でテストを行います。toShowメソッド内ではlambdaの引数で準備した値を利用できますので、lambda内でその値をexpectするようにしています。</p>

<h2>生成した値でチェック</h2>

<p>lambda-behaveではランダムな値を生成する機能も準備されています。適当な数値を5つほど生成して、そのテストを行うコードは以下のようになります。</p>

<p>（あまり例がよくないですが・・・）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">it</span><span class="o">.</span><span class="na">requires</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">example</span><span class="o">(</span><span class="n">Generator</span><span class="o">.</span><span class="na">integersUpTo</span><span class="o">(</span><span class="mi">1000</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">toShow</span><span class="o">(</span><span class="s">&quot;税込み価格が取得できること&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">expect</span><span class="o">,</span> <span class="n">price</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="o">.</span><span class="na">that</span><span class="o">(</span><span class="n">Sample</span><span class="o">.</span><span class="na">includeTax</span><span class="o">(</span><span class="n">price</span><span class="o">)).</span><span class="na">is</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="n">price</span> <span class="o">*</span> <span class="mf">1.08</span><span class="o">));</span>
</span><span class='line'>  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>requiresでランダムに準備する値の数を指定します。</p>

<p>exampleではどのようなテストデータを生成するかを指定します。ここではlambda-behaveで準備されたGenerator.integersUpToを使用しています。この他にも適当な文字列を生成するasciiStringsメソッドなどもあります</p>

<h2>例外が発生することをチェック</h2>

<p>引数にnullが渡された場合にNullPointerExceptionの発生をチェックすることも、JUnitと同様に可能です。</p>

<p>まず、includeTaxにnullチェックを記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">includeTax</span><span class="o">(</span><span class="n">Integer</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">price</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">float</span> <span class="n">TAX_RATE</span> <span class="o">=</span> <span class="mf">0.08f</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="n">price</span> <span class="o">*</span> <span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">TAX_RATE</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをテストするlambda-behaveのコードは以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">it</span><span class="o">.</span><span class="na">should</span><span class="o">(</span><span class="s">&quot;nullの場合ぬるぽ&quot;</span><span class="o">,</span> <span class="n">expect</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="o">.</span><span class="na">exception</span><span class="o">(</span><span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Sample</span><span class="o">.</span><span class="na">includeTax</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>exceptionメソッドの第1引数に、発生する予定の例外を指定し、第2引数には例外が発生する処理をlambdaで記述します。</p>

<p>lambdaに慣れていないと少々書きづらいかもしれないですが、DSLちっくに書けるのはJavaっぽくなくてステキですよね！</p>

<p>こちらからは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JJUG CCC 2014 Fallで発表してきた]]></title>
    <link href="http://zephiransas.github.com/blog/2014/11/17/attend-jjug-ccc-2014-fall/"/>
    <updated>2014-11-17T20:40:56+09:00</updated>
    <id>http://zephiransas.github.com/blog/2014/11/17/attend-jjug-ccc-2014-fall</id>
    <content type="html"><![CDATA[<p>11月15日に、東京は新宿の西新宿ベルサールにて開催された<a href="http://www.java-users.jp/?page_id=1284">JJUG CCC 2014 Fall</a>に参加してきました。</p>

<p>JJUC CCC（クロス・コミュニティ・カンファレンス）日本Javaユーザ会が春/秋と、年に2回開催している、JJUG主催としては最大のイベントです。</p>

<p>今回はこれのセッション公募(CfP)に応募したところ嬉しい事にセッション枠を1つ受け持つことになったので、それも兼ねて東京まで参加してきました。
久々に東京のJavaコミュニティの勉強会で、普段はTL上でしか面識のない人たちに会えるのも、楽しみの一つ。</p>

<p>いつもの面々（失礼）もそうですが、今回は以前からお会いしたいと思っていた <a href="https://twitter.com/kikutaro_">@kikutaro_</a> さんと、お昼をご一緒させていただくことができました。TL上での発言を見て「真面目な好青年っぽいなー」という印象を持っていましたが、会ってもやはり好青年でした。</p>

<p><strong>普段から何をツイートするか、考えて発言しないといけませんね！！</strong> （ｹﾞﾌﾝｹﾞﾌﾝ</p>

<p>それから余談ですが、実は大都会ITクラスタは過去、JJUG CCCのスピーカを3人輩出しています。</p>

<p>最初は独立国家福山に住む「<a href="https://twitter.com/soudai1025">@soudai1025</a> 氏」</p>

<p>それから岡山Javaユーザ会/倉敷天領Scala勉強会に所属する「<a href="https://twitter.com/razon">@razon</a> 氏」</p>

<p>あとは「<a href="https://twitter.com/mao_instantlife">@mao_instantlife</a> 氏」</p>

<p>他の地方で、これだけスピーカが出てるところはないように思うので、ちょっと自慢していいような気もしますw</p>

<h3>自分のセッションについて</h3>

<p>今回自分はRailsライクなWebフレームワーク「<a href="http://www.ninjaframework.org/">ninjaframework</a>」について、セッションを行いました。以下はその資料。</p>

<script async class="speakerdeck-embed" data-id="425e04e04edd01329d885e31c290001e" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>一番小さい部屋だったので、おそらく40~50人程度の方がいらしていたと思います。</p>

<p>当日、他のセッションでSpring Bootのセッションとハンズオンがあり「これはネタを選択し間違えた感・・・」と思ったのは内緒。</p>

<p>久々の発表だったり、資料作りが思うように進まなくて、練習もろくにできなかったりで、たどたどしいことこの上ないセッションになってしまったような気がします・・・</p>

<p>しかも50分の予定が40分程度で終わってしまい、困ったなーと思っていたところ、Q&amp;Aで意外にも多くの方から質問を頂きました。その結果、きっちり50分！</p>

<p>あまりうまくいかなかった部分もありましたが、最後まで聞いていただいた皆さん、大変にありがとうございます！</p>

<h3>Java女子部の台頭</h3>

<p>以下はセッションの内容とはあまり関係ない、参加して自分が肌で感じたことです。</p>

<p>今回のCCCで一番思ったことが、女性の参加者が多いこと。</p>

<p>個人的にですが、エンジニアの世界はまだまだ男性中心な世界だなと感じていて、女性でバリバリコード書いたり、勉強会で発表してる人って少ないのが現状です。（それが良いとも悪いともいいません。それは本質ではないので。）</p>

<p>なので、今回のCCCに多くの女性エンジニアがいたことには正直驚きました。最近、女性エンジニアの有志を中心に「<a href="http://javajo.doorkeeper.jp/">Java女子部</a>」なるコミュニティが発足したことは知っていましたが、それが広まってきてる感じです。</p>

<p>エンジニアという職業が成熟していく過程に、女性が活躍できる環境というのは必須だと思います。また、それがエンジニアという仕事を一生の仕事にするためにも、必要なことだと思います。</p>

<blockquote class="twitter-tweet" lang="ja"><p>Java女子部の女の子たちみんな可愛かったのでみんなJavaやるべき</p>&mdash; しょぼちむ@どうもネカマです (@syobochim) <a href="https://twitter.com/syobochim/status/533626307267928065">2014, 11月 15</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h3>Javaコミュニティの復活の兆し</h3>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774169315" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>つい先日発売された「Javaエンジニア養成読本」（通称「妖精本」）の巻頭記事に、Javaのコミュニティの歴史について触れている部分があります。</p>

<p>自分がJavaのコミュニティに最初に触れたのは、Seasarが流行っていた時代です。</p>

<p>その後Javaのコミュニティは、Sunの不振などもあり少しづつ勢いを失ってきたように思います。</p>

<p>しかし今回のCCCの参加登録数は約650名で過去最高。また懇親会の参加者も受付開始するとあっという間に満席になり、最終的には100名とこちらも過去最高。自分にとっても最高に楽しい時間でした。</p>

<ul>
<li>JJUG CCC 2014 Fall 懇親会 &ndash; <a href="https://www.flickr.com/photos/zephiransas/sets/72157648917084929/">https://www.flickr.com/photos/zephiransas/sets/72157648917084929/</a></li>
</ul>


<blockquote class="twitter-tweet" lang="ja"><p>この飲み会、Java最盛期っぽい！</p>&mdash; きしだﬗ (@kis) <a href="https://twitter.com/kis/status/533619083271352322">2014, 11月 15</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>これもひとえに2007年4月にJJUGが発足以来、地道に活動してこられた多くの人たちの努力の賜物です。</p>

<p>自分が感じたことは、<strong>Javaコミュニティは再びかつての勢いを取り戻しはじめている</strong>、ということです。</p>

<p>そして言語としてのJavaもJava8で導入されたLambdaを皮切りに、これからも進化を続けていって欲しいと思います。</p>

<blockquote class="twitter-tweet" lang="ja"><p>もはやJavaダサいとかいてるほうがダサい　<a href="https://twitter.com/hashtag/jjug_ccc?src=hash">#jjug_ccc</a> <a href="https://twitter.com/hashtag/ccc_r17?src=hash">#ccc_r17</a></p>&mdash; Takafumi Yoshida (@zephiransas) <a href="https://twitter.com/zephiransas/status/533561483234267136">2014, 11月 15</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pusherを使ったChrome拡張を作る]]></title>
    <link href="http://zephiransas.github.com/blog/2014/03/20/pusher-with-chrome-extension/"/>
    <updated>2014-03-20T17:24:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2014/03/20/pusher-with-chrome-extension</id>
    <content type="html"><![CDATA[<p>メッセージ等の新着通知やアップデート情報の配信など、アプリケーションへの通知の方法として、スマートフォンなどで使われるpush通知など、最近では様々なものがあります。</p>

<p>しかし自前で通知用のサーバを運用するのは手間がかかるので、これを簡単に使えるようにするサービスも増えてきました。例えば<a href="http://pusher.com">Pusher.com</a>などがあります。これを使うことで、ブラウザへのリアルタイムな通知機能を、WebSocketを使って簡単に作成することができます。</p>

<p><img src="http://zephiransas.github.com/images/20140321/pusher-ss.png" alt="pusher-ss" /></p>

<p>今回はPusherからの通知をChrome拡張で受信し、これをデスクトップ通知するサンプルを作成しましたので、解説してみます。</p>

<h2>Pusher側の設定</h2>

<p>まずはPusher側に設定を行います。Pusherでアカウントを作成後、以下のようにアプリケーションを登録します。</p>

<p><img src="http://zephiransas.github.com/images/20140321/pusher1.png" alt="pusher1" /></p>

<p>ここでEncryptionにチェックを入れておきましょう。チェックしなくても特に問題はないのですが、Chrome拡張の場合セキュリティの問題からSSLを使用したほうが、いろいろ都合がいいので、チェックするほうが無難です。</p>

<h2>Chrome拡張の作成</h2>

<h3>manifest.jsonの設定</h3>

<figure class='code'><figcaption><span>manifest.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;manifest_version&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Pusher test extension&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Pusher用 Chrome extension&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;permissions&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;notifications&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;content_security_policy&quot;</span><span class="p">:</span> <span class="s2">&quot;script-src &#39;self&#39; https://stats.pusher.com; object-src &#39;self&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;background&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;src/javascript/pusher.min.js&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;src/javascript/background.js&quot;</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はPusherからのメッセージをデスクトップ通知するようにしたいのでpermissionに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;permissions&quot;</span> <span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;notifications&quot;</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>を指定しています。</p>

<p>また、content_security_policyのscript-srcに <strong><a href="https://stats.pusher.com**">https://stats.pusher.com**</a> を追加しています。httpではなく</strong>https**を指定していることに注意してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;content_security_policy&quot;</span><span class="err">:</span> <span class="s2">&quot;script-src &#39;self&#39; https://stats.pusher.com; object-src &#39;self&#39;&quot;</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>このサイトは、Pusherのクライアントライブラリであるpusher.min.jsからアクセスしているのですが、これを許可していないとChrome拡張からPusherのサーバへ、正しく接続をすることができません。</p>

<p>次にpusher.min.jsですが、これは本来であればPusherのサイトに公開されているものを読み込んで使いたいところなのですが、Chrome拡張では外部のjavascriptを読み込むことができないようです。なので、ダウンロードしてソースに加えています。
ちなみにpusher.min.jsのホスト先は、<a href="http://pusher.com/docs/client_libraries">こちらで</a>公開されています。</p>

<h3>background.js</h3>

<p>あとはChrome拡張のバックグラウンドで実行されるbackground.jsで、Pusherとの接続を行います。</p>

<figure class='code'><figcaption><span>background.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">pusher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Pusher</span><span class="p">(</span><span class="s2">&quot;======== KEY ========&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">encrypted</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">channel</span> <span class="o">=</span> <span class="nx">pusher</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;test_channel&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">channel</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;my_event&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opt</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;basic&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">message</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">iconUrl</span><span class="o">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">chrome</span><span class="p">.</span><span class="nx">notifications</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nx">opt</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">){</span> <span class="cm">/** Do Nothing */</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pusherのコンストラクタに渡すkeyには、Pusherで作成したアプリケーションのKeyを指定します。</p>

<p><img src="http://zephiransas.github.com/images/20140321/pusher2.png" alt="pusher2" /></p>

<p>また、大事なポイントとしてPusherのオプションに</p>

<figure class='code'><figcaption><span>background.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">encrypted</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>を指定する必要があります。これは先のmanifest.jsonの設定でも触れましたが、この指定がない場合Pusherの接続先が **<a href="http://stats.pusher.com**">http://stats.pusher.com**</a> となってしまいます。Chrome拡張ではhttpsでない外部サーバに接続することはセキュリティ上できませんので、上記のオプションを指定しています。</p>

<h2>Chrome拡張の読み込み</h2>

<p>では、このようにして作ったChrome拡張を、Chromeに読み込ませて動作確認してみましょう。</p>

<p>ChromeのURL欄に chrome://extensions/ と入力します。まだデベロッパーモードを有効にしていない場合は「デベロッパーモード」をチェックします。次に「パッケージ化されていない拡張機能を読み込む」をクリックします。</p>

<p><img src="http://zephiransas.github.com/images/20140321/pusher3.png" alt="pusher3" /></p>

<p>そして先ほど作ったChrome拡張を含むディレクトリを指定します。すると、拡張機能の一覧に表示されます。</p>

<p><img src="http://zephiransas.github.com/images/20140321/pusher4.png" alt="pusher4" /></p>

<p>これでChrome拡張を導入することができました。</p>

<h2>Pusherからテストを行う</h2>

<p>それでは実際にPusherから通知を行い、Chrome拡張に通知が表示されるかどうか確認してみましょう。</p>

<p>Railsなどを使って自分でサーバアプリを作ってもいいのですが、今回はPusherのEvent Creatorの機能を使ってみましょう。</p>

<p>Pusherの管理画面から「Event creator」を選択し、以下のように入力します。</p>

<p><img src="http://zephiransas.github.com/images/20140321/pusher5.png" alt="pusher5" /></p>

<p>これで、Send eventボタンをおして、うまくいけば画面に以下の様な通知が表示されます。</p>

<p><img src="http://zephiransas.github.com/images/20140321/pusher6.png" alt="pusher6" /></p>

<p>今回はアイコン画像のURLを指定しなかったので、なにも表示されていませんが、以下の用に画像へのURLを指定することでアイコンを表示することもできます。</p>

<figure class='code'><figcaption><span>background.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">opt</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;basic&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">message</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">iconUrl</span><span class="o">:</span> <span class="s2">&quot;http://example.com/path/to/icon&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ソースなど</h2>

<p>今回作成したChrome拡張は、こちらのGithubにまとめてあります。参考にしてみてください。</p>

<ul>
<li><a href="https://github.com/zephiransas/pusher-extension">pusher-extension</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[岡山の勉強会に参加する際の心構え]]></title>
    <link href="http://zephiransas.github.com/blog/2014/03/15/what-you-shoud-eat-in-daitokai/"/>
    <updated>2014-03-15T14:53:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2014/03/15/what-you-shoud-eat-in-daitokai</id>
    <content type="html"><![CDATA[<p>IT勉強会はなにも東京ばかりで開催されているわけではない。</p>

<p>地方の勉強会に参加するのであれば、ついでに観光地を巡ったり、その土地の美味しいモノを食べたいというのが人情である。</p>

<p>本エントリでは岡山の勉強会に来た際に食べるべきものを紹介する。</p>

<h2>もも、ぶどう</h2>

<p>言わずと知れた岡山の特産品。桃は白桃、ぶどうはマスカット・オブ・アレキサンドリアなどが有名。なにしろ倉敷にはその名もマスカット球場なるスタジアムがあり、楽天の星野仙一監督が倉敷出身という縁もあり、ここ数年は楽天がキャンプをやってたりする。それぐらい有名。ただし、どれもそこそこお値段がするので、お財布に余裕があるときにしましょう。</p>

<p>また、ちょっと亜流ではあるけれども白桃やマスカットを和菓子で食すという方法もある。岡山には<a href="http://www.kitchoan.co.jp/site/index.html">源吉兆庵</a>なる和菓子屋さんがあり、これは世界的にも有名。サンフランシスコにも出店してたりする。ここのお菓子に<a href="http://www.kitchoan.co.jp/site/products/sizen_products/tousenka.html">「桃泉果」</a>なるものがあり、これは白桃をまるまる一つ使った贅沢な逸品。マスカットであれば<a href="http://www.kitchoan.co.jp/site/products/sizen_products/rikunohouju.html">「陸乃宝珠」</a>というものがあります。これはこれで美味しいので、おすすめです。ただし、どれもそこそこお値ｄ（ｒｙ</p>

<h2>牡蠣＆牡蠣おこ</h2>

<p><img src="http://zephiransas.github.com/images/20131223/oister.JPG" alt="oister" /></p>

<p>日生であれば、なにをおいても牡蠣です。日生で牡蠣を食べたいのであれば五味の市がおすすめです。ここでは1kgから殻付きの生牡蠣を買うことができます。これを五味の市近くにある道の駅で、BBQにしていただくのが定番です。シーズン中の牡蠣は身も大きく、とても美味しいですよ。</p>

<p>詳細はこちら</p>

<ul>
<li><a href="http://zephiransas.github.io/blog/2013/12/23/daitokai2013/">牡蠣駆動勉強会を行いました</a></li>
</ul>


<p>また、B級グルメとしても定番になった感のあるカキオコも日生ではよく見かけます。これも押さえておきたい。</p>

<h2>えびめし</h2>

<p><img src="http://zephiransas.github.com/images/20140315/ebimeshi.JPG" alt="えびめし" /></p>

<p>岡山の誇るB級グルメ「えびめし」</p>

<p>海老の入った、デミソース風味の焼き飯とでも言った感じ。</p>

<p>岡山には<a href="http://www.indeira.net/ebimeshiya/">「えびめしや」</a>なるレストランが数店あり、地元民も愛する味。</p>

<p>他にも、市の中心部からほど近い、天満屋バスターミナルの地下にある<a href="http://tabelog.com/okayama/A3301/A330101/33009446/">「いんでいら」</a>のえびめしもオススメ。</p>

<p>個人的には、かつて岡山市倉田にあった「いんでいら」がイチオシ。自分が小さい時から慣れ親しんだ味だったが、残念ながらマスターが高齢になったこともあり、今は閉店してしまった。しかしここのえびめしこそが岡山の元祖えびめしとおもっている</p>

<h2>パフェ</h2>

<p>意外かもしれないが、岡山といえばパフェ。<a href="http://www.okayama-cci.or.jp/fruitparfait/">こんなページ</a>もあったりするぐらいに推してる。</p>

<p>そして、Java会の重鎮、<a href="https://twitter.com/skrb">櫻庭さん</a>も岡山のパフェ推しで有名。大都会アドベントカレンダーでも、岡山のパフェを紹介して頂いています。</p>

<ul>
<li><a href="http://www.javainthebox.com/2012/12/advent-calendar-16.html">大都会岡山 Advent Calendar 16 日目 &ndash; 岡山といえばパフェだよね</a></li>
<li><a href="http://www.javainthebox.com/2013/12/advent-calendar-11-2.html">大都会岡山 Advent Calendar 11 日目 &ndash; 岡山といえばパフェだよね #2</a></li>
</ul>


<h2>後楽園</h2>

<p><img src="http://zephiransas.github.com/images/20140315/kourakuen.jpg" alt="廉池軒" /></p>

<p>倉敷の環境名所といえば「倉敷美観地区」ですが、岡山の観光名所といったら「後楽園」</p>

<p>江戸時代、岡山藩藩主池田綱政によって造成された、日本庭園です。いまでも園内には、古い建物が残っており、これを一般市民でも有償で利用することができます。こんな素晴らしい庭園で、のんびり勉強会とかできたらいいですよね？</p>

<p>・・・</p>

<p>・・・</p>

<p>・・・</p>

<p>というわけで、この後楽園でJava8のハンズオンを企画しました！</p>

<ul>
<li><a href="http://okajug.doorkeeper.jp/events/9692">Java8 Lambdaハンズオン@岡山後楽園</a></li>
</ul>


<p>ぜひ、この機会に岡山にお越しいただき、岡山の美味しいものと、美しい風景を堪能してはいかがでしょうか？</p>

<p>皆様のご参加をお待ちしております。</p>

<h2>あわせて読みたい</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/Nagise/20140313/1394717894">富山の勉強会に参加する際の心構え</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8で始めるLambda（基礎編）]]></title>
    <link href="http://zephiransas.github.com/blog/2014/03/12/java8lambda/"/>
    <updated>2014-03-12T16:33:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2014/03/12/java8lambda</id>
    <content type="html"><![CDATA[<p>まもなくリリース予定のJava8。その中でも最も大きなインパクトを持つというProject Lambdaについて、ここ数日調べてみました。
今からLambdaをはじめようとする人向けに、何回かに分けてまとめてみたいと思います。</p>

<h2>インターフェースの宣言</h2>

<p>まずは手始めに、引数で指定された文字列の前後に&#8221;[&ldquo;と&rdquo;]&ldquo;をつける処理を考えてみましょう。</p>

<p>Lambdaを使用するには、まずインターフェースを宣言する必要があります。上記の仕様から考えると</p>

<ul>
<li>引数はString型の引数が1つ</li>
<li>戻り値もString型</li>
</ul>


<p>となるので、この場合は以下の様なインターフェースを宣言します。</p>

<figure class='code'><figcaption><span>LambdaInterface.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">LambdaInterface</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="nf">method</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注意するべきことが1つ。Java8のLambdaとして使えるインターフェースには決まりがあるのですが、もっとも重要なのが<strong>インターフェースのメソッドが1つだけ</strong>ということです。インターフェースのメソッドが2つ以上ある場合には、それをLambdaとして使用することはできません。</p>

<p>これはLambdaの実装部分を書く際に、どのメソッドの内容を実装しているのかを書かないため、Lambdaを書いた場合は<strong>そのインターフェースがもつ唯一のメソッド</strong>に対して実装をおこなったとみなすからです。</p>

<p>一見、これは不便なように思ってしまうかもしれないですが、普段使うパターンのインターフェースのほとんどがjava.util.functionパッケージ内で用意されているので、実際にはそれ程不便ではありません。むしろ自分でインターフェースを用意するほうが稀かもしれません。</p>

<h2>Lambdaを使った記述</h2>

<p>早速、先に宣言したインターフェースを使ってLambdaを書いてみましょう。Lambdaを記述する際の基本となる文法は、以下のようになっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="err">インターフェース名</span><span class="o">]</span> <span class="o">[</span><span class="n">lambda</span><span class="err">式の名前</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="err">引数の型</span> <span class="err">引数</span><span class="o">,...)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="err">（実装）</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>よってLambdaInterfaceを使って書くと、以下のようになります。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">LambdaInterface</span> <span class="n">lambda</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lambda</span><span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="s">&quot;HOGE&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行すると&#8221;[HOGE]&ldquo;と出力されていることがわかると思います。</p>

<p>このように、匿名クラスを使った場合などと比べて、少ない記述量で実装できると思います。</p>

<h2>Lambdaの省略記法</h2>

<p>また、このLambdaの記述では、以下のルールで、省略した記述を使用することもできます。</p>

<ul>
<li>引数の型は（型推論できるので）省略できる</li>
<li>引数が1つの場合は、引数の()を省略できる</li>
<li>但し、引数なしの場合は省略できない</li>
<li>実装部分が1行の場合は、{}を省略可能。さらにreturn文も不要</li>
</ul>


<p>上記ルールに沿ったLambdaであれば省略可能です。ですので先ほどのコードも以下の様に省略できます。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">LambdaInterface</span> <span class="n">lambda</span> <span class="o">=</span> <span class="n">value</span> <span class="o">-&gt;</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lambda</span><span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="s">&quot;HOGE&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>かなりスッキリしましたね！</p>

<h2>java.util.functionで提供されるインターフェースを使う</h2>

<p>先ほど少し触れましたが、上記のLambdaInterfaceのような普段Lambdaとして使うインターフェースはjava.util.function内にいろいろ用意されています。
例えば、LambdaInterfaceの様に「String型の引数を1つ取り、String型の戻り値を持つ」インターフェースはjava.utl.functionパッケージ内にあるFunctionインターフェースを使います。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">R</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">R</span> <span class="nf">apply</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の型引数Tには1つ目の引数の型、2つ目の型引数Rには戻り値の型を指定します。またapplyメソッドが実装対象となるメソッドです。</p>

<p>先のコードをFunctionインターフェースを使って書き直すと。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span> <span class="n">value</span> <span class="o">-&gt;</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lambda</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">&quot;HOGE&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。Functionの他にも</p>

<ul>
<li>引数を1つ持ち、戻り値がないConsumer</li>
<li>引数がなく、戻り値があるSupplier</li>
<li>引数を1つ持ち、戻り値がboolean型のPredicate</li>
<li>引数を1つ持ち、かつこれが戻り値と同じ場合のUnaryOperator</li>
</ul>


<p>などのインターフェースが提供されています。</p>

<p>どういった場合に、どのインターフェースを使えばよいかについては、Qiitaにまとめておきましたので、参考にしてみてください。</p>

<ul>
<li><a href="http://qiita.com/zephiransas/items/3b03af4f9044df3182d0">Java8関数型インターフェース チートシート</a></li>
</ul>


<p>通常は、ここで提供されているインターフェースを使い、それ以外のパターンが発生した場合のみ、自分でインターフェースを宣言するほうがよいでしょう。</p>

<h2>メソッド参照を使う</h2>

<p>メソッド参照もJava8で新しく追加された機能です。</p>

<p>メソッド参照を使うと、他のクラスのクラスメソッドやインスタンスメソッドを、Lambdaの実装として利用することができるようになります。メソッド参照はドット(.)でメソッドを呼ぶ代わりに、コロン2つで呼び出します。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="err">クラス名</span><span class="o">]::[</span><span class="err">メソッド名</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>例えば先の文字列の前後にカッコをつけるメソッドが以下のようにSampleクラスのstaticメソッドとして定義されていた場合</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sample.addをメソッド参照するには</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span> <span class="nl">Sample:</span><span class="o">:</span><span class="n">add</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lambda</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">&quot;HOGE&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここではstaticなクラスメソッドを使いましたが、インスタンスメソッドの場合も同様に、インスタンスを生成し、そこからメソッド参照をすることができます。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Sample</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span> <span class="nl">sample:</span><span class="o">:</span><span class="n">add</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lambda</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">&quot;HOGE&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo Leafをちょっとリニューアルしました]]></title>
    <link href="http://zephiransas.github.com/blog/2014/02/06/renew-photoleaf/"/>
    <updated>2014-02-06T15:51:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2014/02/06/renew-photoleaf</id>
    <content type="html"><![CDATA[<p>前から気になっていた<a href="http://www.photo-leaf.com">Photo Leaf</a>のフォトブック作成画面のリニューアルをしました。</p>

<p><img src="http://zephiransas.github.com/images/20140206/photoleaf.png" alt="フォトブック編集画面" /></p>

<p>画面の中央部分にフォトブックのページ一覧。画面の一番下に、flickrの写真一覧を表示するようにしました。今までとは、真逆のレイアウトになっています。</p>

<ul>
<li>flickrの写真一覧は左右のスライダーでページを移動できます。</li>
<li>ちなみに、スクロールする度にPhotoStreamの写真を逐次読み込む仕様になっています。</li>
<li>flickrの写真は、クリックすることで大きめの画像を画面中央に表示できます。</li>
<li>Set内の写真のみを一覧に表示した場合は「Setを選ぶ」ボタンを押すことで、Setを選択できます。</li>
</ul>


<p>写真選択は今まで通り、ドラッグ&amp;ドロップでフォトブックの各ページに写真を置いていきます。</p>

<p>flickrに写真を保存していて、フォトブックを作ってみたい方は是非ご利用ください。</p>

<h2>技術的なこと</h2>

<p>ついでといってはなんですが、裏側もちょこちょこ修正しています。</p>

<ul>
<li>unicornを使うようにした。多少はパフォーマンスがあがってる（はず）</li>
<li><a href="http://wercker.com/">wercker</a>を使って、masterにpushするだけで、あとは自動でテスト->デプロイまでできるようにした。</li>
<li>利用規約のページなど、他とは微妙に違うページは別layoutにしてたのを、content_forを使ってapplication.html.erbに一本化した。</li>
<li>rpsecのテストにshoulda matcherを導入した。</li>
</ul>


<p>といったとこです。<strong>特にwerckerは素晴らしい。</strong> werckerのお陰で、本番環境とステージング環境をあまり考えることなく、テストからデプロイまでやってくれるのは、非常に楽でした。</p>

<p>このあたりのwerckerの使い方も、後ほどまとめてみようかと思っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[werckerでrspecとcucumberのCI環境を作る]]></title>
    <link href="http://zephiransas.github.com/blog/2014/01/23/webkit-on-wercker/"/>
    <updated>2014-01-23T14:30:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2014/01/23/webkit-on-wercker</id>
    <content type="html"><![CDATA[<p>去年作った<a href="http://www.photo-leaf.com/">Photo Leaf</a>というWebサービスがあるのですが、これのCI環境を作成したいなぁと思っていたところwerckerというCIサービスを使って構築できたので、そのまとめです。</p>

<h2>werckerとは？</h2>

<p><a href="http://wercker.com/">wercker</a>は<a href="https://travis-ci.org/">TravisCI</a>などに代表されるように、外部でビルド（というかテスト）やデプロイを行ってくれるCI（継続的インテグレーション）サービスです。</p>

<p>使い方としては、リモートリポジトリに変更がpushされた時点でこれをフックして、CIサービス側でテストしたり、場合によってはそのまま本番環境に自動デプロイとかもしてしまえば、変更内容を安全、かつ迅速にリリースできる仕組みが出来上がるわけです。イマドキっぽいですね！</p>

<p>werckerの特徴としては</p>

<h4>GithubとBitbucketに対応</h4>

<p>TravisCIはGithubにあるリポジトリしかビルド対象にできません。Githubのサービスなんだから、当たり前といえば当たり前ですが・・・</p>

<h4>（今のところ）無料</h4>

<p>2014/1/23現在はベータのようです。将来的にはどうなるのかわからないですが、今のところ無料で使えます。制限としては「<strong>1つのビルドが25分以内に完了すること</strong>」ぐらいです。エンタープライズなシステムだとキツイかもですが、そこそこの規模なら問題ないんじゃないでしょうか。</p>

<h4>テストを実行するための仮想環境が豊富に用意されている</h4>

<p>werckerでビルドを実行する際にはBoxという仮想環境内で実行されます。これが予め様々な種類が用意されています。通常のRuby(Rails)の環境とかだけではなく、JavaやAndroidといった環境も用意されています。また<a href="http://devcenter.wercker.com/articles/boxes/">Boxを自分で作る</a>こともできるようです。</p>

<h4>privateリポジトリもビルドできる</h4>

<p>TracisCIは無課金だとprivateリポジトリはビルドできません。しかしwerckerはprivateリポジトリをビルドできます。
Photo LeafのソースはBitbucket上のprivateリポジトリで管理しているため、今までCIサービスを利用することができなかったのですが、werckerはprivateリポジトリでもビルドできるので便利です。</p>

<h2>wercker.ymlの設定</h2>

<p>Photo Leafでは、テストをrspecとcucumberで書いています。cucumberではjavascriptのドライバとしてcapybara-webkitを使ってます。そのためwerckerで動かすには設定が若干面倒です。</p>

<p>werckerにログインして、とりあえず普通にビルドするまでの手順は、以下の記事に詳しいのでこちらを参照してください。</p>

<ul>
<li><a href="http://blog.mah-lab.com/2014/01/08/rails-wercker-heroku-deploy/">Githubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってrails newからHerokuのデプロイまでやってみる</a></li>
</ul>


<p>上記で設定したwercker.ymlに対して、rspecとcucumberを実行するように設定していきます。自分が設定したwercker.ymlは以下のような感じ</p>

<figure class='code'><figcaption><span>wercker.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">box</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">wercker/rvm</span>
</span><span class='line'><span class="c1"># Build definition</span>
</span><span class='line'><span class="c1"># See the Rails section on the wercker devcenter:</span>
</span><span class='line'><span class="c1"># http://devcenter.wercker.com/articles/languages/ruby/settingup-rails4.html</span>
</span><span class='line'><span class="c1"># You will want to define your database as follows:</span>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wercker/postgresql</span>
</span><span class='line'><span class="c1"># See more about services on our devcenter:</span>
</span><span class='line'><span class="c1"># http://devcenter.wercker.com/articles/services/</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">steps</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="c1"># Uncomment this to force RVM to use a specific Ruby version</span>
</span><span class='line'>        <span class="c1"># - rvm-use:</span>
</span><span class='line'>        <span class="c1">#       version: 2.1.0</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Make tmp directory</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mkdir tmp</span>
</span><span class='line'>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Enable virtual display</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="p-Indicator">|-</span>
</span><span class='line'>              <span class="no"># Start xvfb which gives the context an virtual display</span>
</span><span class='line'>              <span class="no"># which is required for tests that require an GUI</span>
</span><span class='line'>              <span class="no">export DISPLAY=:99.0</span>
</span><span class='line'>              <span class="no">start-stop-daemon --start --quiet --pidfile /tmp/xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset</span>
</span><span class='line'>
</span><span class='line'>              <span class="no"># Give xvfb time to start. 3 seconds is the default for all xvfb-run commands.</span>
</span><span class='line'>              <span class="no">sleep 3</span>
</span><span class='line'>        <span class="c1"># Install (apt-get) packages</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">install-packages</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">libqtwebkit-dev</span>
</span><span class='line'>        <span class="c1"># A step that executes `bundle install` command</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bundle-install</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># A step that prepares the database.yml using the database in services</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">rails-database-yml</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># A custom script step, name value is used in the UI</span>
</span><span class='line'>        <span class="c1"># and the code value contains the command that get executed</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">echo ruby information</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>                <span class="no">echo &quot;ruby version $(ruby --version) running&quot;</span>
</span><span class='line'>                <span class="no">echo &quot;from location $(which ruby)&quot;</span>
</span><span class='line'>                <span class="no">echo -p &quot;gem list: $(gem list)&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Set up db</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">RAILS_ENV=test bundle exec rake db:schema:load</span>
</span><span class='line'>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Run RSpec</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bundle exec rspec spec</span>
</span><span class='line'>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Run Cucumber</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bundle exec cucumber features</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>16~18行目 &ndash; テスト用のtmpディレクトリを作成（rspecのテストでtmpを使ってるので、必要なければ不要です）</li>
<li>6~7,37~38行目 &ndash; テスト用のPostgreSQLを実行する</li>
<li>53~55行目 &ndash; rspecを実行</li>
<li>57~59行目 &ndash; cucumberを実行</li>
</ul>


<h2>capybara-webkitを動かすための注意点</h2>

<p>capybara-webkitを動かすにはX11が使用できる必要があります。なのでXvfbを仮想環境で実行する必要があります。その設定が以下の部分。</p>

<figure class='code'><figcaption><span>wercker.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Enable virtual display</span>
</span><span class='line'>    <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="p-Indicator">|-</span>
</span><span class='line'>      <span class="no"># Start xvfb which gives the context an virtual display</span>
</span><span class='line'>      <span class="no"># which is required for tests that require an GUI</span>
</span><span class='line'>      <span class="no">export DISPLAY=:99.0</span>
</span><span class='line'>      <span class="no">start-stop-daemon --start --quiet --pidfile /tmp/xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset</span>
</span><span class='line'>
</span><span class='line'>      <span class="no"># Give xvfb time to start. 3 seconds is the default for all xvfb-run commands.</span>
</span><span class='line'>      <span class="no">sleep 3</span>
</span><span class='line'><span class="c1"># Install (apt-get) packages</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">install-packages</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">libqtwebkit-dev</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の設定で仮想環境上でXvfbを実行できます。</p>

<h2>まとめ</h2>

<ul>
<li>werckerはGithubとBitbucket両方に対応してるよ！</li>
<li>werckerは無料でprivateリポジトリもビルドできるよ！</li>
<li>capyabara-webkitを使うときにはXvfbを実行してよ！</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年を振り返って]]></title>
    <link href="http://zephiransas.github.com/blog/2013/12/31/end-of-2013/"/>
    <updated>2013-12-31T13:58:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/12/31/end-of-2013</id>
    <content type="html"><![CDATA[<p>今年も終わりですね。というわけで恒例の、今年の振り返りエントリです。</p>

<h1>今年の出来事</h1>

<p>まずは1月。このときには転職して新しい職場での仕事をスタートさせました。もともと外注として仕事をしていたせいもあって、他の社員の方たちも「まだ1年？」と驚かれる程度にはスムーズに会社に溶け込むことができましたし、素晴らしいチームメンバーにも恵まれて、仕事においてはとても充実していたように思います。仕事ではずっとRuby on Railsでも開発でしたが、Ruby（というより動的型付け言語）にも、かなり慣れてきたかな？という感触を持っています。エンジニアとして更に成長するためにも、異なるパラダイムの言語とその文化を学ぶことは重要だと感じていたので、この点についても非常に良かったのではないかと思っています。</p>

<p>2月には大阪の楽天で「勉強会勉強会」に参加しました。勉強会を主催することの意味を改めて考えさせるキッカケにもなったと思います。それから岡山Javaユーザ会で<a href="http://atnd.org/events/34885">「JUnit実践入門読書会」</a>を開催しました。これ、結局継続できてないんですよねー・・・・(´・ω・｀)</p>

<p>3月には<strike>声優イベント</strike><a href="http://www.ospn.jp/osc2013-tokushima/">OSC徳島</a>に参加しました。ここでは<a href="https://www.ospn.jp/osc2013-tokushima/modules/eguide/event.php?eid=13">LTもやらせていただき</a>、そこそこ笑いも取れ、大都会流LTのなんたるか、を知らしめることができたのではないでしょうか？</p>

<p>5月にはJava Day Tokyoに参加しました。</p>

<ul>
<li><a href="http://zephiransas.github.io/blog/2013/05/16/javadaytokyo2013/">Java Day Tokyo 2013に参加してきた（基調講演）</a></li>
<li><a href="http://zephiransas.github.io/blog/2013/05/19/javadaytokyo2/">Java Day Tokyo 2013に参加してきた（セッション）</a></li>
</ul>


<p>6月には初めてRubyKaigiに参加したり、Java Day Tokyoの報告会などをやったりしました。特にRubyKaigiは初めてRubyのコミュニティに参加して、Javaのコミュニティとはまた違った雰囲気。セッションも全編が英語で、非常にいい刺激となりました。</p>

<ul>
<li><a href="http://zephiransas.github.io/blog/2013/06/04/attended-rubykaigi2013/">RubyKaigi2013に参加してきた</a></li>
<li><a href="http://zephiransas.github.io/blog/2013/06/18/jdt2013-okayama-report/">Java Day Tokyo 2013報告会@岡山を開催してきた</a></li>
</ul>


<p>8月には、パトしお結婚式がありましたね。</p>

<ul>
<li><a href="http://www.flickr.com/photos/zephiransas/sets/72157636266357133/">パトしお結婚式</a></li>
</ul>


<p>9月には、岡山Javaユーザ会でJavaEEハンズオンをやりました。大都会界隈では（というより全国的に？）JavaEEはまだまだ現場で使われていない印象。もうちょっとJavaEEの啓蒙もできたらいいなぁなどと考えていたりしますが・・・</p>

<ul>
<li><a href="http://local.aguuu.com/events/21329">JavaEE7 ハンズオン</a></li>
</ul>


<p>12月には、毎年恒例の合同勉強会と忘年会議が行われました。あいにく忘年会議には参加できなかったのですが、合同勉強会では急遽司会とスピーカーを両方やることに。しかし、この辺りのフットワークの軽さが、大都会ITクラスタの強みでもあると思います。</p>

<ul>
<li><a href="http://www.flickr.com/photos/zephiransas/sets/72157638821751894/">合同勉強会 in 大都会岡山 -2013 Winter-</a></li>
</ul>


<p>以上、今年自分が参加したり主催したイベントをざっくり振り返ってみました。</p>

<h1>まとめ</h1>

<p>最近、イベントを主催する時に思うことなのですが、正直イベントをやることは大変です。面倒だなぁと感じることも少なからずあります。
特に岡山のような地方では、エンジニアの絶対数がそもそも少なく、更にスピーカーになってくれるような人は更に少ないのが現状です。（そのため内輪っぽい雰囲気があるのも、やむを得ない感じもしますが）とにかくコンテンツづくりが一番大変です。</p>

<p>そうまでして勉強会をやる意味はあるのか？これを常に考えます。</p>

<p>しかし最終的には、自分が今まで勉強会に参加して、いろいろな人たちに出会い、そこから更に成長することができ、ある意味では幸せなエンジニアライフを送ることができた感謝の想いと、その恩返しをするために、勉強会をやっているような気もします。大袈裟な考えかもしれないですが、これが私の今の心境です。それでも大変であることに変わりはないですが、これからも地道に頑張っていきたいと考えています。</p>

<p>本年も皆様には大変にお世話になりました。改めて感謝申し上げます。</p>

<p>どうぞ、良いお年をお迎えください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[牡蠣駆動勉強会を行いました]]></title>
    <link href="http://zephiransas.github.com/blog/2013/12/23/daitokai2013/"/>
    <updated>2013-12-23T21:48:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/12/23/daitokai2013</id>
    <content type="html"><![CDATA[<p>これは<a href="http://www.adventar.org/calendars/75">大都会アドベントカレンダー2013</a>の12/23分のエントリーです。</p>

<p>前日は @mao_instantlife さんの<a href="http://d.hatena.ne.jp/mao_instantlife/20131222/1387674262">岡山のお気に入りな飲み屋</a></p>

<p>明日は @kotanin さんです。</p>

<p>大都会岡山には、皆さんご存知のように様々な勉強会が存在します。今回はその一つである<a href="http://local.aguuu.com/events/27433">牡蠣駆動勉強会</a>を紹介します。</p>

<p><img src="http://zephiransas.github.com/images/20131223/oister.JPG" alt="oister" /></p>

<p>牡蠣駆動勉強会はその名の通り（？）牡蠣を食べる勉強会です。</p>

<p>大都会岡山には牡蠣の産地として有名な日生がありますが、そこにある<a href="http://www.hinase.net/02kankou.html">「五味の市」</a>では、毎日採れたての新鮮な牡蠣を購入することができます。値段はだいたい1kg/¥1,000程度で殻付きの牡蠣を購入できます。某氏は¥2,000分ほど買って、売り子のおばちゃんと交渉してオマケをｹﾞｯﾄしたようですがw</p>

<p>またこの牡蠣は持ち帰って食べるだけでなく、現地にあるBBQスペースを借りることで、その場で食べることもできます。今回の勉強会の目的は、そのBBQスペースを使って美味しい牡蠣を食べることです。ちなみにこの時期の牡蠣は身が大きいので、他の場所で食べるときっといいお値段がするんじゃないですかね？</p>

<p>BBQスペースは五味の市の近くにある、海の駅「しおじ」というところでBBQスペースを¥1,000で90分借りることができます。ここでは必要なものがひと通りセットで提供されていて、受付で</p>

<ul>
<li>トング</li>
<li>網</li>
<li>牡蠣メス（牡蠣を開けたり、貝柱を切る専用のツール）</li>
<li>軍手</li>
<li>割り箸＆紙皿</li>
</ul>


<p>などを渡してくれます。席にはすでに火をおこした炭が準備されているので、特になにも持って行かなくても楽しめますが、上級者になると、ポン酢などのおこのみの調味料や、おにぎりを持ってきて焼きおにぎりにしたり、ビールを飲んだり、更にはワインを飲んだり（！）等々、楽しみかたはいろいろあります。
しおじには牡蠣以外にも、ホタテや海老などの海産物も売っていますので、お子様でも安心です。</p>

<p>というわけで、牡蠣駆動勉強会の紹介でした。ぜひ、シーズン中に行ってみてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Illumination Photo Advent Calendar 2013]]></title>
    <link href="http://zephiransas.github.com/blog/2013/12/21/photo-advent2013/"/>
    <updated>2013-12-21T00:05:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/12/21/photo-advent2013</id>
    <content type="html"><![CDATA[<p>これは<a href="http://www.adventar.org/calendars/67">Illumination Photo Advent Calendar 2013</a>の12月21日分のエントリです。</p>

<p>自分にしては珍しく、非技術系のアドベントカレンダーに参加してみました。</p>

<p>ところで自分は<strike>大都会</strike>岡山在住なのですが、岡山の観光名所といえば<a href="http://www.okayama-korakuen.jp/">「後楽園」</a>です。倉敷の美観地区とならび、有名だと思います。</p>

<p>後楽園は昼間も良いのですが、実は春夏秋冬のそれぞれシーズン始めには園内でイルミネーションをやっていて、夜間も開園していたりします。</p>

<p>今回はその後楽園のイルミネーションを紹介したいと思います。</p>

<iframe src="http://www.flickr.com/photos/zephiransas/9514242229/player/" height="534" width="800"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<iframe src="http://www.flickr.com/photos/zephiransas/9514231661/player/" height="534" width="800"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<iframe src="http://www.flickr.com/photos/zephiransas/10155261616/player/" height="534" width="800"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<iframe src="http://www.flickr.com/photos/zephiransas/10155180835/player/" height="534" width="800"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>




<iframe src="http://www.flickr.com/photos/zephiransas/10155070624/player/" height="534" width="800"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>後楽園では、元旦より<a href="http://www.okayama-korakuen.jp/2013/12/post-605.html">後楽園初春祭</a>な行われ、お正月ムードの日本庭園を楽しむことができます。お近くにお越しの際は、ぜひ寄ってみてはいかがでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[色んなバリエーションのirofさんを紹介しよう]]></title>
    <link href="http://zephiransas.github.com/blog/2013/12/13/irof2013/"/>
    <updated>2013-12-13T00:00:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/12/13/irof2013</id>
    <content type="html"><![CDATA[<p>これは<a href="http://atnd.org/events/44814">irofアドベントカレンダー2013</a>の12月13日分のエントリのようです。</p>

<p>昨日は<a href="https://twitter.com/akuraru">@akuraru</a>さんの<a href="http://d.hatena.ne.jp/akuraru/20131212/p1">「いろふさんの描かれていない領域には何があるのか」</a>でした。</p>

<p>このアドベントカレンダーは先日、急にJJUGの某幹事からQBKで振られたものです。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/zephiransas">@zephiransas</a> ありがとうございます！名前書いておきました！</p>&mdash; (´・ω・｀) (@megascus) <a href="https://twitter.com/megascus/statuses/410019752245870592">2013, 12月 9</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>正直ネタを思いつかないだろうなーとおもいつつ、昨日の@akuraruさんのネタを見て、衝動的に思いついたので、書いてみます。</p>

<p>皆さんご存知の用にirofさんには様々なインスタンスが存在しますが、それと同時に様々なバリエーションも存在します。BANDAIを始めとするおもちゃメーカーからもこぞってirofさんグッズが発売されていますが、今回はそのバリエーションの一部を皆さんにご紹介したいと思います。</p>

<h2>シャア専用irof</h2>

<p><img src="http://zephiransas.github.com/images/20131213/char_irof.jpg" alt="char_irof" /></p>

<p>シャア専用です。赤いです。3倍早いです。通常の3倍の速度でテストを書いてくれます。便利ですね。ぜひうちの会社に欲しいものです。</p>

<h2>量産型irof</h2>

<p><img src="http://zephiransas.github.com/images/20131213/eva_irof.jpg" alt="eva_irof" /></p>

<p>量産型です。空から降ってきて、人の黒歴史に干渉します。ちょっとイヤですね。</p>

<h2>金剛型戦艦99番艦 irof</h2>

<p><img src="http://zephiransas.github.com/images/20131213/kongou_irof.png" alt="kongou_irof" /></p>

<p>金剛型戦艦99番艦のirofﾃﾞｰｽ!!</p>

<h2>まとめ</h2>

<p>GIMP難しい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaOne2013報告会@岡山を開催しました]]></title>
    <link href="http://zephiransas.github.com/blog/2013/12/07/javaadvent2013/"/>
    <updated>2013-12-07T23:21:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/12/07/javaadvent2013</id>
    <content type="html"><![CDATA[<p>これは<a href="http://www.adventar.org/calendars/145">Java Advent Calendar2013</a>の12月7日分のエントリです。</p>

<p>前日は<a href="htp://twitter.com/muraken702">@muraken702</a>さんの<a href="http://acro-engineer.hatenablog.com/entry/2013/12/06/082444">「RxJavaを使ってCallback Hellから脱出する（ Vert.x がいいね！第5回 ）」</a>でした。</p>

<p>次の日は<a href="http://twitter.com/nabedge">@nabedge</a>さんの<a href="http://nabedge.blogspot.jp/2013/12/mixer2springmvcver-1217.html">「Mixer2のSpringMVC連携機能がver 1.2.17でさらに進化！」</a>です。</p>

<p>先日12/5に、岡山国際交流会館にて、<a href="http://local.aguuu.com/events/26540">JavaOne2013報告会@岡山</a>を開催しました。そのレポートです。</p>

<p><img src="http://zephiransas.github.com/images/20131208/DSC_2060.jpg" alt="DSC_2060" /></p>

<p>今回は初めて、平日の夜に勉強会を開催しました。というのも、講師の寺田さんが昼間は岡山市内の某SIerにて社内向けにJavaOne報告会を行い、そのまま夜はコミュニティ向けの報告会をやる、といった事情があったためでした。</p>

<p>前日までの参加登録では、9人の予定だったのですが、当日はちょっと増えて、最終的には11人の方にご参加いただきました。ありがとうございます。</p>

<p>２時間という限られた時間のなかで、前半でJavaOne2013の報告と、後半ではWebSocketを活用したより実用的なアプリケーションの開発モデルを紹介していただきました。</p>

<p><img src="http://zephiransas.github.com/images/20131208/DSC_2066.jpg" alt="DSC_2066" /></p>

<p>JavaOne2013の報告の中ではRaspberry piなどにも注目が集まっているように、「Internet of Things」をキーワードに、Javaが組み込みにも大きく注力していることが印象的でした。現在は組み込みにはJavaMEというJavaSEのサブセット版が提供されていましたが、これを将来的にはSEとMEの垣根をなくし、統合していく方針であるとのこと。これは次のメジャーバージョンで統一というわけにはいかず、少々時間がかかりそうではありますが、スマートフォンを始め、様々なデバイスがインターネットに繋がる時代においては、組み込み分野でも動かせるJavaの重要性は増していくように思いました。</p>

<p><img src="http://zephiransas.github.com/images/20131208/DSC_2079.jpg" alt="DSC_2079" /></p>

<p>最後には、寺田さんのJavaOne土産をプレゼントするじゃんけん大会などもありました。</p>

<p>懇親会で、参加者の皆さんと話をしたときに感じたのは、JavaEEをもっと知りたいという話でした。今後、岡山Javaユーザ会でも、ハンズオンや勉強会などを通じて、JavaEEの啓蒙もしていきたいと感じました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[weinreでiOSのブラウザのデバッグを行う手順]]></title>
    <link href="http://zephiransas.github.com/blog/2013/08/20/debug-with-weinre/"/>
    <updated>2013-08-20T13:27:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/08/20/debug-with-weinre</id>
    <content type="html"><![CDATA[<p>モバイル対応のWeb開発をしている時、iPhoneやiPadのブラウザでのデバッグに苦労したことはないですか？</p>

<p>PCの場合であれば、Chormeのデベロッパーツールとかでかなり簡単にデバッグを行うことができますが、iOSとかのSafariではデバッグツールをつかうことができません。</p>

<p>そんな時に便利なのが<a href="http://people.apache.org/~pmuellr/weinre/docs/latest/">weinre</a>です。weinreを使うことで、iOS側で表示されたWebページのデバッグツールの情報を、PCから見ることができる大変便利なツールです。</p>

<p>今回はweinreの使い方を紹介します。</p>

<h2>weinreのインストール</h2>

<p>まずはweinreをインストールします。weinreはnpmで提供されているので、以下のコマンドでインストールします。
npmをインストールしてない場合は、先に<a href="http://nodejs.org/">node.jsをインストール</a>してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo npm -g install weinre
</span></code></pre></td></tr></table></div></figure>


<p>自分の環境ではsudoを要求されたのですが、sudoなしでインストールできれば、それでもいいかと思います。</p>

<h2>weinreサーバの起動</h2>

<p>次にweinreサーバを、以下のコマンドで起動します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>weinre --boundHost 192.168.0.x
</span></code></pre></td></tr></table></div></figure>


<p>上記のboundHostにはlocalhostのIPアドレスを設定します。
weinreサーバはデフォルトの状態だとlocalhostからしか接続できません。この後iPad側から接続する必要がありますので、上記のようにboundHostを設定して、他のデバイスからも接続可能にしておく必要があります。</p>

<p>無事、起動できれば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>weinre: starting server at http://192.168.0.x:8080
</span></code></pre></td></tr></table></div></figure>


<p>と表示され、8080ポートでサーバが起動します。早速これをブラウザから見てみましょう。</p>

<p><img src="http://zephiransas.github.com/images/20130820/weinre_server.png" alt="weinre_server" /></p>

<p>上記の画面が表示されれば、サーバが起動しています。</p>

<h2>iOSデバイスでブックマークレットの登録</h2>

<p>次に、iOSデバイスでweinreサーバへ接続するためのブックマークレットを登録します。直接ブックマークレットを作れればいいのですが、iOSではそれができないようなので、ここでは新規にブックマークを作成して、これを編集することでブックマークレットを作成しています。</p>

<p>まずiOSデバイスのブラウザでweinreサーバ(ex: <a href="http://192.168.0.3:8080">http://192.168.0.3:8080</a>)を開きます。
そして、以下のjavascriptをクリップボードにコピーしておきます。</p>

<p><img src="http://zephiransas.github.com/images/20130820/bookmarklet.png" alt="bookmarklet" /></p>

<p>次にiOSデバイスのブラウザで適当なWebページを開き、それをブックマークしておきます。</p>

<p>そしてそのブックマークを編集して、先ほどコピーしたjavascriptをペーストします。</p>

<p><img src="http://zephiransas.github.com/images/20130820/ios_bookmarklet.png" alt="ios_bookmarklet" /></p>

<h2>デバッグの手順</h2>

<p>以上で全ての準備が整ったので、実際にデバッグを行ってみます。</p>

<p>まずはPC側のブラウザでweinreサーバを開き、接続中のクライアント一覧を表示します。</p>

<p><img src="http://zephiransas.github.com/images/20130820/client.png" alt="client" /></p>

<p>上記のリンクをクリックすると</p>

<p><img src="http://zephiransas.github.com/images/20130820/client_list.png" alt="client_list" /></p>

<p>このような画面が表示されます。iOSデバイスから接続されると、上記のTargets一覧に表示されます。</p>

<p>iOSデバイス側からは、まずデバッグしたいWebページを表示し、その後、先に登録したブックマークレットを実行します。するとTargetが以下のようになります。</p>

<p><img src="http://zephiransas.github.com/images/20130820/connect.png" alt="connect" /></p>

<p>あとはこの画面から、普通にデバッグツールを使用することができます。</p>

<p><img src="http://zephiransas.github.com/images/20130820/debug.png" alt="debug" /></p>

<p>当然、デバッグツール側でHTML要素を変更してやれば、それがそのままiOSデバイス側のブラウザに反映されますので</p>

<p><img src="http://zephiransas.github.com/images/20130820/debug1.png" alt="debug1" /></p>

<p>と変更してやれば、iOS側も</p>

<p><img src="http://zephiransas.github.com/images/20130820/debug2.png" alt="debug2" /></p>

<p>といった感じで、即反映されます。</p>

<h2>補足</h2>

<p>今回はiOSデバイスしか手元になかったため未検証ですが、当然Androidでも同様にデバッグすることができます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TimeMachineで検証エラーが発生した場合の復旧方法]]></title>
    <link href="http://zephiransas.github.com/blog/2013/08/16/resque-timemachine/"/>
    <updated>2013-08-16T14:57:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/08/16/resque-timemachine</id>
    <content type="html"><![CDATA[<p>我が家の環境では、<a href="http://buffalo.jp/product/hdd/network/ls-xl/">BuffaloのLS-XLシリーズ</a>というNASを使って、MBAのTime Machine環境を作っているのですが、最近よくこんなメッセージが出るようになりました。</p>

<p><img src="http://zephiransas.github.com/images/20130816/tm_error.png" alt="error" /></p>

<p>これはApple純正のTime Capsule以外をTime Machine環境に使用すると出てくるらしいです。
しかもこうなってしまうと、「後でバックアップを作成」にしても再度同じメッセージが表示されるし、「新規バックアップを作成」を選ぶと、それまでのバックアップの履歴は全て消えてしまいます。</p>

<p>なので、この場合の復旧手順をメモっておきます。</p>

<p>まずは、Time Machineを一旦「切」にしておきます。</p>

<p><img src="http://zephiransas.github.com/images/20130816/tm_off.png" alt="off" /></p>

<p>次にNASをマウントして、そのマウントポイントまでのパスを確認しておきます。自分の場合は「/Volumes/share/unicorn.sparsebundle」でしたので、以降はこれで説明します。</p>

<p>次にターミナルを立ちあげ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo chflags -R nouchg /Volumes/share/unicorn.sparsebundle
</span></code></pre></td></tr></table></div></figure>


<p>して、ロックを解除しておきます。次に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>hdiutil attach -nomount -noverify -noautofsck /Volumes/share/unicorn.sparsebundle
</span></code></pre></td></tr></table></div></figure>


<p>と入力します。実行すると以下のようなメッセージが表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/dev/disk2 Apple_partition_scheme
</span><span class='line'>/dev/disk2s1 Apple_partition_map
</span><span class='line'>/dev/disk2s2 Apple_HFSX
</span></code></pre></td></tr></table></div></figure>


<p>この時の/dev/disk? の?部分は実行時の環境によって異なる数値が入っていますので注意。また、この次点でTime Machineイメージに対して修復処理がバックグラウンドで実行されています。そのログが/var/log/fsck_hfs.logに出力されています。復旧が終了したかどうかはそのログで確認するのでtailで眺めてやります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tail -f /var/log/fsck_hfs.log
</span></code></pre></td></tr></table></div></figure>


<p>おそらくこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>** Checking Journaled HFS Plus volume.
</span><span class='line'>** Detected a <span class="k">case</span>-sensitive volume.
</span><span class='line'>   The volume name is Time Machine バックアップ
</span><span class='line'>** Checking extents overflow file.
</span><span class='line'>** Checking catalog file.
</span><span class='line'>** Checking multi-linked files.
</span><span class='line'>** Checking catalog hierarchy.
</span><span class='line'>** Checking extended attributes file.
</span><span class='line'>** Checking multi-linked directories.
</span><span class='line'>** Checking volume bitmap.
</span><span class='line'>** Checking volume information.
</span><span class='line'>** The volume Time Machine バックアップ appears to be OK.
</span></code></pre></td></tr></table></div></figure>


<p>最後の「The volume Time Machine バックアップ appears to be OK.」が表示されればイメージの復旧は完了です。</p>

<p>終了したら、デタッチしておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hdiutil detach /dev/disk2s2
</span></code></pre></td></tr></table></div></figure>


<p>ただこの状態だと、イメージ内部ではまだ壊れたままという情報が残っているため、これを修正します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /Volumes/share/unicorn.sparsebundle/
</span><span class='line'><span class="nv">$ </span>vi com.apple.TimeMachine.MachineID.plist
</span></code></pre></td></tr></table></div></figure>


<p>とし、その内部の</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;integer&gt;</span>2<span class="nt">&lt;/integer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>を</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;integer&gt;</span>0<span class="nt">&lt;/integer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>に修正します。</p>

<p>これで全て完了です。Time Machineを「入」にして、バックアップを実行して、エラーが表示されなければ完了です。</p>

<p>え？根本的な解決になってない！ですって？　そりゃTime Machineを買うしかありませんがな！！ww</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00DCM3W26" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo Leafをリリースしました]]></title>
    <link href="http://zephiransas.github.com/blog/2013/06/27/photoleaf-release/"/>
    <updated>2013-06-27T22:16:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/06/27/photoleaf-release</id>
    <content type="html"><![CDATA[<p>本日、フォトブック作成サービス「<a href="http://www.photo-leaf.com">Photo Leaf</a>」をリリースしました。</p>

<p><img src="http://zephiransas.github.com/images/20130627/photo-leaf.png" alt="photo-leaf" /></p>

<p>Photo Leafは1冊¥500でフォトブックを作成できるサービス「<a href="http://tolot.com/">TOLOT</a>」と連携して、<a href="http://www.flickr.com/">flickr</a>にアップした自分の写真からフォトブックを簡単に作成できます。</p>

<p>Photo Leafの利用は無料ですので、ぜひ使ってみてください！</p>

<h2>仕組みについて</h2>

<p>具体的なPhoto Leafの仕組みですが、実際にはPhoto Leafだけでフォトブックを作れるわけではありません。</p>

<p>Photo LeafはTOLOTの連携ファイルを作り、これをTOLOTアプリに読み込ませることによって、flickrの写真からフォトブックを作成することができるサービスです。</p>

<p>TOLOTの連携ファイルにはフォトブックのタイトルなどの情報と一緒に、各ページに印刷する写真についての情報をセットしています。これには画像へのURLもセット可能ですので、これにflickrの画像ファイルへのURLをセットするようになっています。</p>

<p>この連携ファイルをTOLOTアプリで読み込むと、画像データをflickrからダウンロードし、フォトブックを作成する仕組みになっています。</p>

<p>ちなみに、Photo Leafは<a href="https://developers.tolot.com/">TOLOTのマネタイズAPI</a>を使用していますので、皆さんがPhoto Leafからフォトブックを注文すると、その一部が私の収益になります。</p>

<h2>実行環境について</h2>

<p>サービスの開発には主に</p>

<ul>
<li>Ruby 2.0</li>
<li>Ruby on Rails 4.0</li>
<li>FlickRaw</li>
</ul>


<p>などを使用しています。Ruby2.0もRails4.0も最近リリースされたばかりですので、かなり新しいものを使用しています。特にRuby2.0は1.9系に比べるとかなりパフォーマンスが改善されていますので、Rails4.0と合わせることで、かなり高速に動作します。もちろん、自分の勉強がてらというのもあるのですが。</p>

<p>また実行時のプラットフォームとしては<a href="https://www.heroku.com/">Heroku</a>を使用しています。</p>

<p>最初は<a href="http://sqale.jp/">Sqale</a>も検討したのですが、まだ収益があがるようなものではないだろうなぁと思っていますので、できる限りコストをかけずに運用するには、現在のところはHerokuが最適と判断しました。</p>

<h2>まとめ</h2>

<p>最初にこのサービスを思いついたのは、<a href="http://uzulla.hateblo.jp/entry/2013/05/08/124552">InstgramからTOLOTの連携ファイルを作成するサービス</a>を作られた方がいて、そこからTOLOTのマネタイズAPIを知ったことがきっかけです。</p>

<p>自分自身も写真をかなり撮るので、フォトブックにもかなり興味があったものあります。実際に、カメラのキタムラが運営している「<a href="http://photobook.jp/photobon/top/">フォト本</a>」などで、フォトブックを作ったこともあります。フォト本は大きめのフォトブックを作るにはかなり良いサービスだと思うのですが、普段のスナップなどを手軽にフォトブックにしたい、といったニーズにはちょっと高い。TOLOTなら文庫本62ページのフォトブックを¥500で作成できるので、かなりコストパフォーマンスはいいと思います。</p>

<p>ぜひ、Photo Leafで自分の写真をフォトブックにしてみてください！</p>

<p>新しい写真の楽しみ方が、見つかると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Day Tokyo 2013報告会@岡山を開催してきた]]></title>
    <link href="http://zephiransas.github.com/blog/2013/06/18/jdt2013-okayama-report/"/>
    <updated>2013-06-18T16:24:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/06/18/jdt2013-okayama-report</id>
    <content type="html"><![CDATA[<p>2013年6月15日（土）に、奉還町リブラホールにて「<a href="http://local.aguuu.com/events/15432">Java Day Tokyo 2013報告会@岡山</a>」を開催してきました。</p>

<p>自分は「Java Day Tokyo2013基調公演より」と題して、報告をさせていただきました。</p>

<script async class="speakerdeck-embed" data-id="ebf8f340b7a20130a14b7e8eb314bbb5" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>当日のTwitterのまとめは、<a href="http://togetter.com/li/518745">こちら</a></p>

<p>その他、岡山Javaユーザ会の運営メンバーと、<a href="https://twitter.com/soudai1025">@soudai1025氏</a>にはJJUG CCCの感想についてもセッションをしていただきました。また角田さんの会社の同僚お二人にもJava Day Tokyoに参加しての感想を話していただきました。</p>

<p>また東京からは櫻庭さんにも来て頂き、JJUG CCCでセッションされた「Project Lambda Essential」を再演していただきました。Java8で最も注目されている機能、Project Lambdaの大事なところを丁寧にお話をしていただきましたので、参加者の皆さんのLambdaに対する理解が深まったものと思います。</p>

<p>この後の懇親会でも次のネタについて、いくつか話あったんですが、個人的には次はハンズオンをやりたいかなーと思っています。</p>

<p>いまのセッション形式もいいのですが、それだとどうしても参加者同士で交流が深まらないように思っていて、これを改善するためにはハンズオン形式のほうがいいのではないだろうか、と考えています。
で、実際にやるとすればJavaEEとかJavaFXあたりを題材にして、ハンズオンをやろうと考えています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2013に参加してきた]]></title>
    <link href="http://zephiransas.github.com/blog/2013/06/04/attended-rubykaigi2013/"/>
    <updated>2013-06-04T13:27:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/06/04/attended-rubykaigi2013</id>
    <content type="html"><![CDATA[<p>5/30〜6/1まで、東京国際交流館で開催されたRubyKaigi2013に参加してきました。</p>

<p><img src="http://farm3.staticflickr.com/2886/8924755070_a89349e1a3_n.jpg"/></p>

<p>RubyKaigiはRuby界では最大級のイベントですが、一度2011年をもって終了しています。それが今回はいろいろコンセプトを変えて復活した、ということで自分も参加してきました。</p>

<h2>RubyKaigiについて</h2>

<p>自分は今回が初参加なので、以前のRubyKaigiとの比較はできないのですが、他とは違うなと感じたのは以下のところ。</p>

<ul>
<li>参加費が（それなりに）高い</li>
</ul>


<p><img src="http://farm6.staticflickr.com/5346/8924581912_d947d91aa0_n.jpg"/></p>

<p>自分はSuper Early Birdでの参加申し込みだったので¥20,000でしたが、普通に登録すると¥35,000です。国内で行われるカンファレンスとしては少々高めです。といっても海外に比べたら、まだまだ安いのですが・・・</p>

<p>この値段設定についてもいろいろ意見はあるようですが、RubyKaigiクラスになると、ものすごい人数が参加したいと思うわけです。しかし、そのイベントを運営しているのはあくまでボランティアの人たちですので、そういった状況もあって「この値段を払ってでも参加したい」と思わせるコアなRubyistを呼びたかったのではないかな？と想像しています。</p>

<ul>
<li>メイン言語は英語</li>
</ul>


<p><img src="http://farm6.staticflickr.com/5457/8924657854_2a9796348e_n.jpg"/></p>

<p><a href="https://twitter.com/kazuhisa1976">@kazuhisa1976</a>氏曰く「世界を対象としたRubyのカンファレンスが、たまたま東京で開催された」</p>

<p>今回のRubyKaigiはインターナショナルカンファレンスとして開催されたので、英語がメイン言語です。<a href="http://rubykaigi.org/2013/">公式サイト</a>も英語ですし、セッションのほとんどが英語です。また、参加者も600人ほどいたそうですが、そのうち100人ほどが海外からの参加です。日本人スピーカーの場合に、日本語でセッションを行うこともありましたが、海外の人向けに日本語から英語への同時通訳（！）が準備されていて、このあたりもインターナショナルカンファレンスなんだなーとおもったことろです。</p>

<h2>セッションについて</h2>

<p>個人的に記憶に残ったセッションは</p>

<ul>
<li>The Future of JRuby?</li>
<li>High Performance Rails</li>
</ul>


<p>の2つ。</p>

<p>JRubyのセッションではJRubyのコアメンバーである、<a href="https://twitter.com/tom_enebo">Thomas E. Enebo</a>氏と、<a href="https://twitter.com/headius">Charles O. Nutter</a>氏が登壇。JRubyの高速化などについて話をしていました。で、気になったのがスライド中あったDalvik Generationという文字！将来JRubyでDalvikVMをサポートするような日が来るんでしょうかねぇ・・・</p>

<p>High Performance Railsではクックパッドのエンジニア、成田一成氏によるRailsの高速化の話。超巨大なクックパッドを如何にして、パフォーマンスアップさせているかという内容。</p>

<p><a href="https://speakerdeck.com/mirakui/high-performance-rails-long-edition">こちら</a>の資料にはセッションで話した内容に、キャッシュの話がプラスアルファされていますので、参考までに。</p>

<h2>Conclusion</h2>

<p>自分にとってはこれが初めてのRubyの大きなカンファレンスへの参加でした。最初はJavaとはまた違う雰囲気なんだろうなぁと思っていましたが、それほど大きな違いというのは正直感じませんでした。当然、自分はRubyのコミュニティには知り合いがいるわけではないので、ボッチ率高かったのですがw</p>

<p>ちなみにRubyKaigiは2014年も開催されるらしいです。今から楽しみですね。</p>

<p><img src="http://farm4.staticflickr.com/3830/8924877780_d5b2395e65_n.jpg"/></p>

<p>RubyKaigiで撮った写真はこちらにまとめてます。
<a href="http://www.flickr.com/photos/zephiransas/sets/72157633895505417/">http://www.flickr.com/photos/zephiransas/sets/72157633895505417/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GlassFishのアップグレード方法]]></title>
    <link href="http://zephiransas.github.com/blog/2013/05/24/how-to-upgrade-gf/"/>
    <updated>2013-05-24T15:46:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/05/24/how-to-upgrade-gf</id>
    <content type="html"><![CDATA[<p>会社で使ってるJenkinsさんはGlassFish上で動いているんですが、これのアップグレードを行ったので、そのメモ。</p>

<p>具体的にはGlassFish 3.1.1からGlassFish 3.1.2へアップグレードしました。</p>

<h2>updatetoolのインストール</h2>

<p>まずはアップグレードに使用するupdatetoolをインストールします。</p>

<p>方法はasadminと同じディレクトリにある、updatetoolを実行するだけ。</p>

<p>初めてupdatetoolコマンドを実行した際に、updatetoolをインストールするか聞いてきますので、yを押してインストールするだけです。</p>

<p>ちょっと時間がかかるので、アニメでも見ながらゆっくり待ちましょう。</p>

<h2>updatetoolからGlassFishのアップグレード</h2>

<p>上記の手順でupdatetoolのインストールが終了したら、もう一度updatetoolコマンドを実行します。するとGUIが立ち上がって来ますので、以下のようにするだけ。</p>

<p><img src="http://zephiransas.github.com/images/20130524/updatetool.png" alt="updatetool" /></p>

<p>あとは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./asadmin version
</span></code></pre></td></tr></table></div></figure>


<p>などで、アップグレードできていることを確認しましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写真で振り返るゆとり]]></title>
    <link href="http://zephiransas.github.com/blog/2013/05/20/yutori-advent-calendar/"/>
    <updated>2013-05-20T00:06:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/05/20/yutori-advent-calendar</id>
    <content type="html"><![CDATA[<p>これは「<a href="http://atnd.org/events/39189">ゆとりアドベントカレンダー</a>」の5/20分のエントリです</p>

<p>前日は <a href="http://twitter.com/btnrouge">@btnrouge</a> さんの「<a href="http://www.coppermine.jp/docs/programming/2013/05/weblogic-di.html">WebLogicのDIは果たして出来損ないなのか？</a>」でした。</p>

<p>そもそも、このゆとりアドベントカレンダーが何なのかよく分からず、しかも誰に言われるまでもなく、（空気を呼んで）勝手にエントリした身ですので、何もネタがありません（ぉぃ</p>

<p>なので、自分とゆとりさんとの出会いを、写真で振り返ってみたいと思います( ･`ω･´)</p>

<h2>First Contact</h2>

<p>多分直接お会いしたのはTDDBC岡山 1.0の時ではないでしょうか。TDDBC前日にデミカツ丼で有名な「やまと」という店で会ったような気がします。当然、それはまではTL上でしか絡みがなかったので、お会いしてそのガタイのデカさに驚いた記憶があります。また、その時にJava7の日本語ドキュメントがさー的な話をしたような気がします。</p>

<p>TDDBCでは、JavaのTAの一人として活躍して頂きました。</p>

<p><img src="http://farm9.staticflickr.com/8299/7865342634_04ee1d6462_n.jpg"/></p>

<h2>その後</h2>

<p>TDDBCの後は、多分去年のJavaOne Tokyoでお会いしたのかな・・・？</p>

<p>つい最近は、先日のJava Day Tokyoで。長身にぐるぐるTシャツで、離れたところからでもすぐ確認できました。さすが、環境にやさしいゆとりさんですね！</p>

<p>なんか最近はJJUGの幹事にもなられたらしいので、これからも日本のJava界の為、頑張ってくれると思われます。ゆとりさん、頑張ってー</p>

<p><img src="http://farm8.staticflickr.com/7281/8740171565_cc77c9a9e9_n.jpg"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Day Tokyo 2013に参加してきた（セッション）]]></title>
    <link href="http://zephiransas.github.com/blog/2013/05/19/javadaytokyo2/"/>
    <updated>2013-05-19T00:17:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/05/19/javadaytokyo2</id>
    <content type="html"><![CDATA[<p>前回の基調講演につづいて、今回は自分が参加したセッションのレポートです。</p>

<h2>Ask the Experts</h2>

<p>基調講演にも登壇したJavaSE,JavaFX,JavaEEの各キーパーソンに、直接質問できるセッションです。ちょうど昼の時間だったので、本来は昼食をとりつつ受けるセッションなんですが、うっかり自分は昼食を仕入れるのを忘れてました・・・</p>

<p>JavaSEの担当は、Simon Ritter氏</p>

<p><img src="http://farm8.staticflickr.com/7288/8740173841_d492ab6090_n.jpg"/></p>

<p>JavaFXの担当は、Jim Weaver氏</p>

<p><img src="http://farm8.staticflickr.com/7285/8741292898_42456c92d5_n.jpg"/></p>

<p>JavaFXの担当は、Arun Gupta氏</p>

<p><img src="http://farm8.staticflickr.com/7281/8741293406_f87d358552_n.jpg"/></p>

<p>通訳の方が居たので、もちろん日本語で質問できたのですが、意外と質問が少ないような感じでした。</p>

<p>印象に残ったのは、最後のJavaEEの質問で</p>

<ul>
<li>Q「JavaEEはいろんな仕様で構成されているが、最低限どれを使ってればJavaEEを使ってることになるのか？」</li>
</ul>


<p>という質問がありました。（ちょっと意地悪な質問な気もしますがw）それに対してArunは</p>

<ul>
<li>A「難しい質問だけど、強いて言えばServletかな？あ、でも、Strutsはダメだね！」</li>
</ul>


<p>と返して、会場は大爆笑でしたw</p>

<h2>Javaプラットフォームにおける Batch アプリケーション (JSR 352)</h2>

<p>JavaEE7で導入されるJBatchのセッション。担当はArun氏です。</p>

<p><img src="http://farm8.staticflickr.com/7286/8741295358_cce2037082_n.jpg"/></p>

<p>このJBatchは、エンタープライズアプリケーションでよくある、バッチ処理を効率よく書くためのフレームワークです。セッションを受けつつTLを眺めてて知ったのですが、どうもSpring Batchと非常によく似た仕組みのようです。設定をXMLで記述していくのが少々面倒な気もしますが、この辺りが改善されていけば、バッチ処理のスタンダードになるかなーという感じ。JavaEE準拠のサーバはもちろん、スタンドアロンの環境でも実行可能との事。</p>

<h2>エンタープライズ環境における並列処理の実装方法について</h2>

<p>我らの王子こと、寺田さんによるConcurrency Utilityのセッション。</p>

<p>以前からJavaではThreadを使って、並列処理を書くことが可能でしたが、実際にはなかなか難しいものでした。これを簡単に行えるのがConcurrency Utilityです。実際に以下のデモを会場で見せていました。</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/s9OB3lDPwtg?rel=0" frameborder="0" allowfullscreen></iframe>


<p>詳細は<a href="http://yoshio3.com/2013/05/15/concurrency-utilities-for-ee-7/">寺田氏のブログ</a>に詳しいですが、Concurrncy Utilityを使うことで、CPUリソースを無駄なく使うコードを、簡単に実装することができるようになります。</p>

<h2>Java the Night</h2>

<p><img src="http://farm8.staticflickr.com/7285/8740181743_e4b88c0b29_n.jpg"/></p>

<p>最後はお楽しみ（？）のJava the Night。日本のJava界を代表するエンジニアがLT&amp;デモを行うという趣向です。
一人8分の持ち時間でした。どのLTもさすがはJava界のスーパーエンジニア！と唸らせる、最高に面白い内容でした。
前回のJavaOne Tokyoの時もそうでしたが、この最後のLT枠に参加せずして、Javaのイベントに参加したとは言えないくらい、充実した内容です。
なかでも印象に残ったのは、北海道の大学生2人。</p>

<p><img src="http://farm8.staticflickr.com/7283/8741304934_655e6abe63_n.jpg"/></p>

<p>プレゼンソフトなんですが、JavaFXで様々なエフェクトをつけることができるというものでした。彼らの初々しい（！）発表を聞きながら、その将来に期待をするとともに、まだまだ自分も頑張らなければ、と想いを新たにしました。</p>

<h2>JavaSE7 日本語ドキュメント提供開始</h2>

<p>そしてJava the Night終了後、寺田さんから重大な発表がありました。それはJavaSE7の日本語ドキュメントの提供を開始した、とのアナウンスでした。実はJavaSE7リリース後、しばらくしても日本語ドキュメントは提供されていませんでした。様々な方面から要望は上がっていましたが、残念ながら日本語ドキュメントは当分は提供されないという決定が、以前なされました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>影響度が大きい事を十分承知で申し上げます。誠に残念ながら直近で、提供の予定はございません。“@<a href="https://twitter.com/skrb">skrb</a>: @<a href="https://twitter.com/yoshioterada">yoshioterada</a> それよりもJava SE 7の日本語のJavadocはリリースされないのでしょうか？”</p>&mdash; Terada Yoshioさん (@yoshioterada) <a href="https://twitter.com/yoshioterada/status/183876594010558464">2012年3月25日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>その後、有志を中心にボランティアで日本語化しようかといった動きもありましたが、本格化するには至りませんでした。</p>

<p>そして、Java Day Tokyoにてサプライズとでもいいましょうか、<a href="http://yoshio3.com/2013/05/14/%EF%BD%8A%EF%BD%81%EF%BD%96%EF%BD%81-%EF%BD%93%EF%BD%85%EF%BC%97%EF%BD%81%EF%BD%90%EF%BD%89%E6%97%A5%E6%9C%AC%E8%AA%9E%E7%89%88%E6%8F%90%E4%BE%9B%E9%96%8B%E5%A7%8B/">JavaSE7の日本語ドキュメント提供開始</a>のアナウンスがされました。</p>

<p>JavaSE7がリリースされて随分経ちますが、これでようやくスタートライン。Java7を普通に使ってもらう環境が、日本でも整ったといった感じです。いろいろ想いはありますが、日本オラクル＆寺田さんの努力に敬意を表したいと思います。</p>

<h2>Conclusion</h2>

<p><img src="http://farm8.staticflickr.com/7286/8740206373_002b31196d_n.jpg"/></p>

<p>以上、2回に分けてJava Day Tokyo 2013の模様をまとめました。</p>

<p>1年ぶりにJavaのカンファレンスに参加して「自分はやっぱり、このJavaのコミュニティが好きなんだなぁ」という思いを強くしました。もちろん他のコミュニティでも似たような経験はできるとは思いますが、古参から新参まで多くのカラーが集まり、多種多様な人がいるコミュニティも珍しいように思います。そのような環境でエンジニアをやれるのは、とても嬉しいことです。</p>

<p>さて、岡山Javaユーザ会でも、Java Day Tokyo 2013報告会@岡山と題して、報告会をやります。</p>

<p>お申込みは<a href="http://local.aguuu.com/events/15432">こちら</a>からです。</p>

<p>お近くの方は、是非ご参加ください。</p>
]]></content>
  </entry>
  
</feed>
