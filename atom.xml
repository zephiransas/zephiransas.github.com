<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zephiransasのチラシの裏]]></title>
  <link href="http://zephiransas.github.io/atom.xml" rel="self"/>
  <link href="http://zephiransas.github.io/"/>
  <updated>2017-04-05T17:22:33+09:00</updated>
  <id>http://zephiransas.github.io/</id>
  <author>
    <name><![CDATA[Takafumi Yoshida (@zephiransas)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring BootのCSSをGulpで管理する]]></title>
    <link href="http://zephiransas.github.io/blog/2017/04/05/gulp-sass/"/>
    <updated>2017-04-05T16:13:17+09:00</updated>
    <id>http://zephiransas.github.io/blog/2017/04/05/gulp-sass</id>
    <content type="html"><![CDATA[<p>Spring BootのプロジェクトでもSASSが書きたい！という欲望から、Gulpを使ってSASSをコンパイルするようにしました。</p>

<p>基本Gulpでやってるので、出力先だけ変えれば、特にSpring Bootには関係ない気もしますが・・・</p>

<p>npmは既にインストールしてある前提で。</p>

<h2>フォルダの構成と基本方針</h2>

<p>フォルダ構成は以下のようなイメージ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>├── assets
</span><span class='line'>│   └── stylesheets
</span><span class='line'>│       └── application.scss
</span><span class='line'>├── gulpfile.js
</span><span class='line'>├── package.json
</span><span class='line'>└── src
</span><span class='line'>    └── main
</span><span class='line'>        └── resources
</span><span class='line'>            └── static
</span><span class='line'>                └── css
</span><span class='line'>                    ├── maps
</span><span class='line'>                    │   └── application.css.map
</span><span class='line'>                    └── application.css
</span></code></pre></td></tr></table></div></figure>


<p>assets/stylesheets以下にSASSを配置し、これをGulpでコンパイル。</p>

<p>出力先をSpring BootのCSS配備先 <code>src/main/resources/static/css</code> にして、これをThymeleafから参照する、という方針です。</p>

<h2>必要なパッケージをインストールする</h2>

<p>まずは必要なパッケージをnpmでインストールしていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm init
</span><span class='line'><span class="o">(</span>以降、全てデフォルトで<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>npm install --save-dev gulp gulp-sass gulp-sourcemaps gulp-minify-css gulp-plumber
</span></code></pre></td></tr></table></div></figure>


<p>これでpackage.jsonが作成され、node_modulesに依存ライブラリがインストールされます。node_modulesはgitignoreしておくといいでしょう。</p>

<h2>gulpfile.jsを作成する</h2>

<p>SASSをコンパイルできるようGulpのタスクを定義します。</p>

<figure class='code'><figcaption><span>gulpfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">sass</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-sass&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">sourcemaps</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-sourcemaps&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">minifyCss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-minify-css&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">plumber</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-plumber&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;sass&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;assets/stylesheets/*.scss&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">plumber</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">init</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sass</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">minifyCss</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;./maps&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;src/main/resources/static/css&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>まずscssファイルの置き場所を <code>gulp.src('assets/stylesheets/*.scss')</code> としてassets/stylesheetsディレクトリに設定します。</p>

<p><code>.pipe(sass())</code>でSASSのコンパイル、<code>.pipe(minifyCss())</code>でCSSの圧縮をしています。</p>

<p>圧縮したCSSだと、元のSASSでの場所がわからなくなるので <code>.pipe(sourcemaps.write('./maps'))</code>でmapファイルを作成します。</p>

<p><code>sourcemaps.write()</code>はデフォルトだとコンパイルされたcss内部にインラインでmapを書き込むので、別途mapsディレクトリにmapファイルを書き込むよう設定しておきます。こうしておくことでChromeなどのDeveloper toolで見たときにSASSの場所が分かるようになります。</p>

<p>最後に <code>.pipe(gulp.dest('src/main/resources/static/css'))</code>でCSS出力しています。</p>

<p>設定したタスクを実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gulp sass
</span></code></pre></td></tr></table></div></figure>


<p>これでCSSが出力されますので、あとはThymeleaf側から</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;@{/css/application.css}&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>として参照できます。</p>

<h2>SASSを分割したい</h2>

<p>よくあるケースとして、画面単位でSASSを分け、最終的なCSSでは1つにまとめてしまいたい、というケースがあります。
例えば、以下のようなイメージ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>assets
</span><span class='line'>└── stylesheets
</span><span class='line'>    ├── modules &lt;- 各画面ごとのSASS
</span><span class='line'>    │   ├── _hoge.scss
</span><span class='line'>    │   └── _fuga.scss
</span><span class='line'>    └── application.scss &lt;- modulesを全てimportしたい
</span></code></pre></td></tr></table></div></figure>


<p>こういった時にはgulp-sass-bulk-importが便利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install --save-dev gulp-sass-bulk-import
</span></code></pre></td></tr></table></div></figure>


<p>としてgulp-sass-bulk-importをインストールした後、gulpfile.jsを修正します。</p>

<figure class='code'><figcaption><span>gulpfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sassBulk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-sass-bulk-import&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;sass&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;assets/stylesheets/*.scss&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">plumber</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">init</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sassBulk</span><span class="p">())</span> <span class="err">#</span> <span class="err">追加</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sass</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">minifyCss</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;./maps&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;src/main/resources/static/css&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはapplication.scssで</p>

<figure class='code'><figcaption><span>application.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span> <span class="s2">&quot;modules/*&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすることで、modules内のSASSを含めて、CSSがコンパイルされます。</p>

<p>注意点として、modules以下のSASSファイルは、プレフィックスとしてアンダーバーが付与されています。付与しない場合は、modules以下のSASSも普通にコンパイルの対象になり、そのままdestに出力されてしまうので、これを防止するため、アンダーバーを付与しています。</p>

<h2>Bootstrapを使いたい</h2>

<p>まずBoostrapをnpmでインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install --save-dev bootstrap@4.0.0-alpha.4
</span></code></pre></td></tr></table></div></figure>


<p>これでnode_modulesにBootstrapがインストールされたので、これをGulpから参照できるようgulpfile.jsを修正します。</p>

<figure class='code'><figcaption><span>gulpfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;sass&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;assets/stylesheets/*.scss&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">plumber</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">init</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sassBulk</span><span class="p">())</span> <span class="err">#</span> <span class="err">追加</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sass</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">includePaths</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;./node_modules/bootstrap/scss&#39;</span><span class="p">]</span>   <span class="err">#</span> <span class="err">追加</span>
</span><span class='line'>    <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">minifyCss</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;./maps&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;src/main/resources/static/css&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはapplication.scssで</p>

<figure class='code'><figcaption><span>application.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span> <span class="s2">&quot;bootstrap&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とするだけです。SASSのコンパイルを実行すると、application.cssにBootstrapのcssが含まれていることがわかります。</p>

<h2>参考など</h2>

<ul>
<li><a href="http://qiita.com/steelydylan/items/37aa028fa11046cf4f51">gulpの設定を簡単に行える、gulpfile generatorを作りました。</a></li>
<li><a href="http://steelydylan.github.io/gulp-generator/">gulp generator</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CircleCIでGradleのテストを並列実行する]]></title>
    <link href="http://zephiransas.github.io/blog/2017/03/10/ciecleci-and-gradle/"/>
    <updated>2017-03-10T09:32:48+09:00</updated>
    <id>http://zephiransas.github.io/blog/2017/03/10/ciecleci-and-gradle</id>
    <content type="html"><![CDATA[<p>現在開発を行っているプロジェクトでは、Spring Bootを使って開発を行っているのですが、そこでのテストをCI環境で実行できるよう設定を行ったので、その手順を書いておきます。</p>

<h2>CircleCIで普通にテストできるようにする</h2>

<p>最初は並列ではなく、1つのコンテナを使ってCircleCIでテストできるように設定を行います。まずcircle.ymlを以下のように準備。</p>

<figure class='code'><figcaption><span>circle.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">machine</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">java</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">openjdk8</span>
</span><span class='line'>  <span class="l-Scalar-Plain">timezone</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Asia/Tokyo</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">_JAVA_OPTIONS</span><span class="p-Indicator">:</span> <span class="s">&quot;-Xms512m</span><span class="nv"> </span><span class="s">-Xmx1024m&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">GRADLE_OPTS</span><span class="p-Indicator">:</span> <span class="s">&#39;-Dorg.gradle.jvmargs=&quot;-Xmx1024m</span><span class="nv"> </span><span class="s">-XX:+HeapDumpOnOutOfMemoryError&quot;&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">post</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sudo service postgresql stop</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">dependencies</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">override</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./gradlew testClasses</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">post</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql -e &#39;create database [データベース名];&#39;</span>
</span><span class='line'>    <span class="c1"># flywayなどでのマイグレーション</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">override</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./gradlew test</span>
</span><span class='line'>  <span class="l-Scalar-Plain">post</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir -p $CIRCLE_TEST_REPORTS/junit/ &amp;&amp; find . -type f -regex &quot;.*/build/test-results/.*xml&quot; -exec cp {} $CIRCLE_TEST_REPORTS/junit/ \;</span><span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<h3>メモリ割り当てについて</h3>

<p>machine.environmentでJAVA_OPTIONSに"-Xms512m -Xmx1024m"を指定しています。これはCircleCIでは1つのコンテナには4Gのメモリが割当られており、その上限をこえると、コンテナがフリーズして、10分経過するとテスト失敗になるという現象に対応するためです。合わせてGRADLE_OPTSにも同様の設定をおこなっています。</p>

<p>このあたりの設定も状況によっては増やせる場合もありますので、テストを実行しながら、調整してみてください。</p>

<ul>
<li><a href="https://circleci.com/docs/1.0/oom/">Your build hit the 4G memory limit</a></li>
</ul>


<h3>使わないデータベースを止める</h3>

<p>CircleCIではデフォルトでPostgreSQLとMySQLがインストールされたコンテナが準備されます。machine.postで使わないデータベースを止めることで、貴重なメモリの使用量を抑えることができます。</p>

<p>今回テスト対象のデータベースはMySQLですので、PostgreSQLを止めてメモリを節約します。</p>

<h3>dependenciesでライブラリをダウンロードしておく</h3>

<p>CircleCIではdatabaseサイクルが終わったタイミングで、次回のビルドを高速に実行できるよう、依存ライブラリなどをキャッシュする仕組みがあります。</p>

<p>しかしGradleではテストを実行する直前まで依存ライブラリはダウンロードされず、通常のままだと依存ライブラリをキャッシュに含めることができません。</p>

<p>そこでdependencies.overrideにてtestClassesタスクを実行しておきます。こうすることで、依存ライブラリがダウンロードされ、databaseサイクル終了後にキャッシュが作成されるようになります。</p>

<h3>Spring Bootのprofileはciにする</h3>

<p>CircleCIで動かす場合はデータベースの接続先が開発環境などとは変わるはずですので、CircleCI専用のapplication.ymlをapplication-ci.ymlとして作成します。</p>

<figure class='code'><figcaption><span>application-ci.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">spring</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">profiles</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">active</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ci</span>
</span><span class='line'>  <span class="l-Scalar-Plain">datasource</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">jdbc:mysql://localhost:3306/{データベース名}</span>
</span><span class='line'>    <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ubuntu</span>
</span><span class='line'>    <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">driverClassName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">com.mysql.jdbc.Driver</span>
</span></code></pre></td></tr></table></div></figure>


<p>CircleCIのMySQLには上記の設定で接続可能です。次にテスト実行時に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">SPRING_PROFILES_ACTIVE</span><span class="o">=</span>ci ./gradlew <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすることで、application-ci.ymlのデータベース接続情報を使用するようになります。</p>

<h3>テスト実行結果を集約する</h3>

<p>test.postにて、テスト結果のxmlを$CIRCLE_TEST_REPORTSにコピーしておきます。こうすることで、CircleCIの画面からテスト結果を簡単に見ることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">test</span>:
</span><span class='line'>  post:
</span><span class='line'>    - mkdir -p <span class="nv">$CIRCLE_TEST_REPORTS</span>/junit/ <span class="o">&amp;&amp;</span> find . -type f -regex <span class="s2">&quot;.*/build/test-results/.*xml&quot;</span> -exec cp <span class="o">{}</span> <span class="nv">$CIRCLE_TEST_REPORTS</span>/junit/ <span class="se">\;</span>:
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://circleci.com/docs/1.0/test-metadata/#gradle-junit-results">Collecting test metadata</a></li>
</ul>


<h2>並列テストが実行できるようにする</h2>

<p>次にCircleCI+Gradleで並列テストをすることを考えてみます。</p>

<p>一般的に並列テストを行う場合は、テスト対象のクラスを取得し、これをノードそれぞれに均等に割り振ることでテストを分散して実行します。</p>

<p>Gradleにはデフォルトではテスト対象のクラスフィルタリングする昨日はあるのですが、対象クラスを個別に指定する方法はありません。</p>

<p><a href="https://docs.gradle.org/current/userguide/java_plugin.html#test_filtering">https://docs.gradle.org/current/userguide/java_plugin.html#test_filtering</a></p>

<p>ですので今回はGradle実行時に-Pオプションを指定し、以下のようにして対象クラスを一括して渡す方法を採用しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew <span class="nb">test</span> -PtestFiles<span class="o">=</span>./src/test/java/com/example/HogeTest ./src/test/java/com/example/FugaTest ....以下テスト対象クラスを列挙
</span></code></pre></td></tr></table></div></figure>


<p>まずは、このオプションを組み立てつつ、gradleｗ実行する専用のシェルスクリプト（circleci.sh)を準備します。</p>

<figure class='code'><figcaption><span>circleci.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">testFiles</span><span class="o">=</span><span class="k">$(</span>find ./src/test -name *Test.java <span class="p">|</span> sort <span class="p">|</span> awk <span class="s2">&quot;NR % ${CIRCLE_NODE_TOTAL} == ${CIRCLE_NODE_INDEX}&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$testFiles</span>
</span><span class='line'><span class="nv">SPRING_PROFILES_ACTIVE</span><span class="o">=</span>ci ./gradlew :webapp:test -PtestFiles<span class="o">=</span><span class="s2">&quot;$testFiles&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>CircleCI上でビルドに使用しているノード数は環境変数CIRCLE_NODE_TOTALから、自身のノード番号は環境変数CIRCLE_NODE_INDEXから取得できますので、これをawkから利用しつつ、テスト対象クラスを分散させます。</p>

<p>次にbuild.gradle内では-Pオプションで渡されたtestFilesのみをテスト対象にするよう、includeTestsMatchingを使って設定を行います。</p>

<figure class='code'><figcaption><span>build.gradle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">test</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span>project.hasProperty<span class="o">(</span><span class="s2">&quot;testFiles&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      ArrayList <span class="nv">files</span> <span class="o">=</span> project.getProperties<span class="o">()</span>.get<span class="o">(</span><span class="s2">&quot;testFiles&quot;</span><span class="o">)</span>
</span><span class='line'>              .replaceAll<span class="o">(</span><span class="s2">&quot;./src/test/java/&quot;</span>, <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>              .replaceAll<span class="o">(</span><span class="s2">&quot;/&quot;</span>, <span class="s2">&quot;.&quot;</span><span class="o">)</span>
</span><span class='line'>              .replaceAll<span class="o">(</span><span class="s2">&quot;.java&quot;</span>, <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>              .split<span class="o">(</span><span class="s2">&quot;\\s+&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span>String file : files<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          println file
</span><span class='line'>          filter <span class="o">{</span>
</span><span class='line'>              includeTestsMatching file
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうすることで-PtestFilesで指定されたもののみ、テストを行うことができます。</p>

<p>最後に、並列実行できるようcircle.ymlを修正します。</p>

<figure class='code'><figcaption><span>circle.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">override</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./circleci.sh</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">parallel</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>  <span class="l-Scalar-Plain">post</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir -p $CIRCLE_TEST_REPORTS/junit/ &amp;&amp; find . -type f -regex &quot;.*/build/test-results/.*xml&quot; -exec cp {} $CIRCLE_TEST_REPORTS/junit/ \;</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">parallel</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストは先ほど作成したcircle.shを実行するようにしparallel: trueを付与して並列実行するようにします。<strong>parallel: trueはインデント4つであることに注意！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スクフェス・ログサーバをつくった]]></title>
    <link href="http://zephiransas.github.io/blog/2016/12/31/schfeslogsvr/"/>
    <updated>2016-12-31T12:47:59+09:00</updated>
    <id>http://zephiransas.github.io/blog/2016/12/31/schfeslogsvr</id>
    <content type="html"><![CDATA[<p>今日は大晦日ですね。年末ですが今年も例によって、コード書いたりプラモ作ったり、普段の連休と同じくダラダラ過ごしております。</p>

<p>ところで今年の<a href="http://www.adventar.org/calendars/1360">ラブライブ！アドベントカレンダー</a>はチェックしましたか？
自分も20日目に<a href="https://zephiransas.goat.me/3OsFK6X7">劇場版ラブライブとμ’ｓメンバーのその後</a>というタイトルでエントリしてます。
今年はその他にも、さまざまな視点から見た素晴らしいエントリがたくさん集まってますので、ラブライバーならぜひチェックしてみてください。</p>

<p>で、22日目のエントリには<a href="https://twitter.com/hideo54">@hideo54</a>さんの<a href="https://blog.hideo54.com/archives/591">スクフェスのライブスコアを取得する”schfeslog”を作った話</a>というのがあります。
これはnodeで建てたプロキシを使って、スクフェスがサーバに送信してる通信内容をみて、ライブのプレイ結果をツイートすることができるツールです。</p>

<ul>
<li>hideo54/schfeslog - <a href="https://github.com/hideo54/schfeslog">https://github.com/hideo54/schfeslog</a></li>
</ul>


<p>これをみて「お、ツイートできるんなら、外部サーバにも送信できるんじゃね？」ってことで、早速コードを書いてみました。</p>

<p>まずはschfeslog側に外部サーバへの通信機能を実装しています。該当するPull Requestは<a href="https://github.com/hideo54/schfeslog/pull/4">こちら</a>。単純にプレイデータをJSON形式にして、設定でされたサーバにPOSTするだけです。</p>

<p>これを受信するサーバはこちら。</p>

<ul>
<li>zephiransas/schfeslogsvr - <a href="https://github.com/zephiransas/schfeslogsvr">https://github.com/zephiransas/schfeslogsvr</a></li>
</ul>


<p>送信されたプレイデータを一覧で見ることもできます。ちなみに私のプレイデータがこちら</p>

<ul>
<li>schfeslog - <a href="http://schfeslog.herokuapp.com/">http://schfeslog.herokuapp.com/</a></li>
</ul>


<p>見た目とかは、もうちょっと改善したいところです・・・</p>

<p>最近、ちょっとJavaの案件をやってるせいもあって、真面目にSpring Bootで書いています。こういったRESTなアプリケーションを作るにはSpring Bootはとても簡単でいいですね。</p>

<p>サーバ側は簡単に自分用に環境を作れるよう、Deploy to Herokuボタンも準備してますので、興味のあるかたはschfeslogと一緒に、ぜひ試してみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[合同勉強会2016に参加してきた]]></title>
    <link href="http://zephiransas.github.io/blog/2016/12/18/gbdaitokai2016/"/>
    <updated>2016-12-18T21:21:31+09:00</updated>
    <id>http://zephiransas.github.io/blog/2016/12/18/gbdaitokai2016</id>
    <content type="html"><![CDATA[<p>このエントリは<a href="http://www.adventar.org/calendars/1580">大都会岡山アドベントカレンダー2016</a>の18日目のエントリです。</p>

<p>昨日のエントリは <a href="https://twitter.com/DAI199">たがみだいき</a>さんの「<a href="http://tagamidaiki.com/railsgirlsokayama-2nd/">RailsGirlsOkayama 2ndを2月25日26日に開催する予定です！</a>」でした。
<a href="http://railsgirls.com/okayama2015.html">去年の第1回</a>には、自分もコーチとして参加させてもらいましたが、そこから新たに岡山に女性エンジニアのコミュニティができ、それが主体となってRailsGirlsをやる、というのは素晴らしいことだと思います。きっとイベントも大成功することでしょう。</p>

<p>先日、毎年恒例となった合同勉強会と忘年会議が開催されました。</p>

<p>例年のように県内だけでなく県外からも多くのかたに参加していただき、大変よいイベントになったのではないでしょうか。</p>

<p>例によって写真を撮ってますのでこちらからどうぞ。</p>

<p><a href="https://www.flickr.com/photos/zephiransas/sets/72157674062172594/">合同勉強会&amp;忘年会議2016</a></p>

<p>個人的に今回のベストトーカー（not ベストストーカー）を上げたいのは、<a href="https://twitter.com/samuneP">SamuneP</a>さんの「ゲーム会社経営ゲーム」。
とにかく高い技術力を武器に、ちょっと尻込みしちゃうような案件をやってるハナシで、とにかく「今の時代にこんな人がいるのか？！」と驚きの連続でした。その凄さをみんなもうまく言語化できずに</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">めちゃくちゃ面白い話聞いてるけど、上手に実況できる気がしないwww <a href="https://twitter.com/hashtag/gbdaitokai?src=hash">#gbdaitokai</a></p>&mdash; シン・ダイクシー Plus (@daiksy) <a href="https://twitter.com/daiksy/status/809990570441523200">2016年12月17日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">なんか…うまいこといわれへんけど「この人、天才ちゃうか？」と思わされるｗ <a href="https://twitter.com/hashtag/gbdaitokai?src=hash">#gbdaitokai</a></p>&mdash; 三浦一仁(本読めるようになりたい) (@kazuhito_m) <a href="https://twitter.com/kazuhito_m/status/809990766495862784">2016年12月17日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">つよい(つよい) <a href="https://twitter.com/hashtag/gbdaitokai?src=hash">#gbdaitokai</a></p>&mdash; ⊇ﾅﾆﾚﾆω (@kotanin) <a href="https://twitter.com/kotanin/status/809990832128262144">2016年12月17日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>などなど、人のボキャブラリーを著しく低下させる作用があったようですw</p>

<p>さて、次は来年のオープンセミナーです。こちらも面白いセッションをたくさん用意できるよう、誠意準備中ですので、ぜひご参加ください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Wrapperを使ってプロジェクトで使うMavenのバージョンを指定する]]></title>
    <link href="http://zephiransas.github.io/blog/2016/05/23/maven-wrapper/"/>
    <updated>2016-05-23T16:34:12+09:00</updated>
    <id>http://zephiransas.github.io/blog/2016/05/23/maven-wrapper</id>
    <content type="html"><![CDATA[<p>Javaでの開発において、ライブラリのバージョン管理にMavenを用いているところはたくさんあると思います。</p>

<p>しかし、pom.xmlを使って各ライブラリのバージョンを管理していても、各開発者が使うMavenのバージョンを固定することはできません。</p>

<p>プロジェクトで使うMavenのバージョンを固定したい！そんな場合に使えるのがMaven Wrapperです。</p>

<ul>
<li>takari/maven-wrapper -　<a href="https://github.com/takari/maven-wrapper">https://github.com/takari/maven-wrapper</a></li>
</ul>


<h2>導入方法</h2>

<p>導入方法は至って簡単。</p>

<p>maven wrapperを適用したいプロジェクトに移動して、以下のコマンドを発行するだけ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn -N io.takari:maven:wrapper
</span></code></pre></td></tr></table></div></figure>


<p>これだけで、プロジェクトに以下のファイルが追加されます。</p>

<ul>
<li>mvnw - Maven Wrapper経由でmavenを実行するためのファイル</li>
<li>mvnw.cmd - mvnwのWindows版。Windowsで使う場合はこっちを使いましょう。</li>
<li>.mvnディレクトリ - maven wraperがダウンロードしてきたMavenのバイナリとかが入ってる</li>
</ul>


<p>上記のコマンドだと実行時の最新のバージョンが使用されるので、バージョンを指定したい場合はオプションで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn -N io.takari:maven:wrapper -Dmaven<span class="o">=</span>3.3.1
</span></code></pre></td></tr></table></div></figure>


<p>としてやりましょう。以降は今まで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn clean
</span><span class='line'>mvn package
</span></code></pre></td></tr></table></div></figure>


<p>としていたのをmvnwコマンドに置き換えるだけで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./mvnw clean
</span><span class='line'>./mvnw package
</span></code></pre></td></tr></table></div></figure>


<p>固定されたバージョンをMavenを利用することができます。</p>

<h1>.gitignoreの設定</h1>

<p>~~ Gitなどのバージョン管理にはmvnwとmvnw.cmdのみコミット対象とし、<strong>.mvnディレクトリはコミット対象外</strong>にしましょう。 ~~</p>

<p>はい、これウソでしたorz</p>

<p>正しくは「.mvnディレクトリもコミットしましょう」です。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">YOSHIDAさん慣れないジャバやるから</p>&mdash; やっぱりおいしい木村屋のパン (@razon) <a href="https://twitter.com/razon/status/734898775873884160">2016年5月24日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>はい、その通りですね（真顔</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Past, Present and Future]]></title>
    <link href="http://zephiransas.github.io/blog/2015/12/24/past-present-and-future/"/>
    <updated>2015-12-24T00:00:00+09:00</updated>
    <id>http://zephiransas.github.io/blog/2015/12/24/past-present-and-future</id>
    <content type="html"><![CDATA[<p>これは<a href="http://luna3.heteml.jp/etc/entry-12.html">大都会アドベントカレンダー</a>24日目の記事です。</p>

<p>昨日は<a href="https://twitter.com/yantona">@yantonaさん</a>の<a href="http://luna3.heteml.jp/etc/entry-12.html">君は「玉野音頭」を知っているか</a>でした。</p>

<p>不覚にも自分は知りませんでした・・・瀬戸大橋音頭なら・・・！</p>

<p>実は今年の大都会アドベントカレンダー、12日目のきよくらさんが自分とIT勉強会とのかかわり合いについて書かれていて、これにインスパイアされたので、便乗して自分が岡山のIT勉強会に関わって、岡山Javaユーザ会を開催するようになるまでを、まとめてみようと思います。</p>

<h1>岡山でJavaの勉強会をスタートするまで</h1>

<h2>2010年</h2>

<p>2010年、当時自分は岡山にある小さなSIerで仕事をしていました。当時やっていたのは主にJavaを使ってのWeb開発で、Apache,Seasarなどのオープンソースソフトウェアを好んで使っていました。小さな会社だったこともあり、新しい技術の導入には比較的寛容な環境だったかもしれません。</p>

<p>そんなとき、ネットで偶然見かけたのがオープンラボ岡山でした。勉強会についてはほとんど知らなかったし、それほど興味も無かったのですが、偶然Seasarの作者であるひがやすおさんが、岡山に来られるということだけで参加しに行きました。</p>

<ul>
<li>第15回オープンラボ岡山 - <a href="http://openlab.okaya.ma/wiki.cgi?page=%CA%D9%B6%AF%B2%F1%2F%C2%E8015%B2%F3">http://openlab.okaya.ma/wiki.cgi?page=%CA%D9%B6%AF%B2%F1%2F%C2%E8015%B2%F3</a></li>
</ul>


<p>この時にはSeasarの開発も一時期よりは落ち着いてきて、ひがさん自身も「これからはクラウドだ！GAEだ！Slim3だ！」と、Slim3についての話をされていたことを覚えています。</p>

<p>同時に年末だったこともあり、忘年会議も開催されていますが、これには参加してませんでした・・・</p>

<p>思えば、ここが最初のスタートです。</p>

<h2>2011年</h2>

<p>去年参加したオープンラボをキッカケに、2011年からは勉強会にも積極的に参加するようになりました。</p>

<p>このころはオープンラボ岡山は月に1度のペースで開催されていましたので、ほぼ毎月参加していたように思います。そしてそのなかで、いろいろな人から、技術に関する話を聞くうちに、勉強会に参加する面白さを感じることができるようになったと思います。</p>

<p>当時は勉強会に登壇する人全てが、雲の上の人のように感じていましたね。</p>

<p>それと同時に「人の話を聞いてるだけじゃなく、自分も話せるようになって、みんなに喜んで欲しい」という気持ちも同時に芽生え始めたように思います。</p>

<p>そして転機は第19回オープンラボ岡山のときです。</p>

<ul>
<li>第19回オープンラボ岡山 - <a href="http://openlab.okaya.ma/wiki.cgi?page=%CA%D9%B6%AF%B2%F1%2F%C2%E8019%B2%F3">http://openlab.okaya.ma/wiki.cgi?page=%CA%D9%B6%AF%B2%F1%2F%C2%E8019%B2%F3</a></li>
</ul>


<p>この回はJava特集ということで、当時は日本オラクル所属だった寺田佳央さんと、RedHatの木村貴由さんのお二人からJavaについての話を聞きました。そこで寺田さんはGlassFishの話をされたのですが、これが個人的に一番興味をそそられたので、その後も個人的にいろいろ調べ、以下のブログを書きました。</p>

<ul>
<li>Glassfish 3.1の自己増殖クラスタを試す - <a href="http://d.hatena.ne.jp/zephiransas/20110707/1310027466">http://d.hatena.ne.jp/zephiransas/20110707/1310027466</a></li>
</ul>


<p>このエントリを書いたことをキッカケに、オープンラボ岡山の常連であり、隣国？である福山で「オープンラボ備後」を主催されていた、Yさんから「GlassFishの話してみない？」という依頼がありました。そして第10回オープンラボ備後で初登壇することになります。</p>

<ul>
<li>第10回オープンラボ備後 - <a href="https://sites.google.com/site/openlabbingo/home/di10huiopunrabo-bei-hou">https://sites.google.com/site/openlabbingo/home/di10huiopunrabo-bei-hou</a></li>
</ul>


<p>図らずも「いつか自分も発表できるようになりたい」と思っていたことが、たった1つのブログエントリから1年たたずに実現したわけです。しかしこれは運とかではなく、岡山周辺のIT勉強会コミュニティに、いろいろな人を登壇させていこうという風土のようなものが、ちゃんと根付いていたことの現れではないかと思っています。</p>

<p>そしてこの登壇あと、主催のYさんが唐突に「吉田さん、岡山でJavaのコミュニティやってくれない？」という話がありました。</p>

<p>聞けば、以前、岡山にはJavaのコミュニティがあったのですが、主催の方の転勤とともに開店休業状態にあるということ。そこで、自分にコミュニティの主催をやってみないか？ということでした。</p>

<p>今回が初登壇だった自分にいきなりそんなこと・・・とは、正直思いましたが、オープンラボ備後のYさんの勧めや、オープンラボ岡山の主催Hさんからもサポートしていただける、とのことだったので、岡山でJavaのコミュニティを始めることにしました。</p>

<p>幸いにも、自分ひとりでのスタートではなく、いつもScalaや関数型の話でみなをﾎﾟｶﾝとさせる<a href="https://twitter.com/razon">@razonさん</a>や、Twitterの裏垢で下ネタをつぶやいてばかりの<a href="https://twitter.com/ryosms">@ryosmsさん</a>、そして唯一？の常識人の<a href="https://twitter.com/o310yusuke">@o310yusukeさん</a>、などのこころ強い（？）メンバーの助けを借りつつ、岡山Javaユーザ会をスタートさせることになります。</p>

<p>その他にも助けて頂いた方はたくさんいますが、誰一人欠けても今までコミュニティを継続させることはできなかったと思います。</p>

<p>この場を借りて、関わった全ての皆様に深く感謝したいと思います。</p>

<h1>あなたはエンジニアの仕事、好きですか？</h1>

<p>ところで、あなたはエンジニアの仕事、好きですか？</p>

<p>エンジニアでない人、今の仕事好きですか？</p>

<p>私はエンジニアの仕事が大好きです。</p>

<p>自分はプログラマを目指して大学に入ったものの挫折し、その後のフリーター生活を経て、24歳の時に故郷に戻って運良くプログラマとして就職することができました。それから約16年。何事にも中途半端だった自分が、こうやって一つの仕事を続けてこられたのは、ひとえに「この仕事が好き」だからです。</p>

<p>だからこそ、このエンジニアという仕事を選んだ人たちが、楽しく仕事ができるようになればいいと思い、いままで岡山のIT勉強会コミュニティに関わってきました。</p>

<p>そしてその想いは、今でもかわることはありません。これからも岡山のIT勉強会コミュニティを影となって支えて参ります。</p>

<h1>the Future</h1>

<p>そしてもう一つ。来年に新しいことをスタートしようと考えています。</p>

<p>それが子供向けプログラミング教室です。</p>

<p>自分がはじめてプログラミングをしたのは、小学校の時に触れたファミリーベーシックでした。そこで説明書のプログラム通りに、右手の人差し指1本で、おぼつかない手でコードを書き、エラーを直し、実行し、そして画面でマリオが動いた時のあの感動。</p>

<p>この教室を通じて、自分が幼いときに感じた「自分で考え、自分で作って、動かす」そんな感動を子供たちに感じてもらい「プログラミングって楽しい！」と感じてくれる子供が一人でも増えてくれれば、これに勝る喜びはありません。</p>

<p>あくまでボランティアベースの教室になるので、塾のように授業料をもらうこともないです。なので成果を保証することもしません。子供たちがやりたいことを最優先に。やりたいことが見つからなければ、見つける手伝いから。</p>

<p>そして子供たちが「楽しかった、また来たい！」と思えるように。そんな空間を作れたらいいなと思っています。</p>

<p>既存のIT勉強会のコミュニティは、現役のエンジニアたちを支え、子供向けプログラミング教室が、未来のエンジニアを支える。</p>

<p>そしてこの両輪を回すことを、今後の自分の仕事として続けていけたら、と思っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[合同勉強会でCrystalの話をしてきた]]></title>
    <link href="http://zephiransas.github.io/blog/2015/12/09/talk-about-crystal-on-gbdaitokai/"/>
    <updated>2015-12-09T17:24:39+09:00</updated>
    <id>http://zephiransas.github.io/blog/2015/12/09/talk-about-crystal-on-gbdaitokai</id>
    <content type="html"><![CDATA[<p>これは<a href="http://www.adventar.org/calendars/800">Crystalアドベントカレンダー2015</a>の12/9のエントリです。</p>

<p>昨日は<a href="https://twitter.com/pine613">pine613</a>さんの<a href="https://gist.github.com/pine613/0e07a92660666508fc72">「Crystal-JP の活動紹介と、今後の活動について」</a>でした。</p>

<p>12/5に岡山県立大学にて行われた、<a href="https://gbdaitokai.doorkeeper.jp/events/31149">合同勉強会 in 大都会岡山 -2015 Winter-</a>にて、Crystalの紹介のセッションを行いました。</p>

<p>スライドはこちら。</p>

<script async class="speakerdeck-embed" data-id="964ceffc800542a8ae57ba44ca3c4d82" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>主に伝えたかった内容としては</p>

<ul>
<li>CrystalはRubyistには簡単に使えます</li>
<li>Crystalは型があります</li>
<li>コンパイルして高速に実行できます</li>
</ul>


<p>といった3点を主題としました。</p>

<p>時間配分がいい感じだったので、実際にRubyでの実行速度と、Crystalでの実行速度の違いをデモすることができたのは、良かったのではないでしょうか。</p>

<p>途中うっかり「Rubyには型がないので云々」といったおかげで、現場の型警察のみなさんに</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">型警察が登壇者を見守っています <a href="https://twitter.com/hashtag/gbdaitokai?src=hash">#gbdaitokai</a></p>&mdash; 人マン (@razon) <a href="https://twitter.com/razon/status/672989595659710464">2015, 12月 5</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">「Rubyには型がないんですね」&#10;「「「いやあるあるあるある！」」」&#10;<a href="https://twitter.com/hashtag/gbdaitokai?src=hash">#gbdaitokai</a> <a href="https://twitter.com/hashtag/%E3%81%8A%E3%81%8B%E3%82%84%E3%81%BE%E3%81%93%E3%82%8F%E3%81%84?src=hash">#おかやまこわい</a></p>&mdash; mzsm@3日目東シ58a(てくぶ) (@mzsm_j) <a href="https://twitter.com/mzsm_j/status/672989634536673280">2015, 12月 5</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>となったのは迂闊でしたw</p>

<p>岡山の大きな勉強会で使う懇親会場に「座・スタジアム」というちょっと珍しい会場があります。</p>

<p><img src="http://zephiransas.github.io/images/20151209/gbdaitokai.jpg" alt="screen" /></p>

<p>ここでLTしたいがために、東京、大阪からやってくる人もいるくらい、懇親会に最適な会場です。次はオープンセミナー岡山2016という勉強会がありますので、ぜひ県外の皆様にもお越しいただきたいですね。</p>

<ul>
<li>Togetter - <a href="http://togetter.com/li/908723">合同勉強会 in 大都会岡山 -2015 Winter- &amp; 忘年会議2015 まとめ #gbdaitokai #忘年会議</a></li>
<li>flickr - <a href="https://www.flickr.com/photos/zephiransas/albums/72157659745544384">合同勉強会 in 大都会岡山 -2015 Winter-</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CrystalをHerokuで動かしてみた]]></title>
    <link href="http://zephiransas.github.io/blog/2015/11/10/crystal-on-heroku/"/>
    <updated>2015-11-10T12:28:48+09:00</updated>
    <id>http://zephiransas.github.io/blog/2015/11/10/crystal-on-heroku</id>
    <content type="html"><![CDATA[<p>最近ちょっと話題のcrystal。これをHerokuで動かしてみました。</p>

<h2>Herokuの準備</h2>

<p>まずはHerokuにアプリケーションを作成します。</p>

<p>Herokuでは当然crystalをサポートしていませんので、crystalのコンパイラを自前でインストールする必要があります。
Herokuにはこういったことを実現するために、buildpackという仕組みが用意されています。</p>

<p>crystal用のbuildpackは既にあるので、今回はこれを利用します。</p>

<ul>
<li>zamith/heroku-buildpack-crystal - <a href="https://github.com/zamith/heroku-buildpack-crystal">https://github.com/zamith/heroku-buildpack-crystal</a></li>
</ul>


<p>heroku createする際に上記のbuildpackを指定しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku create --buildpack https://github.com/zamith/heroku-buildpack-crystal
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、これはあとから指定することも可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku
</span></code></pre></td></tr></table></div></figure>


<h2>アプリケーションの準備</h2>

<p>次にcrystalで簡単なWebサーバを実装します。といっても<a href="http://crystal-lang.org/">crystalの公式ページ</a>にあるサンプルに手を加えた簡単なものです。</p>

<p>app.crというファイル名で以下のファイルを準備します。</p>

<figure class='code'><figcaption><span>app.cr</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;http/server&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;option_parser&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">server_port</span> <span class="o">=</span> <span class="mi">8080</span>
</span><span class='line'><span class="no">OptionParser</span><span class="o">.</span><span class="n">parse!</span> <span class="k">do</span> <span class="o">|</span><span class="n">opts</span><span class="o">|</span>
</span><span class='line'>  <span class="n">opts</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;-p PORT&quot;</span><span class="p">,</span> <span class="s2">&quot;--port PORT&quot;</span><span class="p">,</span> <span class="s2">&quot;define port to run server&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">port</span><span class="o">|</span>
</span><span class='line'>    <span class="n">server_port</span> <span class="o">=</span> <span class="n">port</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="o">=</span> <span class="ss">HTTP</span><span class="p">:</span><span class="ss">:Server</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;0.0.0.0&quot;</span><span class="p">,</span> <span class="n">server_port</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">request</span><span class="o">|</span>
</span><span class='line'>  <span class="ss">HTTP</span><span class="p">:</span><span class="ss">:Response</span><span class="o">.</span><span class="n">ok</span> <span class="s2">&quot;text/plain&quot;</span><span class="p">,</span> <span class="s2">&quot;Hello world, got </span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Listening on http://0.0.0.0:</span><span class="si">#{</span><span class="n">server_port</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="n">listen</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意するところは2点。</p>

<p>1点目は、option_parserを使って起動時のオプションでWebサーバのポート番号を指定できるようにしています。デフォルトでは8080ポートで起動します。</p>

<p>Herokuの場合、サーバのポートは$PORTの値を使用しなければいけませんので、起動時にその値を渡せるようにするためです。</p>

<p>2点目は、以下のようにServerのインスタンス生成時に"0.0.0.0"を指定することです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">server</span> <span class="o">=</span> <span class="ss">HTTP</span><span class="p">:</span><span class="ss">:Server</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;0.0.0.0&quot;</span><span class="p">,</span> <span class="n">server_port</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">request</span><span class="o">|</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうすることで、localhost以外からでもアクセス可能にしてあります。これを指定していない場合は、Herokuでの起動時に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Error R10 <span class="o">(</span>Boot timeout<span class="o">)</span> -&gt; Web process failed to <span class="nb">bind </span>to <span class="nv">$PORT</span> within 60 seconds of launch
</span></code></pre></td></tr></table></div></figure>


<p>というエラーが発生します。</p>

<p>できたら早速、起動してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>crystal run app.cr
</span></code></pre></td></tr></table></div></figure>


<p>ブラウザからlocalhost:8080にアクセスし、以下の用に表示されれば、Webサーバが正しく起動しています。</p>

<p><img src="http://zephiransas.github.io/images/20151110/screen.png" alt="screen" /></p>

<h2>その他のファイルの準備</h2>

<p>次にProcfileを以下のように準備します。</p>

<figure class='code'><figcaption><span>Procfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>web: ./app -p <span class="nv">$PORT</span>
</span></code></pre></td></tr></table></div></figure>


<p>起動時に$PORTをWebサーバのポートとして、指定しています。</p>

<p>次にProjectfileを準備します。中身は空でOKです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>touch Projectfile
</span></code></pre></td></tr></table></div></figure>


<p>これは本来は不要なファイルなのですが、crystalのbuildpack内でProjectfileがない場合は、crystalのアプリケーションとして認識してくれないため、空のファイルを作成しています。</p>

<h2>Herokuへデプロイ</h2>

<p>app.cr、Procfile、Projectfileの3つが準備できたら、Herokuにデプロイしてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;First commit&#39;</span>
</span><span class='line'>heroku git:remote --app <span class="o">[</span>APPNAME<span class="o">]</span>
</span><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<p>あとは、Herokuにアクセスして、正しく動作していればOKです。</p>

<h2>まとめ</h2>

<p>今回作成したコードはこちらにおいてありますので、参考にしてください。</p>

<p><a href="https://github.com/zephiransas/crystal-heroku">https://github.com/zephiransas/crystal-heroku</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicorn-worker-killerが便利だった件]]></title>
    <link href="http://zephiransas.github.io/blog/2015/07/29/unicorn-worker-killer/"/>
    <updated>2015-07-29T15:57:26+09:00</updated>
    <id>http://zephiransas.github.io/blog/2015/07/29/unicorn-worker-killer</id>
    <content type="html"><![CDATA[<p>自分が現在関わっているプロジェクトでは、nginx + unicornの構成で運用しているのですが、この構成でサーバのメモリが足りなくなるという現象に悩まされていました。</p>

<p>unicornのワーカプロセスは、通常では起動したままユーザからのリクエストを処理し、再起動されることはありません。
その関係で、長時間運用していると、そのワーカプロセスがメモリをあるだけ食いつぶすような挙動になります。</p>

<p>こんな時に便利なのが「<a href="https://github.com/kzk/unicorn-worker-killer">unicorn-worker-killer</a>」です。</p>

<p>unicorn-worker-killerを使うことで、ワーカプロセスが以下の条件の場合に、自動的に再起動してくれます。</p>

<ul>
<li>ワーカプロセスが指定回数のリクエストを処理した場合</li>
<li>ワーカプロセスが指定量のメモリを使用している場合</li>
</ul>


<p>いずれの場合でもワーカプロセスの再起動は、現在のリクエストを処理した後に再起動（いわゆるgraceful restart）されます。</p>

<h2>設定のしかた</h2>

<p>設定はconfig.ruにて行います。</p>

<h3>リクエストの回数基準で再起動する</h3>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="ss">Unicorn</span><span class="p">:</span><span class="ss">:WorkerKiller</span><span class="o">::</span><span class="no">MaxRequests</span><span class="p">,</span> <span class="mi">3072</span><span class="p">,</span> <span class="mi">4096</span>
</span></code></pre></td></tr></table></div></figure>


<p>これはワーカプロセスが、3072回~4096回のいずれかの回数リクエストを処理したら再起動する設定です。</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="ss">Unicorn</span><span class="p">:</span><span class="ss">:WorkerKiller</span><span class="o">::</span><span class="no">MaxRequests</span><span class="p">,</span> <span class="mi">3072</span><span class="p">,</span> <span class="mi">4096</span><span class="p">,</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすることで、unicorn.rbのstderr_pathで指定されたパスに状況を出力することができます。</p>

<h3>メモリの使用量を基準に再起動する</h3>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="ss">Unicorn</span><span class="p">:</span><span class="ss">:WorkerKiller</span><span class="o">::</span><span class="no">Oom</span><span class="p">,</span> <span class="p">(</span><span class="mi">192</span><span class="o">*</span><span class="p">(</span><span class="mi">1024</span><span class="o">**</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">256</span><span class="o">*</span><span class="p">(</span><span class="mi">1024</span><span class="o">**</span><span class="mi">2</span><span class="p">)),</span> <span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>これはワーカプロセスが16回リクエストを処理する度に、自身のメモリ使用量をチェックし、これが192M~256Mのいずれかの使用量をオーバーしていた場合に、再起動する設定です。</p>

<h3>設定が2つある理由</h3>

<p>リクエスト回数とメモリ使用量の設定両方とも、しきい値を範囲で指定するようになっていますが、これには理由があります。</p>

<p>1つのしきい値だと、各ワーカが再起動するタイミングが、ほぼ同じになるからです。同じタイミングで全てのワーカプロセスが再起動してしまうと、その間リクエストを処理することができなくなってしまうので、これは好ましくありません。</p>

<p>ですので、しきい値を範囲で指定し、その範囲内のいずれかの値を実際のしきい値として採用するという仕組みになっています。</p>

<p>なので、しきい値の範囲は狭いより、広いほうが、ベターです。</p>

<h2>unicorn-worker-killerを試してみる</h2>

<p>では、unicorn-worker-killerがちゃんとワーカプロセスをKillできているかを確認してみます。</p>

<p>シナリオとしては</p>

<ul>
<li>config/unicorn.rbのworker_processesは1として、ワーカプロセスは1つだけにする</li>
<li>unicorn-worker-killerの設定は100回〜120回のリクエストを受けたタイミングで、ワーカプロセスを再起動するようにする</li>
</ul>


<p>まずはGemfileに</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn-worker-killer&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>と設定します。config.ruの設定は、以下のようになります。</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="ss">Unicorn</span><span class="p">:</span><span class="ss">:WorkerKiller</span><span class="o">::</span><span class="no">MaxRequests</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>unicorn-worker-killerの詳細なログを出力するように設定しておきます。</p>

<p>この設定でunicornを起動します。すると以下ような感じでログが出力されます。</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">38</span><span class="p">:</span><span class="mi">31</span><span class="o">.</span><span class="mi">589102</span> <span class="c1">#29745]  INFO -- : worker=0 spawning...</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">38</span><span class="p">:</span><span class="mi">31</span><span class="o">.</span><span class="mi">591242</span> <span class="c1">#29745]  INFO -- : master process ready</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">38</span><span class="p">:</span><span class="mi">31</span><span class="o">.</span><span class="mi">593001</span> <span class="c1">#29752]  INFO -- : worker=0 spawned pid=29752</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">38</span><span class="p">:</span><span class="mi">31</span><span class="o">.</span><span class="mi">593581</span> <span class="c1">#29752]  INFO -- : Refreshing Gem list</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">38</span><span class="p">:</span><span class="mi">47</span><span class="o">.</span><span class="mo">035570</span> <span class="c1">#29752]  INFO -- : worker=0 ready</span>
</span></code></pre></td></tr></table></div></figure>


<p>pid=29752でワーカプロセスが1つ立ち上がりました。psで確認すると</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">zephiransas</span> <span class="mi">29752</span> <span class="mi">30</span><span class="o">.</span><span class="mi">0</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">8</span> <span class="mi">544708</span> <span class="mi">235984</span> <span class="o">?</span>       <span class="no">Sl</span>   <span class="mi">16</span><span class="p">:</span><span class="mi">38</span>   <span class="mi">0</span><span class="p">:</span><span class="mi">15</span> <span class="n">unicorn</span> <span class="n">worker</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span><span class="n">c</span> <span class="n">config</span><span class="o">/</span><span class="n">unicorn</span><span class="o">.</span><span class="n">rb</span> <span class="o">-</span><span class="n">E</span> <span class="n">production</span> <span class="o">-</span><span class="n">D</span>
</span></code></pre></td></tr></table></div></figure>


<p>のような感じです。ここでブラウザから何度かアクセスすると、unicornのログに以下のように出力されます。</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">40</span><span class="p">:</span><span class="mi">37</span><span class="o">.</span><span class="mi">156111</span> <span class="c1">#29752]  INFO -- : #&lt;Unicorn::HttpServer:0x0000000343fa00&gt;: worker (pid: 29752) has 119 left before being killed</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">40</span><span class="p">:</span><span class="mi">37</span><span class="o">.</span><span class="mi">349161</span> <span class="c1">#29752]  INFO -- : #&lt;Unicorn::HttpServer:0x0000000343fa00&gt;: worker (pid: 29752) has 118 left before being killed</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">40</span><span class="p">:</span><span class="mi">37</span><span class="o">.</span><span class="mi">559274</span> <span class="c1">#29752]  INFO -- : #&lt;Unicorn::HttpServer:0x0000000343fa00&gt;: worker (pid: 29752) has 117 left before being killed</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">40</span><span class="p">:</span><span class="mi">37</span><span class="o">.</span><span class="mi">649334</span> <span class="c1">#29752]  INFO -- : #&lt;Unicorn::HttpServer:0x0000000343fa00&gt;: worker (pid: 29752) has 116 left before being killed</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">40</span><span class="p">:</span><span class="mi">47</span><span class="o">.</span><span class="mi">690545</span> <span class="c1">#29752]  INFO -- : #&lt;Unicorn::HttpServer:0x0000000343fa00&gt;: worker (pid: 29752) has 115 left before being killed</span>
</span></code></pre></td></tr></table></div></figure>


<p>pid=29752のワーカプロセスがあと何回リクエストを処理できるかが分かります。またリクエストするたびに1つづつ減っています。</p>

<p>では、引き続きブラウザからアクセスし、ワーカプロセスのメモリ使用状況を確認してみましょう。</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">zephiransas</span> <span class="mi">29752</span>  <span class="mi">7</span><span class="o">.</span><span class="mi">1</span>  <span class="mi">3</span><span class="o">.</span><span class="mi">2</span> <span class="mi">785940</span> <span class="mi">269420</span> <span class="o">?</span>       <span class="no">Sl</span>   <span class="mi">16</span><span class="p">:</span><span class="mi">38</span>   <span class="mi">0</span><span class="p">:</span><span class="mi">26</span> <span class="n">unicorn</span> <span class="n">worker</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span><span class="n">c</span> <span class="n">config</span><span class="o">/</span><span class="n">unicorn</span><span class="o">.</span><span class="n">rb</span> <span class="o">-</span><span class="n">E</span> <span class="n">production</span> <span class="o">-</span><span class="n">D</span>
</span></code></pre></td></tr></table></div></figure>


<p>メモリ使用量が少し増えているのがわかります。次にリクエストの残り回数を使い切り、ワーカプロセスが正しく再起動されるか確認します。</p>

<p>ブラウザからリクエストを投げ続けると、unicornのログに以下のように出力されます。</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">W</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">47</span><span class="p">:</span><span class="mo">00</span><span class="o">.</span><span class="mi">539055</span> <span class="c1">#29752]  WARN -- : #&lt;Unicorn::HttpServer:0x0000000343fa00&gt;: worker (pid: 29752) exceeds max number of requests (limit: 119)</span>
</span><span class='line'><span class="n">W</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">47</span><span class="p">:</span><span class="mo">00</span><span class="o">.</span><span class="mi">539621</span> <span class="c1">#29752]  WARN -- : Unicorn::WorkerKiller send SIGQUIT (pid: 29752) alive: 383 sec (trial 1)</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">47</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">467363</span> <span class="c1">#29745]  INFO -- : reaped #&lt;Process::Status: pid 29752 exit 0&gt; worker=0</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">47</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">467928</span> <span class="c1">#29745]  INFO -- : worker=0 spawning...</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">47</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">472507</span> <span class="c1">#7549]  INFO -- : worker=0 spawned pid=7549</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">47</span><span class="p">:</span><span class="mo">03</span><span class="o">.</span><span class="mi">473377</span> <span class="c1">#7549]  INFO -- : Refreshing Gem list</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">47</span><span class="p">:</span><span class="mi">19</span><span class="o">.</span><span class="mi">137831</span> <span class="c1">#7549]  INFO -- : worker=0 ready</span>
</span><span class='line'><span class="n">I</span><span class="p">,</span> <span class="o">[</span><span class="mi">2015</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">29</span><span class="ss">T16</span><span class="p">:</span><span class="mi">47</span><span class="p">:</span><span class="mi">20</span><span class="o">.</span><span class="mi">251309</span> <span class="c1">#7549]  INFO -- : #&lt;Unicorn::HttpServer:0x0000000343fa00&gt;: worker (pid: 7549) has 101 left before being killed</span>
</span></code></pre></td></tr></table></div></figure>


<p>1行目でpid=29752がリクエスト回数上限の119回に達したことがわかります。</p>

<p>2行目ワーカプロセスに対してQUITシグナルを送信しています。</p>

<p>その後、別のワーカプロセスがpid=7549で起動しています。試しにpid=7549のメモリ使用量を見ると</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">zephiransas</span>  <span class="mi">7549</span>  <span class="mi">5</span><span class="o">.</span><span class="mi">7</span>  <span class="mi">3</span><span class="o">.</span><span class="mi">1</span> <span class="mi">705752</span> <span class="mi">261532</span> <span class="o">?</span>       <span class="no">Sl</span>   <span class="mi">16</span><span class="p">:</span><span class="mi">47</span>   <span class="mi">0</span><span class="p">:</span><span class="mi">18</span> <span class="n">unicorn</span> <span class="n">worker</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span><span class="n">c</span> <span class="n">config</span><span class="o">/</span><span class="n">unicorn</span><span class="o">.</span><span class="n">rb</span> <span class="o">-</span><span class="n">E</span> <span class="n">production</span> <span class="o">-</span><span class="n">D</span>
</span></code></pre></td></tr></table></div></figure>


<p>となり、以前より減っていることがわかります。</p>

<p>Railsアプリを実運用するときには必須のgemだと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[論理削除とeager_loadでN+1問題が発生する件]]></title>
    <link href="http://zephiransas.github.io/blog/2015/07/08/eager-load-with-paranoia/"/>
    <updated>2015-07-08T09:53:55+09:00</updated>
    <id>http://zephiransas.github.io/blog/2015/07/08/eager-load-with-paranoia</id>
    <content type="html"><![CDATA[<p>Railsアプリにて論理削除とeager_loadを合わせて使うとN+1問題が発生することに気づいたのでメモ。</p>

<h2>N+1問題を確認する</h2>

<p>まずはN+1問題が起きるようなモデルを作成します。よくあるブログアプリのような、ブログのエントリがあり、それにコメントが複数あるパターンです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:title</span><span class="p">,</span>
</span><span class='line'>                  <span class="ss">:content</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:post_id</span><span class="p">,</span>
</span><span class='line'>                  <span class="ss">:name</span><span class="p">,</span>
</span><span class='line'>                  <span class="ss">:content</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:post</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>適当なデータを入れた後、これに対してrails cで以下のようにレコードを取得します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、以下のようなSQLが発行されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;posts&quot;</span>
</span><span class='line'><span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;comments&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="mi">12</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="err">ユーザ</span><span class="mi">1</span>
</span><span class='line'><span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;comments&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="mi">13</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="err">ユーザ</span><span class="mi">1</span>
</span><span class='line'><span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;comments&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="mi">14</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="err">ユーザ</span><span class="mi">1</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="err">（以下続く</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合は、<strong>対象となったPostの件数分、CommentsテーブルへのSQLが発行されることになります。</strong> これがN+1問題です。</p>

<h2>N+1問題に対処する</h2>

<p>これを解決するには、eager_loadを使うことが一般的です。つまり</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">eager_load</span><span class="p">(</span><span class="ss">:comments</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合のSQLは（一部簡略化しています）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">*</span><span class="p">,</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span>
</span><span class='line'><span class="no">FROM</span> <span class="s2">&quot;posts&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;comments&quot;</span> <span class="no">ON</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。Postsテーブルと一緒にCommentsテーブルを取得しているので、SQLが1回だけ発行されていることがわかります。</p>

<p>美しい理想の世界です。ﾊﾗｼｮｰ</p>

<h2>paranoiaを導入する</h2>

<p>さて本題。ここで<strong>うっかり論理削除を導入</strong>してみましょう。</p>

<p>Railsには論理削除に関するgemは多数ありますが、現在のデファクトスタンダードは<a href="https://github.com/radar/paranoia">paranoia</a>だと思います。まずはparanoiaをGemfileに記述します。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;paranoia&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0&#39;</span>  <span class="c1"># Rails3系には1.0系を使用</span>
</span></code></pre></td></tr></table></div></figure>


<p>その後、モデルを以下のように変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">acts_as_paranoid</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:title</span><span class="p">,</span>
</span><span class='line'>                  <span class="ss">:content</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">acts_as_paranoid</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:post_id</span><span class="p">,</span>
</span><span class='line'>                  <span class="ss">:name</span><span class="p">,</span>
</span><span class='line'>                  <span class="ss">:content</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:post</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>その後、eager_loadしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">eager_load</span><span class="p">(</span><span class="ss">:comments</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>するとSQLは以下の様に発行されます。（一部簡略化しています）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">*</span><span class="p">,</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span>
</span><span class='line'><span class="no">FROM</span> <span class="s2">&quot;posts&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;comments&quot;</span> <span class="no">ON</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span>
</span><span class='line'><span class="no">WHERE</span> <span class="p">(</span><span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">deleted_at</span> <span class="no">IS</span> <span class="no">NULL</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>PostsテーブルのWHERE条件にdeleted_at is nullが付与されているのは期待通りですが、Commentsテーブルには付与されていないので、これでは<strong>論理削除されたCommentsテーブルの内容</strong>も取得してしまいます・・・</p>

<p>では、以下のようにPostのcommentsにconditionsを付与するのはどうでしょう？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">acts_as_paranoid</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:title</span><span class="p">,</span>
</span><span class='line'>                  <span class="ss">:content</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">conditions</span><span class="p">:</span> <span class="s1">&#39;comments.deleted_at is null&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで同様にeager_loadするとSQLは以下の様に発行されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">*</span><span class="p">,</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span>
</span><span class='line'><span class="no">FROM</span> <span class="s2">&quot;posts&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;comments&quot;</span> <span class="no">ON</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">AND</span> <span class="n">comments</span><span class="o">.</span><span class="n">deleted_at</span> <span class="n">is</span> <span class="n">null</span>
</span><span class='line'><span class="no">WHERE</span> <span class="p">(</span><span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">deleted_at</span> <span class="no">IS</span> <span class="no">NULL</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>WHERE条件が追加されて、なんだか、いい感じにeager_loadできました。</p>

<h2>論理削除したデータも取得したい場合</h2>

<p>さて、ここで少々頭がおかしくなって「削除したCommentも取りたい(^q^)」という気分になったとしましょう。</p>

<p>そこでPostクラスにcomments_with_deletedなるアソシエーションを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">acts_as_paranoid</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:title</span><span class="p">,</span>
</span><span class='line'>                  <span class="ss">:content</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">conditions</span><span class="p">:</span> <span class="s1">&#39;comments.deleted_at is null&#39;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments_with_deleted</span><span class="p">,</span>
</span><span class='line'>           <span class="n">class_name</span><span class="p">:</span> <span class="s1">&#39;Comment&#39;</span><span class="p">,</span>
</span><span class='line'>           <span class="n">foreign_key</span><span class="p">:</span> <span class="ss">:post_id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、これを使ってeager_loadしてみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">eager_load</span><span class="p">(</span><span class="ss">:comments_with_deleted</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、以下のようなSQLが発行されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">*</span><span class="p">,</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;posts&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span> <span class="s2">&quot;comments&quot;</span> <span class="no">ON</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">deleted_at</span> <span class="no">IS</span> <span class="no">NULL</span><span class="p">)</span>
</span><span class='line'><span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;comments&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="mi">12</span> <span class="no">AND</span> <span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">deleted_at</span> <span class="no">IS</span> <span class="no">NULL</span><span class="p">)</span> <span class="no">AND</span> <span class="p">(</span><span class="n">comments</span><span class="o">.</span><span class="n">deleted_at</span> <span class="n">is</span> <span class="n">null</span><span class="p">)</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="err">ユーザ</span><span class="mi">2</span>
</span><span class='line'><span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;comments&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="mi">13</span> <span class="no">AND</span> <span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">deleted_at</span> <span class="no">IS</span> <span class="no">NULL</span><span class="p">)</span> <span class="no">AND</span> <span class="p">(</span><span class="n">comments</span><span class="o">.</span><span class="n">deleted_at</span> <span class="n">is</span> <span class="n">null</span><span class="p">)</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="err">ユーザ</span><span class="mi">1</span>
</span><span class='line'><span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;comments&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="mi">14</span> <span class="no">AND</span> <span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">deleted_at</span> <span class="no">IS</span> <span class="no">NULL</span><span class="p">)</span> <span class="no">AND</span> <span class="p">(</span><span class="n">comments</span><span class="o">.</span><span class="n">deleted_at</span> <span class="n">is</span> <span class="n">null</span><span class="p">)</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="err">ユーザ</span><span class="mi">1</span>
</span><span class='line'><span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;comments&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="mi">15</span> <span class="no">AND</span> <span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">deleted_at</span> <span class="no">IS</span> <span class="no">NULL</span><span class="p">)</span> <span class="no">AND</span> <span class="p">(</span><span class="n">comments</span><span class="o">.</span><span class="n">deleted_at</span> <span class="n">is</span> <span class="n">null</span><span class="p">)</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="err">ユーザ</span><span class="mi">1</span>
</span><span class='line'><span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;comments&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="mi">16</span> <span class="no">AND</span> <span class="p">(</span><span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">deleted_at</span> <span class="no">IS</span> <span class="no">NULL</span><span class="p">)</span> <span class="no">AND</span> <span class="p">(</span><span class="n">comments</span><span class="o">.</span><span class="n">deleted_at</span> <span class="n">is</span> <span class="n">null</span><span class="p">)</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初のSQLでは、条件にcomments.deleted_at is nullが付与されていないので、これは期待通りなのですが、<strong>その後、なぜかN+1問題が再発</strong>しています。</p>

<p><del>現在のところ、これを回避できる方法は見つけられていません。</del></p>

<ul>
<li>追記</li>
</ul>


<p>我らのひむひむセンセイから、アドバイスを頂きました。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/zephiransas">@zephiransas</a> &#10;Post.eager_load(:comments_with_deleted).each do |post|&#10; puts <a href="http://t.co/FVIFkHFf3H">http://t.co/FVIFkHFf3H</a>&#10;end&#10;的な感じじゃダメなんかね <a href="https://twitter.com/hashtag/%E3%81%A6%E3%81%8D%E3%81%A8%E3%81%86?src=hash">#てきとう</a></p>&mdash; えいる (@eielh) <a href="https://twitter.com/eielh/status/618621108854652929">2015, 7月 8</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>なるほど！やってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">eager_load</span><span class="p">(</span><span class="ss">:comments_with_deleted</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">post</span><span class="o">.</span><span class="n">comments_with_deleted</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>するとSQLは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SELECT</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span>
</span><span class='line'><span class="no">SQL</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">*</span><span class="p">,</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;posts&quot;</span> <span class="no">LEFT</span> <span class="no">OUTER</span> <span class="no">JOIN</span>
</span><span class='line'><span class="no">ON</span> <span class="s2">&quot;comments&quot;</span><span class="o">.</span><span class="s2">&quot;post_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span>
</span><span class='line'><span class="no">WHERE</span> <span class="p">(</span><span class="s2">&quot;posts&quot;</span><span class="o">.</span><span class="n">deleted_at</span> <span class="no">IS</span> <span class="no">NULL</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>となって、意図した結果になりましたとさ。</p>

<p>でもこれ、実装時に意識しながら書ける自信ないですわ・・・(´・3・`)</p>

<h2>結論</h2>

<p>結論を<a href="http://blog.oukasoft.com/OS/">社畜ちゃん</a>にまとめていただきます。</p>

<p><img src="http://zephiransas.github.io/images/20150708/summary.png" alt="summary" /></p>

<p>とは言っても論理武装が必要でしょうから、こちらも合わせてどうぞ。</p>

<ul>
<li>DELETE_FLAG を付ける前に確認したいこと。 - <a href="http://qiita.com/Jxck_/items/156d0a231c6968f2a474">http://qiita.com/Jxck_/items/156d0a231c6968f2a474</a></li>
<li>論理削除が云々について - <a href="http://mike-neck.hatenadiary.com/entry/2015/03/24/231422">http://mike-neck.hatenadiary.com/entry/2015/03/24/231422</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaプログラマがKindle50%還元セールで買っておくべきIT技術書]]></title>
    <link href="http://zephiransas.github.io/blog/2015/05/31/java-programmer-must-buy/"/>
    <updated>2015-05-31T22:29:48+09:00</updated>
    <id>http://zephiransas.github.io/blog/2015/05/31/java-programmer-must-buy</id>
    <content type="html"><![CDATA[<p>Kindle Storeでセールをやってるようです。今回は50%をポイント還元するってセールらしいです。</p>

<p>で、<a href="http://www.kinleit.link/web/post-4954#Web-2">こちら</a>を見てたらRubyやPHPはあっても、Javaがなかったので、ついカッとなってJavaプログラマ向けのオススメ技術書をチョイスしました。
セールは<strong>6/1の正午まで</strong>ですので、お早めにどーぞ。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00MIM1KFC" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>これは店頭で目次を見た程度です。わりと初心者向けな印象なので、これからJavaを勉強したい人にオススメです。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00V2WMQNE" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>いわずと知れた「パーフェクトシリーズ」のJava版。広範囲に網羅されているので、手元に置いておけば長く使えると思います。初心者でも可。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00JS1EHH4" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>これも「逆引きレシピシリーズ」のJava版。リファレンス的に使うのならコイツは鉄板。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00XTOSYIY" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>そもそもJava EEの日本語の本は少ないのですが、最新のJava EE7に対応した本。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0088L9I4W" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>1つ前のバージョンであるJava EE6の本。通称「金魚本」。Java EE6と多少古くはあるがJava EE7と全然違うというわけでもないので、未だに現役で使えるはず。内容はある程度Java EE6の仕組みを理解している人がリファレンス的に使う感じだと思います。</p>

<p>現場からは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Kullaを試す]]></title>
    <link href="http://zephiransas.github.io/blog/2015/04/16/project-kulla/"/>
    <updated>2015-04-16T12:26:30+09:00</updated>
    <id>http://zephiransas.github.io/blog/2015/04/16/project-kulla</id>
    <content type="html"><![CDATA[<p>以前から気になっていたJavaのREPL、Project Kullaを動かしてみました。</p>

<p>REPLとはRead-eval-print loopの略で、CUIからコードを直接入力していって、その場で動作を確認できるツールです。
Rubyであればirbやpryなどが有名ですね。</p>

<p>Project KullaはOpenJDKにて開発されている、JavaのREPL環境をつくるプロジェクトです。
ちなみにこの機能はJDK9で、正式導入される予定になっています。</p>

<h2>JLine2のインストール</h2>

<p>早速REPL環境を動かしてみたいところですが、まずは前準備として、Kullaに必要なJLine2というライブラリをビルドします。</p>

<p>ソースコードは<a href="https://github.com/jline/jline2">GitHubのリポジトリ</a>でホストされていますので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:jline/jline2.git
</span><span class='line'><span class="nb">cd </span>jline2
</span><span class='line'>mvn install
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにJLine2はJDK8以前でないとビルドできないので注意です。</p>

<p>ビルドに成功するとjline2/targetディレクトリにjline-2.13-SNAPSHOT.jarが作成されます。Kullaからは、このjarを利用します。</p>

<h2>JDK9 EAのインストール</h2>

<p>KullaのビルドにはJDK9が必要です。<a href="https://jdk9.java.net/download/">こちら</a>からJDK9をダウンロードし、インストールします。
自分がインストールしたのは、以下のバージョン。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java version <span class="s2">&quot;1.9.0-ea&quot;</span>
</span><span class='line'>Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment <span class="o">(</span>build 1.9.0-ea-b59<span class="o">)</span>
</span><span class='line'>Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM <span class="o">(</span>build 1.9.0-ea-b59, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>その後、使用するJAVA_HOMEをJDK9に設定します。</p>

<p>普段、自分はJAVA_HOMEの設定にjava_homeコマンドを使用しているので、.bash_profileに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="sb">`</span>/usr/libexec/java_home -v 1.8<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>としてJDK8を使用しています。今回はJDK9を使いたいので、これを</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="sb">`</span>/usr/libexec/java_home -v 1.9<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>とし</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>として、JDK9を有効にします。</p>

<h2>Kullaのビルド</h2>

<p>いよいよKullaのソースをダウンロードしてビルドします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hg clone http://hg.openjdk.java.net/kulla/dev ~/kulla
</span><span class='line'><span class="nb">cd</span> ~/kulla
</span></code></pre></td></tr></table></div></figure>


<p>次に、その他必要なソース類を取得します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod 755 get_source.sh
</span><span class='line'>./get_source.sh
</span></code></pre></td></tr></table></div></figure>


<p>しばらく待つと、終了します。次にビルドスクリプトを環境に合わせて修正します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>langtools/repl
</span></code></pre></td></tr></table></div></figure>


<p>scripts/compileを以下のように修正します。</p>

<figure class='code'><figcaption><span>scripts/compile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">JLINE2LIB</span><span class="o">=</span>/Users/<span class="o">[</span>ユーザ名<span class="o">]</span>/jline2/target/jline-2.13-SNAPSHOT.jar
</span><span class='line'><span class="nv">JAVAC_BIN_HOME</span><span class="o">=</span>/Library/Java/JavaVirtualMachines/jdk1.9.0.jdk/Contents/Home/bin
</span><span class='line'>
</span><span class='line'>mkdir -p build
</span><span class='line'><span class="nv">$JAVAC_BIN_HOME</span>/javac -Xlint:unchecked -Xdiags:verbose -cp <span class="k">${</span><span class="nv">JLINE2LIB</span><span class="k">}</span> -d build src/*/*.java
</span></code></pre></td></tr></table></div></figure>


<p>1行目 - OSXの環境に合わせて"#!/bin/sh"に修正
2行目 - jline2のjarを指定
3行目 - JDK9のjavacのあるディレクトリを指定
6行目 - 先頭に"$JAVAC_BIN_HOME"を追加</p>

<p>修正できたら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scripts/compile
</span></code></pre></td></tr></table></div></figure>


<p>でビルドしましょう。なにもエラーがでなければ、成功しています。</p>

<h2>REPLを実行する</h2>

<p>実行前にscripts/runを以下のように修正します。</p>

<figure class='code'><figcaption><span>scripts/run</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">JLINE2LIB</span><span class="o">=</span>/Users/<span class="o">[</span>ユーザ名<span class="o">]</span>/jline2/target/jline-2.13-SNAPSHOT.jar
</span><span class='line'><span class="nv">JAVA_BIN_HOME</span><span class="o">=</span>/Library/Java/JavaVirtualMachines/jdk1.9.0.jdk/Contents/Home/bin/
</span><span class='line'><span class="nv">$JAVA_BIN_HOME</span>/java -ea -esa -cp build:<span class="k">${</span><span class="nv">JLINE2LIB</span><span class="k">}</span> tool.Repl <span class="s2">&quot;$@&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>先になおしたスクリプトとほぼ同じです。</p>

<p>修正できたら、早速実行してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scripts/run
</span></code></pre></td></tr></table></div></figure>


<p>すると、以下のようにプロンプトが表示されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>|  Welcome to the Java REPL -- Version 0.411
</span><span class='line'>|  Type /help <span class="k">for </span><span class="nb">help</span>
</span><span class='line'>
</span><span class='line'>-&gt;
</span></code></pre></td></tr></table></div></figure>


<p>あとは普通にJavaのプログラムが書けます！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-&gt; System.out.println<span class="o">(</span><span class="s2">&quot;Hello!&quot;</span><span class="o">)</span>;
</span></code></pre></td></tr></table></div></figure>


<p>また、CUIなどと同じようにタブによる補完もできます。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/zephiransas">@zephiransas</a> ちなみにSHIFT+TABでメソッドのシグネチャが表示されます．&#10;new String([SHIFT+TAB]みたいな感じで</p>&mdash; bitter_fox (@bitter_fox) <a href="https://twitter.com/bitter_fox/status/588512374845411328">2015, 4月 16</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Shift + Tab補完もなかなかステキ。</p>

<p>当然ですがクラスを定義することもできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-&gt; class Hoge <span class="o">{</span>
</span><span class='line'>&gt;&gt; public static String fuga<span class="o">(){</span> <span class="k">return</span> <span class="s2">&quot;FUGA!!&quot;</span>; <span class="o">}</span>
</span><span class='line'>&gt;&gt; <span class="o">}</span>
</span><span class='line'>|  Added class Hoge
</span><span class='line'>
</span><span class='line'>-&gt; Hoge.fuga<span class="o">()</span>;
</span><span class='line'>|  Expression value is: <span class="s2">&quot;FUGA!!&quot;</span>
</span><span class='line'>|    assigned to temporary variable <span class="nv">$1</span> of <span class="nb">type </span>String
</span></code></pre></td></tr></table></div></figure>


<p>面白いのは、<strong>いきなりメソッド定義</strong>もできます！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-&gt; int add<span class="o">(</span>int x, int y<span class="o">){</span> <span class="k">return </span>x + y;<span class="o">}</span>
</span><span class='line'>|  Added method add
</span><span class='line'>
</span><span class='line'>-&gt; add<span class="o">(</span>2,3<span class="o">)</span>;
</span><span class='line'>|  Expression value is: 5
</span><span class='line'>|    assigned to temporary variable <span class="nv">$2</span> of <span class="nb">type </span>int
</span></code></pre></td></tr></table></div></figure>


<p>普通に使えそうですね！</p>

<p>またTab補完周りの機能については、我らの<a href="https://twitter.com/bitter_fox/">@bitter_foxくん</a>が実装に関わってるらしいので、補完機能が怪しかったら、ぜひレポートしてあげてください。</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/zephiransas">@zephiransas</a> Tab補完周り僕の少し実装に関わってるんで，良ければフィードバックください！</p>&mdash; bitter_fox (@bitter_fox) <a href="https://twitter.com/bitter_fox/status/588512213050101760">2015, 4月 16</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>参考にしたリンク</h2>

<ul>
<li>Java 9 REPL – Getting started guide - <a href="http://www.jclarity.com/2015/04/15/java-9-repl-getting-started-guide/">http://www.jclarity.com/2015/04/15/java-9-repl-getting-started-guide/</a></li>
<li>REPLで遊ぼう - <a href="http://d.hatena.ne.jp/bitter_fox/20150331/1427754868">http://d.hatena.ne.jp/bitter_fox/20150331/1427754868</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHubのPull requestから、CHANGELOGっぽいものを作成するgemを作った]]></title>
    <link href="http://zephiransas.github.io/blog/2015/04/02/introduce-octocam/"/>
    <updated>2015-04-02T17:31:42+09:00</updated>
    <id>http://zephiransas.github.io/blog/2015/04/02/introduce-octocam</id>
    <content type="html"><![CDATA[<p>gemを作りました。名前はoctocamです。</p>

<ul>
<li>octocam - <a href="https://rubygems.org/gems/octocam">https://rubygems.org/gems/octocam</a></li>
</ul>


<p>主な機能としては「GitHubから指定された日付期間にマージされたPull requestを抽出し、CHANGELOGっぽいMarkdownを生成する」というgemです。</p>

<p>定期的にリリースを行っている場合に、以前リリースされたときからどのような機能が増えたかをCHANGELOGとかに書き出しますが、そういった時に便利に使えると思います。</p>

<p>似たような機能を持つものはgemやnpmを探すと、結構あります。<a href="https://github.com/skywinder/Github-Changelog-Generator/wiki/Alternatives">この辺り</a>とか。ただ、いずれも</p>

<ul>
<li>日付の指定ができない。できたとしてもPull requestの作成日とか。</li>
<li>issueやcommitを含めてしまう。</li>
<li>Markdownで出力できない。</li>
<li>認証に対応してない。</li>
</ul>


<p>などなど、要求を満たすものではなかったので、gemの作り方を勉強がてら作ってみました。</p>

<p>ワークフローとして、 <strong>必ずPull requestでレビューをしてから、マージをおこなうワークフロー</strong> を採用しているところであれば、フィットするように思います。</p>

<h2>インストール</h2>

<p>以下のようにしてインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install octocam
</span><span class='line'>rbenv rehash  # rbenvを使ってる人はrehash</span></code></pre></td></tr></table></div></figure>


<p>もしプライベートなリポジトリにアクセスしたい場合は、<a href="https://github.com/settings/applications">こちら</a>からPersonal access tokensを生成します。
あとは、生成したトークンを.bash_profileあたりから、環境変数「OCTOCAM_GITHUB_TOKEN」に設定しておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export OCTOCAM_GITHUB_TOKEN="your-40-digit-github-token"</span></code></pre></td></tr></table></div></figure>


<h2>使い方</h2>

<p>インストールされるとoctocamコマンドが使えるようになるので、以下のようにして実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>octocam -o zephiransas -r octocam -f 2015-01-01 -t 2015-01-31</span></code></pre></td></tr></table></div></figure>


<p>-f,-tオプションにPull requestがマージされた日付を指定でききます。</p>

<p><strong> カレントディレクトリがgitのローカルリポジトリで、かつ、originがGitHubに設定されている場合であれば-o,-rオプションは省略できます。 </strong></p>

<p>欲しい機能ありましたら、issueを立てて頂くか、Pull requestを投げてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambda-behaveでテストを書こう]]></title>
    <link href="http://zephiransas.github.io/blog/2014/12/16/about-lambda-behave/"/>
    <updated>2014-12-16T18:17:15+09:00</updated>
    <id>http://zephiransas.github.io/blog/2014/12/16/about-lambda-behave</id>
    <content type="html"><![CDATA[<p>これは<a href="http://qiita.com/advent-calendar/2014/java">Javaアドベントカレンダー2014</a>の12/16分の記事です。</p>

<p>昨日は<a href="https://github.com/grimrose">grimrose</a>さんの、<a href="http://grimrose.blogspot.jp/2014/12/gradle.html">[書評] Gradle徹底入門</a> でした。</p>

<p>明日は<a href="https://twitter.com/com4dc">@com4dc</a>さんの、<a href="http://dev.classmethod.jp/server-side/what-a-wonderful-stream-world/">はじめて触るStreamの世界</a> です。</p>

<p>自分はJavaのテストフレームワークである、<a href="https://github.com/RichardWarburton/lambda-behave">lambda-behave</a>について紹介します。</p>

<p>自分は普段はRailsでの開発を行っているのですが、現場では主にRSpecを使ってテストを記述しています。RSpecでのテストは以下のような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;Sample&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;hogeメソッドについて&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;fugaを返すこと&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Sample</span><span class="o">.</span><span class="n">hoge</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;fuga&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>RSpecでは上記のようにDSLを使って、なにをテストしているかを構造的に記述することができます。
lambda-behaveを使うと、このようなDSLっぽい記述のテストを、Java8のLambdaを使って書くことができるようになります。</p>

<h2>最初のテスト</h2>

<p>まずはテスト対象となるメソッドを準備します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">includeTax</span><span class="o">(</span><span class="n">Integer</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のようなstaticなメソッドを準備します。includeTaxメソッドは引数を一つ取り、その税込み金額を返すメソッドとします。<strong>実にギョーミーですね！</strong></p>

<p>今回はTDD的なノリで実装していきますので、ここでは中身の実装はおこないません。</p>

<p>それでは実際のテストを書いて行きましょう。ここでのテストシナリオは</p>

<ul>
<li>includeTaxメソッドに100を渡した場合に、108が返ってくること</li>
</ul>


<p>をテストするとします。これをlambda-behaveで書くと、以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">insightfullogic</span><span class="o">.</span><span class="na">lambdabehave</span><span class="o">.</span><span class="na">Suite</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JunitSuiteRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleSpec</span> <span class="o">{{</span>
</span><span class='line'>    <span class="n">describe</span><span class="o">(</span><span class="s">&quot;includeTax&quot;</span><span class="o">,</span> <span class="n">it</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">it</span><span class="o">.</span><span class="na">should</span><span class="o">(</span><span class="s">&quot;税込み価格が取得できること&quot;</span><span class="o">,</span> <span class="n">expect</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">expect</span><span class="o">.</span><span class="na">that</span><span class="o">(</span><span class="n">Sample</span><span class="o">.</span><span class="na">includeTax</span><span class="o">(</span><span class="mi">100</span><span class="o">)).</span><span class="na">is</span><span class="o">(</span><span class="mi">108</span><span class="o">)</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>static importを使ってlambda-behaveのメソッドを使えるようにし、こられを使って記述していきます。</p>

<p>JUnitのランナーも用意されていますので、これを@RunWithで指定すれば、IDEからも簡単にテストを実行可能です。早速、テストを実行してみましょう。</p>

<p><img src="http://zephiransas.github.io/images/20141216/screen1.png" alt="screen1" /></p>

<p>includeTaxは、まだ実装をおこなっていませんので、当然このとおりテストが失敗します。</p>

<p>次に、includeTaxを実装してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">includeTax</span><span class="o">(</span><span class="n">Integer</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">float</span> <span class="n">TAX_RATE</span> <span class="o">=</span> <span class="mf">0.08</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="n">price</span> <span class="o">*</span> <span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">TAX_RATE</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再度、テストを実行すれば、テストが成功しています。</p>

<p><img src="http://zephiransas.github.io/images/20141216/screen2.png" alt="screen2" /></p>

<h2>複数のテストデータでチェック</h2>

<p>先の例では1つの値でしかテストしませんでしたが、lambda-behaveでは同時に複数の値でテストすることもできます。以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">it</span><span class="o">.</span><span class="na">uses</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="mi">108</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="mi">216</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">toShow</span><span class="o">(</span><span class="s">&quot;税込み価格が取得できること&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">expect</span><span class="o">,</span> <span class="n">price</span><span class="o">,</span> <span class="n">includeTax</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">expect</span><span class="o">.</span><span class="na">that</span><span class="o">(</span><span class="n">Sample</span><span class="o">.</span><span class="na">includeTax</span><span class="o">(</span><span class="n">price</span><span class="o">)).</span><span class="na">is</span><span class="o">(</span><span class="n">includeTax</span><span class="o">);</span>
</span><span class='line'>  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>itのあとにuseとandをチェインして値を準備し、これを使ってtoShowメソッド内でテストを行います。toShowメソッド内ではlambdaの引数で準備した値を利用できますので、lambda内でその値をexpectするようにしています。</p>

<h2>生成した値でチェック</h2>

<p>lambda-behaveではランダムな値を生成する機能も準備されています。適当な数値を5つほど生成して、そのテストを行うコードは以下のようになります。</p>

<p>（あまり例がよくないですが・・・）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">it</span><span class="o">.</span><span class="na">requires</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="na">example</span><span class="o">(</span><span class="n">Generator</span><span class="o">.</span><span class="na">integersUpTo</span><span class="o">(</span><span class="mi">1000</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">toShow</span><span class="o">(</span><span class="s">&quot;税込み価格が取得できること&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">expect</span><span class="o">,</span> <span class="n">price</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="o">.</span><span class="na">that</span><span class="o">(</span><span class="n">Sample</span><span class="o">.</span><span class="na">includeTax</span><span class="o">(</span><span class="n">price</span><span class="o">)).</span><span class="na">is</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="n">price</span> <span class="o">*</span> <span class="mf">1.08</span><span class="o">));</span>
</span><span class='line'>  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>requiresでランダムに準備する値の数を指定します。</p>

<p>exampleではどのようなテストデータを生成するかを指定します。ここではlambda-behaveで準備されたGenerator.integersUpToを使用しています。この他にも適当な文字列を生成するasciiStringsメソッドなどもあります</p>

<h2>例外が発生することをチェック</h2>

<p>引数にnullが渡された場合にNullPointerExceptionの発生をチェックすることも、JUnitと同様に可能です。</p>

<p>まず、includeTaxにnullチェックを記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">includeTax</span><span class="o">(</span><span class="n">Integer</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">price</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">float</span> <span class="n">TAX_RATE</span> <span class="o">=</span> <span class="mf">0.08f</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="n">price</span> <span class="o">*</span> <span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">TAX_RATE</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これをテストするlambda-behaveのコードは以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">it</span><span class="o">.</span><span class="na">should</span><span class="o">(</span><span class="s">&quot;nullの場合ぬるぽ&quot;</span><span class="o">,</span> <span class="n">expect</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="o">.</span><span class="na">exception</span><span class="o">(</span><span class="n">NullPointerException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Sample</span><span class="o">.</span><span class="na">includeTax</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>exceptionメソッドの第1引数に、発生する予定の例外を指定し、第2引数には例外が発生する処理をlambdaで記述します。</p>

<p>lambdaに慣れていないと少々書きづらいかもしれないですが、DSLちっくに書けるのはJavaっぽくなくてステキですよね！</p>

<p>こちらからは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JJUG CCC 2014 Fallで発表してきた]]></title>
    <link href="http://zephiransas.github.io/blog/2014/11/17/attend-jjug-ccc-2014-fall/"/>
    <updated>2014-11-17T20:40:56+09:00</updated>
    <id>http://zephiransas.github.io/blog/2014/11/17/attend-jjug-ccc-2014-fall</id>
    <content type="html"><![CDATA[<p>11月15日に、東京は新宿の西新宿ベルサールにて開催された<a href="http://www.java-users.jp/?page_id=1284">JJUG CCC 2014 Fall</a>に参加してきました。</p>

<p>JJUC CCC（クロス・コミュニティ・カンファレンス）日本Javaユーザ会が春/秋と、年に2回開催している、JJUG主催としては最大のイベントです。</p>

<p>今回はこれのセッション公募(CfP)に応募したところ嬉しい事にセッション枠を1つ受け持つことになったので、それも兼ねて東京まで参加してきました。
久々に東京のJavaコミュニティの勉強会で、普段はTL上でしか面識のない人たちに会えるのも、楽しみの一つ。</p>

<p>いつもの面々（失礼）もそうですが、今回は以前からお会いしたいと思っていた <a href="https://twitter.com/kikutaro_">@kikutaro_</a> さんと、お昼をご一緒させていただくことができました。TL上での発言を見て「真面目な好青年っぽいなー」という印象を持っていましたが、会ってもやはり好青年でした。</p>

<p><strong>普段から何をツイートするか、考えて発言しないといけませんね！！</strong> （ｹﾞﾌﾝｹﾞﾌﾝ</p>

<p>それから余談ですが、実は大都会ITクラスタは過去、JJUG CCCのスピーカを3人輩出しています。</p>

<p>最初は独立国家福山に住む「<a href="https://twitter.com/soudai1025">@soudai1025</a> 氏」</p>

<p>それから岡山Javaユーザ会/倉敷天領Scala勉強会に所属する「<a href="https://twitter.com/razon">@razon</a> 氏」</p>

<p>あとは「<a href="https://twitter.com/mao_instantlife">@mao_instantlife</a> 氏」</p>

<p>他の地方で、これだけスピーカが出てるところはないように思うので、ちょっと自慢していいような気もしますw</p>

<h3>自分のセッションについて</h3>

<p>今回自分はRailsライクなWebフレームワーク「<a href="http://www.ninjaframework.org/">ninjaframework</a>」について、セッションを行いました。以下はその資料。</p>

<script async class="speakerdeck-embed" data-id="425e04e04edd01329d885e31c290001e" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>一番小さい部屋だったので、おそらく40~50人程度の方がいらしていたと思います。</p>

<p>当日、他のセッションでSpring Bootのセッションとハンズオンがあり「これはネタを選択し間違えた感・・・」と思ったのは内緒。</p>

<p>久々の発表だったり、資料作りが思うように進まなくて、練習もろくにできなかったりで、たどたどしいことこの上ないセッションになってしまったような気がします・・・</p>

<p>しかも50分の予定が40分程度で終わってしまい、困ったなーと思っていたところ、Q&amp;Aで意外にも多くの方から質問を頂きました。その結果、きっちり50分！</p>

<p>あまりうまくいかなかった部分もありましたが、最後まで聞いていただいた皆さん、大変にありがとうございます！</p>

<h3>Java女子部の台頭</h3>

<p>以下はセッションの内容とはあまり関係ない、参加して自分が肌で感じたことです。</p>

<p>今回のCCCで一番思ったことが、女性の参加者が多いこと。</p>

<p>個人的にですが、エンジニアの世界はまだまだ男性中心な世界だなと感じていて、女性でバリバリコード書いたり、勉強会で発表してる人って少ないのが現状です。（それが良いとも悪いともいいません。それは本質ではないので。）</p>

<p>なので、今回のCCCに多くの女性エンジニアがいたことには正直驚きました。最近、女性エンジニアの有志を中心に「<a href="http://javajo.doorkeeper.jp/">Java女子部</a>」なるコミュニティが発足したことは知っていましたが、それが広まってきてる感じです。</p>

<p>エンジニアという職業が成熟していく過程に、女性が活躍できる環境というのは必須だと思います。また、それがエンジニアという仕事を一生の仕事にするためにも、必要なことだと思います。</p>

<blockquote class="twitter-tweet" lang="ja"><p>Java女子部の女の子たちみんな可愛かったのでみんなJavaやるべき</p>&mdash; しょぼちむ@どうもネカマです (@syobochim) <a href="https://twitter.com/syobochim/status/533626307267928065">2014, 11月 15</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h3>Javaコミュニティの復活の兆し</h3>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774169315" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>つい先日発売された「Javaエンジニア養成読本」（通称「妖精本」）の巻頭記事に、Javaのコミュニティの歴史について触れている部分があります。</p>

<p>自分がJavaのコミュニティに最初に触れたのは、Seasarが流行っていた時代です。</p>

<p>その後Javaのコミュニティは、Sunの不振などもあり少しづつ勢いを失ってきたように思います。</p>

<p>しかし今回のCCCの参加登録数は約650名で過去最高。また懇親会の参加者も受付開始するとあっという間に満席になり、最終的には100名とこちらも過去最高。自分にとっても最高に楽しい時間でした。</p>

<ul>
<li>JJUG CCC 2014 Fall 懇親会 - <a href="https://www.flickr.com/photos/zephiransas/sets/72157648917084929/">https://www.flickr.com/photos/zephiransas/sets/72157648917084929/</a></li>
</ul>


<blockquote class="twitter-tweet" lang="ja"><p>この飲み会、Java最盛期っぽい！</p>&mdash; きしだﬗ (@kis) <a href="https://twitter.com/kis/status/533619083271352322">2014, 11月 15</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>これもひとえに2007年4月にJJUGが発足以来、地道に活動してこられた多くの人たちの努力の賜物です。</p>

<p>自分が感じたことは、<strong>Javaコミュニティは再びかつての勢いを取り戻しはじめている</strong>、ということです。</p>

<p>そして言語としてのJavaもJava8で導入されたLambdaを皮切りに、これからも進化を続けていって欲しいと思います。</p>

<blockquote class="twitter-tweet" lang="ja"><p>もはやJavaダサいとかいてるほうがダサい　<a href="https://twitter.com/hashtag/jjug_ccc?src=hash">#jjug_ccc</a> <a href="https://twitter.com/hashtag/ccc_r17?src=hash">#ccc_r17</a></p>&mdash; Takafumi Yoshida (@zephiransas) <a href="https://twitter.com/zephiransas/status/533561483234267136">2014, 11月 15</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pusherを使ったChrome拡張を作る]]></title>
    <link href="http://zephiransas.github.io/blog/2014/03/20/pusher-with-chrome-extension/"/>
    <updated>2014-03-20T17:24:00+09:00</updated>
    <id>http://zephiransas.github.io/blog/2014/03/20/pusher-with-chrome-extension</id>
    <content type="html"><![CDATA[<p>メッセージ等の新着通知やアップデート情報の配信など、アプリケーションへの通知の方法として、スマートフォンなどで使われるpush通知など、最近では様々なものがあります。</p>

<p>しかし自前で通知用のサーバを運用するのは手間がかかるので、これを簡単に使えるようにするサービスも増えてきました。例えば<a href="http://pusher.com">Pusher.com</a>などがあります。これを使うことで、ブラウザへのリアルタイムな通知機能を、WebSocketを使って簡単に作成することができます。</p>

<p><img src="http://zephiransas.github.io/images/20140321/pusher-ss.png" alt="pusher-ss" /></p>

<p>今回はPusherからの通知をChrome拡張で受信し、これをデスクトップ通知するサンプルを作成しましたので、解説してみます。</p>

<h2>Pusher側の設定</h2>

<p>まずはPusher側に設定を行います。Pusherでアカウントを作成後、以下のようにアプリケーションを登録します。</p>

<p><img src="http://zephiransas.github.io/images/20140321/pusher1.png" alt="pusher1" /></p>

<p>ここでEncryptionにチェックを入れておきましょう。チェックしなくても特に問題はないのですが、Chrome拡張の場合セキュリティの問題からSSLを使用したほうが、いろいろ都合がいいので、チェックするほうが無難です。</p>

<h2>Chrome拡張の作成</h2>

<h3>manifest.jsonの設定</h3>

<figure class='code'><figcaption><span>manifest.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;manifest_version&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Pusher test extension&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Pusher用 Chrome extension&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;permissions&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;notifications&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;content_security_policy&quot;</span><span class="p">:</span> <span class="s2">&quot;script-src &#39;self&#39; https://stats.pusher.com; object-src &#39;self&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;background&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;src/javascript/pusher.min.js&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;src/javascript/background.js&quot;</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回はPusherからのメッセージをデスクトップ通知するようにしたいのでpermissionに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;permissions&quot;</span> <span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;notifications&quot;</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>を指定しています。</p>

<p>また、content_security_policyのscript-srcに <strong><a href="https://stats.pusher.com**">https://stats.pusher.com**</a> を追加しています。httpではなく</strong>https**を指定していることに注意してください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;content_security_policy&quot;</span><span class="err">:</span> <span class="s2">&quot;script-src &#39;self&#39; https://stats.pusher.com; object-src &#39;self&#39;&quot;</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>このサイトは、Pusherのクライアントライブラリであるpusher.min.jsからアクセスしているのですが、これを許可していないとChrome拡張からPusherのサーバへ、正しく接続をすることができません。</p>

<p>次にpusher.min.jsですが、これは本来であればPusherのサイトに公開されているものを読み込んで使いたいところなのですが、Chrome拡張では外部のjavascriptを読み込むことができないようです。なので、ダウンロードしてソースに加えています。
ちなみにpusher.min.jsのホスト先は、<a href="http://pusher.com/docs/client_libraries">こちらで</a>公開されています。</p>

<h3>background.js</h3>

<p>あとはChrome拡張のバックグラウンドで実行されるbackground.jsで、Pusherとの接続を行います。</p>

<figure class='code'><figcaption><span>background.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">pusher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Pusher</span><span class="p">(</span><span class="s2">&quot;======== KEY ========&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">encrypted</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">channel</span> <span class="o">=</span> <span class="nx">pusher</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;test_channel&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">channel</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;my_event&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opt</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;basic&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">message</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">iconUrl</span><span class="o">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">chrome</span><span class="p">.</span><span class="nx">notifications</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nx">opt</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">){</span> <span class="cm">/** Do Nothing */</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pusherのコンストラクタに渡すkeyには、Pusherで作成したアプリケーションのKeyを指定します。</p>

<p><img src="http://zephiransas.github.io/images/20140321/pusher2.png" alt="pusher2" /></p>

<p>また、大事なポイントとしてPusherのオプションに</p>

<figure class='code'><figcaption><span>background.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">encrypted</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>を指定する必要があります。これは先のmanifest.jsonの設定でも触れましたが、この指定がない場合Pusherの接続先が **<a href="http://stats.pusher.com**">http://stats.pusher.com**</a> となってしまいます。Chrome拡張ではhttpsでない外部サーバに接続することはセキュリティ上できませんので、上記のオプションを指定しています。</p>

<h2>Chrome拡張の読み込み</h2>

<p>では、このようにして作ったChrome拡張を、Chromeに読み込ませて動作確認してみましょう。</p>

<p>ChromeのURL欄に chrome://extensions/ と入力します。まだデベロッパーモードを有効にしていない場合は「デベロッパーモード」をチェックします。次に「パッケージ化されていない拡張機能を読み込む」をクリックします。</p>

<p><img src="http://zephiransas.github.io/images/20140321/pusher3.png" alt="pusher3" /></p>

<p>そして先ほど作ったChrome拡張を含むディレクトリを指定します。すると、拡張機能の一覧に表示されます。</p>

<p><img src="http://zephiransas.github.io/images/20140321/pusher4.png" alt="pusher4" /></p>

<p>これでChrome拡張を導入することができました。</p>

<h2>Pusherからテストを行う</h2>

<p>それでは実際にPusherから通知を行い、Chrome拡張に通知が表示されるかどうか確認してみましょう。</p>

<p>Railsなどを使って自分でサーバアプリを作ってもいいのですが、今回はPusherのEvent Creatorの機能を使ってみましょう。</p>

<p>Pusherの管理画面から「Event creator」を選択し、以下のように入力します。</p>

<p><img src="http://zephiransas.github.io/images/20140321/pusher5.png" alt="pusher5" /></p>

<p>これで、Send eventボタンをおして、うまくいけば画面に以下の様な通知が表示されます。</p>

<p><img src="http://zephiransas.github.io/images/20140321/pusher6.png" alt="pusher6" /></p>

<p>今回はアイコン画像のURLを指定しなかったので、なにも表示されていませんが、以下の用に画像へのURLを指定することでアイコンを表示することもできます。</p>

<figure class='code'><figcaption><span>background.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">opt</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;basic&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">message</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">iconUrl</span><span class="o">:</span> <span class="s2">&quot;http://example.com/path/to/icon&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ソースなど</h2>

<p>今回作成したChrome拡張は、こちらのGithubにまとめてあります。参考にしてみてください。</p>

<ul>
<li><a href="https://github.com/zephiransas/pusher-extension">pusher-extension</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[岡山の勉強会に参加する際の心構え]]></title>
    <link href="http://zephiransas.github.io/blog/2014/03/15/what-you-shoud-eat-in-daitokai/"/>
    <updated>2014-03-15T14:53:00+09:00</updated>
    <id>http://zephiransas.github.io/blog/2014/03/15/what-you-shoud-eat-in-daitokai</id>
    <content type="html"><![CDATA[<p>IT勉強会はなにも東京ばかりで開催されているわけではない。</p>

<p>地方の勉強会に参加するのであれば、ついでに観光地を巡ったり、その土地の美味しいモノを食べたいというのが人情である。</p>

<p>本エントリでは岡山の勉強会に来た際に食べるべきものを紹介する。</p>

<h2>もも、ぶどう</h2>

<p>言わずと知れた岡山の特産品。桃は白桃、ぶどうはマスカット・オブ・アレキサンドリアなどが有名。なにしろ倉敷にはその名もマスカット球場なるスタジアムがあり、楽天の星野仙一監督が倉敷出身という縁もあり、ここ数年は楽天がキャンプをやってたりする。それぐらい有名。ただし、どれもそこそこお値段がするので、お財布に余裕があるときにしましょう。</p>

<p>また、ちょっと亜流ではあるけれども白桃やマスカットを和菓子で食すという方法もある。岡山には<a href="http://www.kitchoan.co.jp/site/index.html">源吉兆庵</a>なる和菓子屋さんがあり、これは世界的にも有名。サンフランシスコにも出店してたりする。ここのお菓子に<a href="http://www.kitchoan.co.jp/site/products/sizen_products/tousenka.html">「桃泉果」</a>なるものがあり、これは白桃をまるまる一つ使った贅沢な逸品。マスカットであれば<a href="http://www.kitchoan.co.jp/site/products/sizen_products/rikunohouju.html">「陸乃宝珠」</a>というものがあります。これはこれで美味しいので、おすすめです。ただし、どれもそこそこお値ｄ（ｒｙ</p>

<h2>牡蠣＆牡蠣おこ</h2>

<p><img src="http://zephiransas.github.io/images/20131223/oister.JPG" alt="oister" /></p>

<p>日生であれば、なにをおいても牡蠣です。日生で牡蠣を食べたいのであれば五味の市がおすすめです。ここでは1kgから殻付きの生牡蠣を買うことができます。これを五味の市近くにある道の駅で、BBQにしていただくのが定番です。シーズン中の牡蠣は身も大きく、とても美味しいですよ。</p>

<p>詳細はこちら</p>

<ul>
<li><a href="http://zephiransas.github.io/blog/2013/12/23/daitokai2013/">牡蠣駆動勉強会を行いました</a></li>
</ul>


<p>また、B級グルメとしても定番になった感のあるカキオコも日生ではよく見かけます。これも押さえておきたい。</p>

<h2>えびめし</h2>

<p><img src="http://zephiransas.github.io/images/20140315/ebimeshi.JPG" alt="えびめし" /></p>

<p>岡山の誇るB級グルメ「えびめし」</p>

<p>海老の入った、デミソース風味の焼き飯とでも言った感じ。</p>

<p>岡山には<a href="http://www.indeira.net/ebimeshiya/">「えびめしや」</a>なるレストランが数店あり、地元民も愛する味。</p>

<p>他にも、市の中心部からほど近い、天満屋バスターミナルの地下にある<a href="http://tabelog.com/okayama/A3301/A330101/33009446/">「いんでいら」</a>のえびめしもオススメ。</p>

<p>個人的には、かつて岡山市倉田にあった「いんでいら」がイチオシ。自分が小さい時から慣れ親しんだ味だったが、残念ながらマスターが高齢になったこともあり、今は閉店してしまった。しかしここのえびめしこそが岡山の元祖えびめしとおもっている</p>

<h2>パフェ</h2>

<p>意外かもしれないが、岡山といえばパフェ。<a href="http://www.okayama-cci.or.jp/fruitparfait/">こんなページ</a>もあったりするぐらいに推してる。</p>

<p>そして、Java会の重鎮、<a href="https://twitter.com/skrb">櫻庭さん</a>も岡山のパフェ推しで有名。大都会アドベントカレンダーでも、岡山のパフェを紹介して頂いています。</p>

<ul>
<li><a href="http://www.javainthebox.com/2012/12/advent-calendar-16.html">大都会岡山 Advent Calendar 16 日目 - 岡山といえばパフェだよね</a></li>
<li><a href="http://www.javainthebox.com/2013/12/advent-calendar-11-2.html">大都会岡山 Advent Calendar 11 日目 - 岡山といえばパフェだよね #2</a></li>
</ul>


<h2>後楽園</h2>

<p><img src="http://zephiransas.github.io/images/20140315/kourakuen.jpg" alt="廉池軒" /></p>

<p>倉敷の環境名所といえば「倉敷美観地区」ですが、岡山の観光名所といったら「後楽園」</p>

<p>江戸時代、岡山藩藩主池田綱政によって造成された、日本庭園です。いまでも園内には、古い建物が残っており、これを一般市民でも有償で利用することができます。こんな素晴らしい庭園で、のんびり勉強会とかできたらいいですよね？</p>

<p>・・・</p>

<p>・・・</p>

<p>・・・</p>

<p>というわけで、この後楽園でJava8のハンズオンを企画しました！</p>

<ul>
<li><a href="http://okajug.doorkeeper.jp/events/9692">Java8 Lambdaハンズオン@岡山後楽園</a></li>
</ul>


<p>ぜひ、この機会に岡山にお越しいただき、岡山の美味しいものと、美しい風景を堪能してはいかがでしょうか？</p>

<p>皆様のご参加をお待ちしております。</p>

<h2>あわせて読みたい</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/Nagise/20140313/1394717894">富山の勉強会に参加する際の心構え</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8で始めるLambda（基礎編）]]></title>
    <link href="http://zephiransas.github.io/blog/2014/03/12/java8lambda/"/>
    <updated>2014-03-12T16:33:00+09:00</updated>
    <id>http://zephiransas.github.io/blog/2014/03/12/java8lambda</id>
    <content type="html"><![CDATA[<p>まもなくリリース予定のJava8。その中でも最も大きなインパクトを持つというProject Lambdaについて、ここ数日調べてみました。
今からLambdaをはじめようとする人向けに、何回かに分けてまとめてみたいと思います。</p>

<h2>インターフェースの宣言</h2>

<p>まずは手始めに、引数で指定された文字列の前後に"[&ldquo;と&rdquo;]&ldquo;をつける処理を考えてみましょう。</p>

<p>Lambdaを使用するには、まずインターフェースを宣言する必要があります。上記の仕様から考えると</p>

<ul>
<li>引数はString型の引数が1つ</li>
<li>戻り値もString型</li>
</ul>


<p>となるので、この場合は以下の様なインターフェースを宣言します。</p>

<figure class='code'><figcaption><span>LambdaInterface.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">LambdaInterface</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="nf">method</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで注意するべきことが1つ。Java8のLambdaとして使えるインターフェースには決まりがあるのですが、もっとも重要なのが<strong>インターフェースのメソッドが1つだけ</strong>ということです。インターフェースのメソッドが2つ以上ある場合には、それをLambdaとして使用することはできません。</p>

<p>これはLambdaの実装部分を書く際に、どのメソッドの内容を実装しているのかを書かないため、Lambdaを書いた場合は<strong>そのインターフェースがもつ唯一のメソッド</strong>に対して実装をおこなったとみなすからです。</p>

<p>一見、これは不便なように思ってしまうかもしれないですが、普段使うパターンのインターフェースのほとんどがjava.util.functionパッケージ内で用意されているので、実際にはそれ程不便ではありません。むしろ自分でインターフェースを用意するほうが稀かもしれません。</p>

<h2>Lambdaを使った記述</h2>

<p>早速、先に宣言したインターフェースを使ってLambdaを書いてみましょう。Lambdaを記述する際の基本となる文法は、以下のようになっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="err">インターフェース名</span><span class="o">]</span> <span class="o">[</span><span class="n">lambda</span><span class="err">式の名前</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="err">引数の型</span> <span class="err">引数</span><span class="o">,...)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="err">（実装）</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>よってLambdaInterfaceを使って書くと、以下のようになります。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">LambdaInterface</span> <span class="n">lambda</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lambda</span><span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="s">&quot;HOGE&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行すると"[HOGE]&ldquo;と出力されていることがわかると思います。</p>

<p>このように、匿名クラスを使った場合などと比べて、少ない記述量で実装できると思います。</p>

<h2>Lambdaの省略記法</h2>

<p>また、このLambdaの記述では、以下のルールで、省略した記述を使用することもできます。</p>

<ul>
<li>引数の型は（型推論できるので）省略できる</li>
<li>引数が1つの場合は、引数の()を省略できる</li>
<li>但し、引数なしの場合は省略できない</li>
<li>実装部分が1行の場合は、{}を省略可能。さらにreturn文も不要</li>
</ul>


<p>上記ルールに沿ったLambdaであれば省略可能です。ですので先ほどのコードも以下の様に省略できます。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">LambdaInterface</span> <span class="n">lambda</span> <span class="o">=</span> <span class="n">value</span> <span class="o">-&gt;</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lambda</span><span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="s">&quot;HOGE&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>かなりスッキリしましたね！</p>

<h2>java.util.functionで提供されるインターフェースを使う</h2>

<p>先ほど少し触れましたが、上記のLambdaInterfaceのような普段Lambdaとして使うインターフェースはjava.util.function内にいろいろ用意されています。
例えば、LambdaInterfaceの様に「String型の引数を1つ取り、String型の戻り値を持つ」インターフェースはjava.utl.functionパッケージ内にあるFunctionインターフェースを使います。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">R</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">R</span> <span class="nf">apply</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最初の型引数Tには1つ目の引数の型、2つ目の型引数Rには戻り値の型を指定します。またapplyメソッドが実装対象となるメソッドです。</p>

<p>先のコードをFunctionインターフェースを使って書き直すと。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span> <span class="n">value</span> <span class="o">-&gt;</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lambda</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">&quot;HOGE&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。Functionの他にも</p>

<ul>
<li>引数を1つ持ち、戻り値がないConsumer</li>
<li>引数がなく、戻り値があるSupplier</li>
<li>引数を1つ持ち、戻り値がboolean型のPredicate</li>
<li>引数を1つ持ち、かつこれが戻り値と同じ場合のUnaryOperator</li>
</ul>


<p>などのインターフェースが提供されています。</p>

<p>どういった場合に、どのインターフェースを使えばよいかについては、Qiitaにまとめておきましたので、参考にしてみてください。</p>

<ul>
<li><a href="http://qiita.com/zephiransas/items/3b03af4f9044df3182d0">Java8関数型インターフェース チートシート</a></li>
</ul>


<p>通常は、ここで提供されているインターフェースを使い、それ以外のパターンが発生した場合のみ、自分でインターフェースを宣言するほうがよいでしょう。</p>

<h2>メソッド参照を使う</h2>

<p>メソッド参照もJava8で新しく追加された機能です。</p>

<p>メソッド参照を使うと、他のクラスのクラスメソッドやインスタンスメソッドを、Lambdaの実装として利用することができるようになります。メソッド参照はドット(.)でメソッドを呼ぶ代わりに、コロン2つで呼び出します。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="err">クラス名</span><span class="o">]::[</span><span class="err">メソッド名</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>例えば先の文字列の前後にカッコをつけるメソッドが以下のようにSampleクラスのstaticメソッドとして定義されていた場合</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sample.addをメソッド参照するには</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span> <span class="nl">Sample:</span><span class="o">:</span><span class="n">add</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lambda</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">&quot;HOGE&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここではstaticなクラスメソッドを使いましたが、インスタンスメソッドの場合も同様に、インスタンスを生成し、そこからメソッド参照をすることができます。</p>

<figure class='code'><figcaption><span>Sample.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Sample</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span> <span class="nl">sample:</span><span class="o">:</span><span class="n">add</span><span class="o">;</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lambda</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">&quot;HOGE&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;[&quot;</span> <span class="o">+</span> <span class="n">value</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Photo Leafをちょっとリニューアルしました]]></title>
    <link href="http://zephiransas.github.io/blog/2014/02/06/renew-photoleaf/"/>
    <updated>2014-02-06T15:51:00+09:00</updated>
    <id>http://zephiransas.github.io/blog/2014/02/06/renew-photoleaf</id>
    <content type="html"><![CDATA[<p>前から気になっていた<a href="http://www.photo-leaf.com">Photo Leaf</a>のフォトブック作成画面のリニューアルをしました。</p>

<p><img src="http://zephiransas.github.io/images/20140206/photoleaf.png" alt="フォトブック編集画面" /></p>

<p>画面の中央部分にフォトブックのページ一覧。画面の一番下に、flickrの写真一覧を表示するようにしました。今までとは、真逆のレイアウトになっています。</p>

<ul>
<li>flickrの写真一覧は左右のスライダーでページを移動できます。</li>
<li>ちなみに、スクロールする度にPhotoStreamの写真を逐次読み込む仕様になっています。</li>
<li>flickrの写真は、クリックすることで大きめの画像を画面中央に表示できます。</li>
<li>Set内の写真のみを一覧に表示した場合は「Setを選ぶ」ボタンを押すことで、Setを選択できます。</li>
</ul>


<p>写真選択は今まで通り、ドラッグ&amp;ドロップでフォトブックの各ページに写真を置いていきます。</p>

<p>flickrに写真を保存していて、フォトブックを作ってみたい方は是非ご利用ください。</p>

<h2>技術的なこと</h2>

<p>ついでといってはなんですが、裏側もちょこちょこ修正しています。</p>

<ul>
<li>unicornを使うようにした。多少はパフォーマンスがあがってる（はず）</li>
<li><a href="http://wercker.com/">wercker</a>を使って、masterにpushするだけで、あとは自動でテスト->デプロイまでできるようにした。</li>
<li>利用規約のページなど、他とは微妙に違うページは別layoutにしてたのを、content_forを使ってapplication.html.erbに一本化した。</li>
<li>rpsecのテストにshoulda matcherを導入した。</li>
</ul>


<p>といったとこです。<strong>特にwerckerは素晴らしい。</strong> werckerのお陰で、本番環境とステージング環境をあまり考えることなく、テストからデプロイまでやってくれるのは、非常に楽でした。</p>

<p>このあたりのwerckerの使い方も、後ほどまとめてみようかと思っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[werckerでrspecとcucumberのCI環境を作る]]></title>
    <link href="http://zephiransas.github.io/blog/2014/01/23/webkit-on-wercker/"/>
    <updated>2014-01-23T14:30:00+09:00</updated>
    <id>http://zephiransas.github.io/blog/2014/01/23/webkit-on-wercker</id>
    <content type="html"><![CDATA[<p>去年作った<a href="http://www.photo-leaf.com/">Photo Leaf</a>というWebサービスがあるのですが、これのCI環境を作成したいなぁと思っていたところwerckerというCIサービスを使って構築できたので、そのまとめです。</p>

<h2>werckerとは？</h2>

<p><a href="http://wercker.com/">wercker</a>は<a href="https://travis-ci.org/">TravisCI</a>などに代表されるように、外部でビルド（というかテスト）やデプロイを行ってくれるCI（継続的インテグレーション）サービスです。</p>

<p>使い方としては、リモートリポジトリに変更がpushされた時点でこれをフックして、CIサービス側でテストしたり、場合によってはそのまま本番環境に自動デプロイとかもしてしまえば、変更内容を安全、かつ迅速にリリースできる仕組みが出来上がるわけです。イマドキっぽいですね！</p>

<p>werckerの特徴としては</p>

<h4>GithubとBitbucketに対応</h4>

<p>TravisCIはGithubにあるリポジトリしかビルド対象にできません。Githubのサービスなんだから、当たり前といえば当たり前ですが・・・</p>

<h4>（今のところ）無料</h4>

<p>2014/1/23現在はベータのようです。将来的にはどうなるのかわからないですが、今のところ無料で使えます。制限としては「<strong>1つのビルドが25分以内に完了すること</strong>」ぐらいです。エンタープライズなシステムだとキツイかもですが、そこそこの規模なら問題ないんじゃないでしょうか。</p>

<h4>テストを実行するための仮想環境が豊富に用意されている</h4>

<p>werckerでビルドを実行する際にはBoxという仮想環境内で実行されます。これが予め様々な種類が用意されています。通常のRuby(Rails)の環境とかだけではなく、JavaやAndroidといった環境も用意されています。また<a href="http://devcenter.wercker.com/articles/boxes/">Boxを自分で作る</a>こともできるようです。</p>

<h4>privateリポジトリもビルドできる</h4>

<p>TracisCIは無課金だとprivateリポジトリはビルドできません。しかしwerckerはprivateリポジトリをビルドできます。
Photo LeafのソースはBitbucket上のprivateリポジトリで管理しているため、今までCIサービスを利用することができなかったのですが、werckerはprivateリポジトリでもビルドできるので便利です。</p>

<h2>wercker.ymlの設定</h2>

<p>Photo Leafでは、テストをrspecとcucumberで書いています。cucumberではjavascriptのドライバとしてcapybara-webkitを使ってます。そのためwerckerで動かすには設定が若干面倒です。</p>

<p>werckerにログインして、とりあえず普通にビルドするまでの手順は、以下の記事に詳しいのでこちらを参照してください。</p>

<ul>
<li><a href="http://blog.mah-lab.com/2014/01/08/rails-wercker-heroku-deploy/">Githubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってrails newからHerokuのデプロイまでやってみる</a></li>
</ul>


<p>上記で設定したwercker.ymlに対して、rspecとcucumberを実行するように設定していきます。自分が設定したwercker.ymlは以下のような感じ</p>

<figure class='code'><figcaption><span>wercker.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">box</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">wercker/rvm</span>
</span><span class='line'><span class="c1"># Build definition</span>
</span><span class='line'><span class="c1"># See the Rails section on the wercker devcenter:</span>
</span><span class='line'><span class="c1"># http://devcenter.wercker.com/articles/languages/ruby/settingup-rails4.html</span>
</span><span class='line'><span class="c1"># You will want to define your database as follows:</span>
</span><span class='line'><span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wercker/postgresql</span>
</span><span class='line'><span class="c1"># See more about services on our devcenter:</span>
</span><span class='line'><span class="c1"># http://devcenter.wercker.com/articles/services/</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">steps</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="c1"># Uncomment this to force RVM to use a specific Ruby version</span>
</span><span class='line'>        <span class="c1"># - rvm-use:</span>
</span><span class='line'>        <span class="c1">#       version: 2.1.0</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Make tmp directory</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mkdir tmp</span>
</span><span class='line'>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Enable virtual display</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="p-Indicator">|-</span>
</span><span class='line'>              <span class="no"># Start xvfb which gives the context an virtual display</span>
</span><span class='line'>              <span class="no"># which is required for tests that require an GUI</span>
</span><span class='line'>              <span class="no">export DISPLAY=:99.0</span>
</span><span class='line'>              <span class="no">start-stop-daemon --start --quiet --pidfile /tmp/xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset</span>
</span><span class='line'>
</span><span class='line'>              <span class="no"># Give xvfb time to start. 3 seconds is the default for all xvfb-run commands.</span>
</span><span class='line'>              <span class="no">sleep 3</span>
</span><span class='line'>        <span class="c1"># Install (apt-get) packages</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">install-packages</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">libqtwebkit-dev</span>
</span><span class='line'>        <span class="c1"># A step that executes `bundle install` command</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bundle-install</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># A step that prepares the database.yml using the database in services</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">rails-database-yml</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">postgresql</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># A custom script step, name value is used in the UI</span>
</span><span class='line'>        <span class="c1"># and the code value contains the command that get executed</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">echo ruby information</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>                <span class="no">echo &quot;ruby version $(ruby --version) running&quot;</span>
</span><span class='line'>                <span class="no">echo &quot;from location $(which ruby)&quot;</span>
</span><span class='line'>                <span class="no">echo -p &quot;gem list: $(gem list)&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Set up db</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">RAILS_ENV=test bundle exec rake db:schema:load</span>
</span><span class='line'>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Run RSpec</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bundle exec rspec spec</span>
</span><span class='line'>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Run Cucumber</span>
</span><span class='line'>            <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bundle exec cucumber features</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>16~18行目 - テスト用のtmpディレクトリを作成（rspecのテストでtmpを使ってるので、必要なければ不要です）</li>
<li>6~7,37~38行目 - テスト用のPostgreSQLを実行する</li>
<li>53~55行目 - rspecを実行</li>
<li>57~59行目 - cucumberを実行</li>
</ul>


<h2>capybara-webkitを動かすための注意点</h2>

<p>capybara-webkitを動かすにはX11が使用できる必要があります。なのでXvfbを仮想環境で実行する必要があります。その設定が以下の部分。</p>

<figure class='code'><figcaption><span>wercker.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Enable virtual display</span>
</span><span class='line'>    <span class="l-Scalar-Plain">code</span><span class="p-Indicator">:</span> <span class="p-Indicator">|-</span>
</span><span class='line'>      <span class="no"># Start xvfb which gives the context an virtual display</span>
</span><span class='line'>      <span class="no"># which is required for tests that require an GUI</span>
</span><span class='line'>      <span class="no">export DISPLAY=:99.0</span>
</span><span class='line'>      <span class="no">start-stop-daemon --start --quiet --pidfile /tmp/xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset</span>
</span><span class='line'>
</span><span class='line'>      <span class="no"># Give xvfb time to start. 3 seconds is the default for all xvfb-run commands.</span>
</span><span class='line'>      <span class="no">sleep 3</span>
</span><span class='line'><span class="c1"># Install (apt-get) packages</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">install-packages</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">packages</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">libqtwebkit-dev</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の設定で仮想環境上でXvfbを実行できます。</p>

<h2>まとめ</h2>

<ul>
<li>werckerはGithubとBitbucket両方に対応してるよ！</li>
<li>werckerは無料でprivateリポジトリもビルドできるよ！</li>
<li>capyabara-webkitを使うときにはXvfbを実行してよ！</li>
</ul>

]]></content>
  </entry>
  
</feed>
