<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | zephiransasのチラシの裏]]></title>
  <link href="http://zephiransas.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://zephiransas.github.com/"/>
  <updated>2014-03-24T16:18:18+09:00</updated>
  <id>http://zephiransas.github.com/</id>
  <author>
    <name><![CDATA[Takafumi Yoshida (@zephiransas)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[werckerでrspecとcucumberのCI環境を作る]]></title>
    <link href="http://zephiransas.github.com/blog/2014/01/23/webkit-on-wercker/"/>
    <updated>2014-01-23T14:30:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2014/01/23/webkit-on-wercker</id>
    <content type="html"><![CDATA[<p>去年作った<a href="http://www.photo-leaf.com/">Photo Leaf</a>というWebサービスがあるのですが、これのCI環境を作成したいなぁと思っていたところwerckerというCIサービスを使って構築できたので、そのまとめです。</p>

<h2>werckerとは？</h2>

<p><a href="http://wercker.com/">wercker</a>は<a href="https://travis-ci.org/">TravisCI</a>などに代表されるように、外部でビルド（というかテスト）やデプロイを行ってくれるCI（継続的インテグレーション）サービスです。</p>

<p>使い方としては、リモートリポジトリに変更がpushされた時点でこれをフックして、CIサービス側でテストしたり、場合によってはそのまま本番環境に自動デプロイとかもしてしまえば、変更内容を安全、かつ迅速にリリースできる仕組みが出来上がるわけです。イマドキっぽいですね！</p>

<p>werckerの特徴としては</p>

<h4>GithubとBitbucketに対応</h4>

<p>TravisCIはGithubにあるリポジトリしかビルド対象にできません。Githubのサービスなんだから、当たり前といえば当たり前ですが・・・</p>

<h4>（今のところ）無料</h4>

<p>2014/1/23現在はベータのようです。将来的にはどうなるのかわからないですが、今のところ無料で使えます。制限としては「<strong>1つのビルドが25分以内に完了すること</strong>」ぐらいです。エンタープライズなシステムだとキツイかもですが、そこそこの規模なら問題ないんじゃないでしょうか。</p>

<h4>テストを実行するための仮想環境が豊富に用意されている</h4>

<p>werckerでビルドを実行する際にはBoxという仮想環境内で実行されます。これが予め様々な種類が用意されています。通常のRuby(Rails)の環境とかだけではなく、JavaやAndroidといった環境も用意されています。また<a href="http://devcenter.wercker.com/articles/boxes/">Boxを自分で作る</a>こともできるようです。</p>

<h4>privateリポジトリもビルドできる</h4>

<p>TracisCIは無課金だとprivateリポジトリはビルドできません。しかしwerckerはprivateリポジトリをビルドできます。
Photo LeafのソースはBitbucket上のprivateリポジトリで管理しているため、今までCIサービスを利用することができなかったのですが、werckerはprivateリポジトリでもビルドできるので便利です。</p>

<h2>wercker.ymlの設定</h2>

<p>Photo Leafでは、テストをrspecとcucumberで書いています。cucumberではjavascriptのドライバとしてcapybara-webkitを使ってます。そのためwerckerで動かすには設定が若干面倒です。</p>

<p>werckerにログインして、とりあえず普通にビルドするまでの手順は、以下の記事に詳しいのでこちらを参照してください。</p>

<ul>
<li><a href="http://blog.mah-lab.com/2014/01/08/rails-wercker-heroku-deploy/">Githubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってrails newからHerokuのデプロイまでやってみる</a></li>
</ul>


<p>上記で設定したwercker.ymlに対して、rspecとcucumberを実行するように設定していきます。自分が設定したwercker.ymlは以下のような感じ</p>

<p>``` yml wercker.yml
box: wercker/rvm</p>

<h1>Build definition</h1>

<h1>See the Rails section on the wercker devcenter:</h1>

<h1><a href="http://devcenter.wercker.com/articles/languages/ruby/settingup-rails4.html">http://devcenter.wercker.com/articles/languages/ruby/settingup-rails4.html</a></h1>

<h1>You will want to define your database as follows:</h1>

<p>services:</p>

<pre><code>- wercker/postgresql
</code></pre>

<h1>See more about services on our devcenter:</h1>

<h1><a href="http://devcenter.wercker.com/articles/services/">http://devcenter.wercker.com/articles/services/</a></h1>

<p>build:</p>

<pre><code>steps:
    # Uncomment this to force RVM to use a specific Ruby version
    # - rvm-use:
    #       version: 2.1.0
    - script:
        name: Make tmp directory
        code: mkdir tmp

    - script:
        name: Enable virtual display
        code: |-
          # Start xvfb which gives the context an virtual display
          # which is required for tests that require an GUI
          export DISPLAY=:99.0
          start-stop-daemon --start --quiet --pidfile /tmp/xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset

          # Give xvfb time to start. 3 seconds is the default for all xvfb-run commands.
          sleep 3
    # Install (apt-get) packages
    - install-packages:
        packages: libqtwebkit-dev
    # A step that executes `bundle install` command
    - bundle-install

    # A step that prepares the database.yml using the database in services
    - rails-database-yml:
        service: postgresql

    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: echo ruby information
        code: |
            echo "ruby version $(ruby --version) running"
            echo "from location $(which ruby)"
            echo -p "gem list: $(gem list)"

    - script:
        name: Set up db
        code: RAILS_ENV=test bundle exec rake db:schema:load

    - script:
        name: Run RSpec
        code: bundle exec rspec spec

    - script:
        name: Run Cucumber
        code: bundle exec cucumber features
</code></pre>

<p>```</p>

<ul>
<li>16~18行目 &ndash; テスト用のtmpディレクトリを作成（rspecのテストでtmpを使ってるので、必要なければ不要です）</li>
<li>6~7,37~38行目 &ndash; テスト用のPostgreSQLを実行する</li>
<li>53~55行目 &ndash; rspecを実行</li>
<li>57~59行目 &ndash; cucumberを実行</li>
</ul>


<h2>capybara-webkitを動かすための注意点</h2>

<p>capybara-webkitを動かすにはX11が使用できる必要があります。なのでXvfbを仮想環境で実行する必要があります。その設定が以下の部分。</p>

<p>``` yml wercker.yml
&ndash; script:</p>

<pre><code>name: Enable virtual display
code: |-
  # Start xvfb which gives the context an virtual display
  # which is required for tests that require an GUI
  export DISPLAY=:99.0
  start-stop-daemon --start --quiet --pidfile /tmp/xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset

  # Give xvfb time to start. 3 seconds is the default for all xvfb-run commands.
  sleep 3
</code></pre>

<h1>Install (apt-get) packages</h1>

<ul>
<li>install-packages:
  packages: libqtwebkit-dev
```</li>
</ul>


<p>上記の設定で仮想環境上でXvfbを実行できます。</p>

<h2>まとめ</h2>

<ul>
<li>werckerはGithubとBitbucket両方に対応してるよ！</li>
<li>werckerは無料でprivateリポジトリもビルドできるよ！</li>
<li>capyabara-webkitを使うときにはXvfbを実行してよ！</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2013に参加してきた]]></title>
    <link href="http://zephiransas.github.com/blog/2013/06/04/attended-rubykaigi2013/"/>
    <updated>2013-06-04T13:27:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/06/04/attended-rubykaigi2013</id>
    <content type="html"><![CDATA[<p>5/30〜6/1まで、東京国際交流館で開催されたRubyKaigi2013に参加してきました。</p>

<p><img src="http://farm3.staticflickr.com/2886/8924755070_a89349e1a3_n.jpg"/></p>

<p>RubyKaigiはRuby界では最大級のイベントですが、一度2011年をもって終了しています。それが今回はいろいろコンセプトを変えて復活した、ということで自分も参加してきました。</p>

<h2>RubyKaigiについて</h2>

<p>自分は今回が初参加なので、以前のRubyKaigiとの比較はできないのですが、他とは違うなと感じたのは以下のところ。</p>

<ul>
<li>参加費が（それなりに）高い</li>
</ul>


<p><img src="http://farm6.staticflickr.com/5346/8924581912_d947d91aa0_n.jpg"/></p>

<p>自分はSuper Early Birdでの参加申し込みだったので¥20,000でしたが、普通に登録すると¥35,000です。国内で行われるカンファレンスとしては少々高めです。といっても海外に比べたら、まだまだ安いのですが・・・</p>

<p>この値段設定についてもいろいろ意見はあるようですが、RubyKaigiクラスになると、ものすごい人数が参加したいと思うわけです。しかし、そのイベントを運営しているのはあくまでボランティアの人たちですので、そういった状況もあって「この値段を払ってでも参加したい」と思わせるコアなRubyistを呼びたかったのではないかな？と想像しています。</p>

<ul>
<li>メイン言語は英語</li>
</ul>


<p><img src="http://farm6.staticflickr.com/5457/8924657854_2a9796348e_n.jpg"/></p>

<p><a href="https://twitter.com/kazuhisa1976">@kazuhisa1976</a>氏曰く「世界を対象としたRubyのカンファレンスが、たまたま東京で開催された」</p>

<p>今回のRubyKaigiはインターナショナルカンファレンスとして開催されたので、英語がメイン言語です。<a href="http://rubykaigi.org/2013/">公式サイト</a>も英語ですし、セッションのほとんどが英語です。また、参加者も600人ほどいたそうですが、そのうち100人ほどが海外からの参加です。日本人スピーカーの場合に、日本語でセッションを行うこともありましたが、海外の人向けに日本語から英語への同時通訳（！）が準備されていて、このあたりもインターナショナルカンファレンスなんだなーとおもったことろです。</p>

<h2>セッションについて</h2>

<p>個人的に記憶に残ったセッションは</p>

<ul>
<li>The Future of JRuby?</li>
<li>High Performance Rails</li>
</ul>


<p>の2つ。</p>

<p>JRubyのセッションではJRubyのコアメンバーである、<a href="https://twitter.com/tom_enebo">Thomas E. Enebo</a>氏と、<a href="https://twitter.com/headius">Charles O. Nutter</a>氏が登壇。JRubyの高速化などについて話をしていました。で、気になったのがスライド中あったDalvik Generationという文字！将来JRubyでDalvikVMをサポートするような日が来るんでしょうかねぇ・・・</p>

<p>High Performance Railsではクックパッドのエンジニア、成田一成氏によるRailsの高速化の話。超巨大なクックパッドを如何にして、パフォーマンスアップさせているかという内容。</p>

<p><a href="https://speakerdeck.com/mirakui/high-performance-rails-long-edition">こちら</a>の資料にはセッションで話した内容に、キャッシュの話がプラスアルファされていますので、参考までに。</p>

<h2>Conclusion</h2>

<p>自分にとってはこれが初めてのRubyの大きなカンファレンスへの参加でした。最初はJavaとはまた違う雰囲気なんだろうなぁと思っていましたが、それほど大きな違いというのは正直感じませんでした。当然、自分はRubyのコミュニティには知り合いがいるわけではないので、ボッチ率高かったのですがw</p>

<p>ちなみにRubyKaigiは2014年も開催されるらしいです。今から楽しみですね。</p>

<p><img src="http://farm4.staticflickr.com/3830/8924877780_d5b2395e65_n.jpg"/></p>

<p>RubyKaigiで撮った写真はこちらにまとめてます。
<a href="http://www.flickr.com/photos/zephiransas/sets/72157633895505417/">http://www.flickr.com/photos/zephiransas/sets/72157633895505417/</a></p>
]]></content>
  </entry>
  
</feed>
