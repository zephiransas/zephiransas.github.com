<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gradle | zephiransasのチラシの裏]]></title>
  <link href="http://zephiransas.github.io/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://zephiransas.github.io/"/>
  <updated>2017-09-08T14:32:42+09:00</updated>
  <id>http://zephiransas.github.io/</id>
  <author>
    <name><![CDATA[Takafumi Yoshida (@zephiransas)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CircleCIでGradleのテストを並列実行する]]></title>
    <link href="http://zephiransas.github.io/blog/2017/03/10/ciecleci-and-gradle/"/>
    <updated>2017-03-10T09:32:48+09:00</updated>
    <id>http://zephiransas.github.io/blog/2017/03/10/ciecleci-and-gradle</id>
    <content type="html"><![CDATA[<p>現在開発を行っているプロジェクトでは、Spring Bootを使って開発を行っているのですが、そこでのテストをCI環境で実行できるよう設定を行ったので、その手順を書いておきます。</p>

<h2>CircleCIで普通にテストできるようにする</h2>

<p>最初は並列ではなく、1つのコンテナを使ってCircleCIでテストできるように設定を行います。まずcircle.ymlを以下のように準備。</p>

<pre><code class="yml circle.yml">machine:
  java:
    version: openjdk8
  timezone:
    Asia/Tokyo
  environment:
    _JAVA_OPTIONS: "-Xms512m -Xmx1024m"
    GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx1024m -XX:+HeapDumpOnOutOfMemoryError"'
  post:
    - sudo service postgresql stop

dependencies:
  override:
    - ./gradlew testClasses

database:
  post:
    - mysql -e 'create database [データベース名];'
    # flywayなどでのマイグレーション

test:
  override:
    - ./gradlew test
  post:
    - mkdir -p $CIRCLE_TEST_REPORTS/junit/ &amp;&amp; find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} $CIRCLE_TEST_REPORTS/junit/ \;:
</code></pre>

<h3>メモリ割り当てについて</h3>

<p>machine.environmentでJAVA_OPTIONSに"-Xms512m -Xmx1024m"を指定しています。これはCircleCIでは1つのコンテナには4Gのメモリが割当られており、その上限をこえると、コンテナがフリーズして、10分経過するとテスト失敗になるという現象に対応するためです。合わせてGRADLE_OPTSにも同様の設定をおこなっています。</p>

<p>このあたりの設定も状況によっては増やせる場合もありますので、テストを実行しながら、調整してみてください。</p>

<ul>
<li><a href="https://circleci.com/docs/1.0/oom/">Your build hit the 4G memory limit</a></li>
</ul>


<h3>使わないデータベースを止める</h3>

<p>CircleCIではデフォルトでPostgreSQLとMySQLがインストールされたコンテナが準備されます。machine.postで使わないデータベースを止めることで、貴重なメモリの使用量を抑えることができます。</p>

<p>今回テスト対象のデータベースはMySQLですので、PostgreSQLを止めてメモリを節約します。</p>

<h3>dependenciesでライブラリをダウンロードしておく</h3>

<p>CircleCIではdatabaseサイクルが終わったタイミングで、次回のビルドを高速に実行できるよう、依存ライブラリなどをキャッシュする仕組みがあります。</p>

<p>しかしGradleではテストを実行する直前まで依存ライブラリはダウンロードされず、通常のままだと依存ライブラリをキャッシュに含めることができません。</p>

<p>そこでdependencies.overrideにてtestClassesタスクを実行しておきます。こうすることで、依存ライブラリがダウンロードされ、databaseサイクル終了後にキャッシュが作成されるようになります。</p>

<h3>Spring Bootのprofileはciにする</h3>

<p>CircleCIで動かす場合はデータベースの接続先が開発環境などとは変わるはずですので、CircleCI専用のapplication.ymlをapplication-ci.ymlとして作成します。</p>

<pre><code class="yml application-ci.yml">spring:
  profiles:
    active: ci
  datasource:
    url: jdbc:mysql://localhost:3306/{データベース名}
    username: ubuntu
    password:
    driverClassName: com.mysql.jdbc.Driver
</code></pre>

<p>CircleCIのMySQLには上記の設定で接続可能です。次にテスト実行時に</p>

<pre><code class="bash">SPRING_PROFILES_ACTIVE=ci ./gradlew test
</code></pre>

<p>とすることで、application-ci.ymlのデータベース接続情報を使用するようになります。</p>

<h3>テスト実行結果を集約する</h3>

<p>test.postにて、テスト結果のxmlを$CIRCLE_TEST_REPORTSにコピーしておきます。こうすることで、CircleCIの画面からテスト結果を簡単に見ることができます。</p>

<pre><code class="bash">test:
  post:
    - mkdir -p $CIRCLE_TEST_REPORTS/junit/ &amp;&amp; find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} $CIRCLE_TEST_REPORTS/junit/ \;:
</code></pre>

<ul>
<li><a href="https://circleci.com/docs/1.0/test-metadata/#gradle-junit-results">Collecting test metadata</a></li>
</ul>


<h2>並列テストが実行できるようにする</h2>

<p>次にCircleCI+Gradleで並列テストをすることを考えてみます。</p>

<p>一般的に並列テストを行う場合は、テスト対象のクラスを取得し、これをノードそれぞれに均等に割り振ることでテストを分散して実行します。</p>

<p>Gradleにはデフォルトではテスト対象のクラスフィルタリングする昨日はあるのですが、対象クラスを個別に指定する方法はありません。</p>

<p><a href="https://docs.gradle.org/current/userguide/java_plugin.html#test_filtering">https://docs.gradle.org/current/userguide/java_plugin.html#test_filtering</a></p>

<p>ですので今回はGradle実行時に-Pオプションを指定し、以下のようにして対象クラスを一括して渡す方法を採用しています。</p>

<pre><code class="bash">./gradlew test -PtestFiles=./src/test/java/com/example/HogeTest ./src/test/java/com/example/FugaTest ....以下テスト対象クラスを列挙
</code></pre>

<p>まずは、このオプションを組み立てつつ、gradleｗ実行する専用のシェルスクリプト（circleci.sh)を準備します。</p>

<pre><code class="bash circleci.sh">testFiles=$(find ./src/test -name *Test.java | sort | awk "NR % ${CIRCLE_NODE_TOTAL} == ${CIRCLE_NODE_INDEX}")
echo $testFiles
SPRING_PROFILES_ACTIVE=ci ./gradlew :webapp:test -PtestFiles="$testFiles"
</code></pre>

<p>CircleCI上でビルドに使用しているノード数は環境変数CIRCLE_NODE_TOTALから、自身のノード番号は環境変数CIRCLE_NODE_INDEXから取得できますので、これをawkから利用しつつ、テスト対象クラスを分散させます。</p>

<p>次にbuild.gradle内では-Pオプションで渡されたtestFilesのみをテスト対象にするよう、includeTestsMatchingを使って設定を行います。</p>

<pre><code class="bash build.gradle">test {
  if (project.hasProperty("testFiles")) {
      ArrayList files = project.getProperties().get("testFiles")
              .replaceAll("./src/test/java/", "")
              .replaceAll("/", ".")
              .replaceAll(".java", "")
              .split("\\s+")
      for(String file : files) {
          println file
          filter {
              includeTestsMatching file
          }
      }
  }  
}
</code></pre>

<p>こうすることで-PtestFilesで指定されたもののみ、テストを行うことができます。</p>

<p>最後に、並列実行できるようcircle.ymlを修正します。</p>

<pre><code class="yml circle.yml">test:
  override:
    - ./circleci.sh:
        parallel: true
  post:
    - mkdir -p $CIRCLE_TEST_REPORTS/junit/ &amp;&amp; find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} $CIRCLE_TEST_REPORTS/junit/ \;:
        parallel: true
</code></pre>

<p>テストは先ほど作成したcircle.shを実行するようにしparallel: trueを付与して並列実行するようにします。<strong>parallel: trueはインデント4つであることに注意！</strong></p>
]]></content>
  </entry>
  
</feed>
