<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | zephiransasのチラシの裏]]></title>
  <link href="http://zephiransas.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://zephiransas.github.com/"/>
  <updated>2014-03-24T16:18:18+09:00</updated>
  <id>http://zephiransas.github.com/</id>
  <author>
    <name><![CDATA[Takafumi Yoshida (@zephiransas)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java8で始めるLambda（基礎編）]]></title>
    <link href="http://zephiransas.github.com/blog/2014/03/12/java8lambda/"/>
    <updated>2014-03-12T16:33:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2014/03/12/java8lambda</id>
    <content type="html"><![CDATA[<p>まもなくリリース予定のJava8。その中でも最も大きなインパクトを持つというProject Lambdaについて、ここ数日調べてみました。
今からLambdaをはじめようとする人向けに、何回かに分けてまとめてみたいと思います。</p>

<h2>インターフェースの宣言</h2>

<p>まずは手始めに、引数で指定された文字列の前後に"[&ldquo;と&rdquo;]&ldquo;をつける処理を考えてみましょう。</p>

<p>Lambdaを使用するには、まずインターフェースを宣言する必要があります。上記の仕様から考えると</p>

<ul>
<li>引数はString型の引数が1つ</li>
<li>戻り値もString型</li>
</ul>


<p>となるので、この場合は以下の様なインターフェースを宣言します。</p>

<p><code>java LambdaInterface.class
public interface LambdaInterface {
  String method(String value);
}
</code></p>

<p>ここで注意するべきことが1つ。Java8のLambdaとして使えるインターフェースには決まりがあるのですが、もっとも重要なのが<strong>インターフェースのメソッドが1つだけ</strong>ということです。インターフェースのメソッドが2つ以上ある場合には、それをLambdaとして使用することはできません。</p>

<p>これはLambdaの実装部分を書く際に、どのメソッドの内容を実装しているのかを書かないため、Lambdaを書いた場合は<strong>そのインターフェースがもつ唯一のメソッド</strong>に対して実装をおこなったとみなすからです。</p>

<p>一見、これは不便なように思ってしまうかもしれないですが、普段使うパターンのインターフェースのほとんどがjava.util.functionパッケージ内で用意されているので、実際にはそれ程不便ではありません。むしろ自分でインターフェースを用意するほうが稀かもしれません。</p>

<h2>Lambdaを使った記述</h2>

<p>早速、先に宣言したインターフェースを使ってLambdaを書いてみましょう。Lambdaを記述する際の基本となる文法は、以下のようになっています。</p>

<p><code>java
[インターフェース名] [lambda式の名前] = (引数の型 引数,...) -&gt; {
  （実装）
};
</code></p>

<p>よってLambdaInterfaceを使って書くと、以下のようになります。</p>

<p>``` java Sample.class
public class Sample {</p>

<p>  public static void main(String&hellip; args) {</p>

<pre><code>LambdaInterface lambda = (String value) -&gt; {
  return "[" + value + "]";
};
System.out.println(lambda.method("HOGE"));
</code></pre>

<p>  }</p>

<p>}
```
実行すると"[HOGE]&ldquo;と出力されていることがわかると思います。</p>

<p>このように、匿名クラスを使った場合などと比べて、少ない記述量で実装できると思います。</p>

<h2>Lambdaの省略記法</h2>

<p>また、このLambdaの記述では、以下のルールで、省略した記述を使用することもできます。</p>

<ul>
<li>引数の型は（型推論できるので）省略できる</li>
<li>引数が1つの場合は、引数の()を省略できる</li>
<li>但し、引数なしの場合は省略できない</li>
<li>実装部分が1行の場合は、{}を省略可能。さらにreturn文も不要</li>
</ul>


<p>上記ルールに沿ったLambdaであれば省略可能です。ですので先ほどのコードも以下の様に省略できます。</p>

<p>``` java Sample.class
public class Sample {</p>

<p>  public static void main(String&hellip; args) {</p>

<pre><code>LambdaInterface lambda = value -&gt; "[" + value + "]";
System.out.println(lambda.method("HOGE"));
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>かなりスッキリしましたね！</p>

<h2>java.util.functionで提供されるインターフェースを使う</h2>

<p>先ほど少し触れましたが、上記のLambdaInterfaceのような普段Lambdaとして使うインターフェースはjava.util.function内にいろいろ用意されています。
例えば、LambdaInterfaceの様に「String型の引数を1つ取り、String型の戻り値を持つ」インターフェースはjava.utl.functionパッケージ内にあるFunctionインターフェースを使います。</p>

<p><code>
public interface Function&lt;T, R&gt; {
  R apply(T t);
}
</code></p>

<p>最初の型引数Tには1つ目の引数の型、2つ目の型引数Rには戻り値の型を指定します。またapplyメソッドが実装対象となるメソッドです。</p>

<p>先のコードをFunctionインターフェースを使って書き直すと。</p>

<p>``` java Sample.class
public class Sample {</p>

<p>  public static void main(String&hellip; args) {</p>

<pre><code>Function&lt;String, String&gt; lambda = value -&gt; "[" + value + "]";
System.out.println(lambda.apply("HOGE"));
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>となります。Functionの他にも</p>

<ul>
<li>引数を1つ持ち、戻り値がないConsumer</li>
<li>引数がなく、戻り値があるSupplier</li>
<li>引数を1つ持ち、戻り値がboolean型のPredicate</li>
<li>引数を1つ持ち、かつこれが戻り値と同じ場合のUnaryOperator</li>
</ul>


<p>などのインターフェースが提供されています。</p>

<p>どういった場合に、どのインターフェースを使えばよいかについては、Qiitaにまとめておきましたので、参考にしてみてください。</p>

<ul>
<li><a href="http://qiita.com/zephiransas/items/3b03af4f9044df3182d0">Java8関数型インターフェース チートシート</a></li>
</ul>


<p>通常は、ここで提供されているインターフェースを使い、それ以外のパターンが発生した場合のみ、自分でインターフェースを宣言するほうがよいでしょう。</p>

<h2>メソッド参照を使う</h2>

<p>メソッド参照もJava8で新しく追加された機能です。</p>

<p>メソッド参照を使うと、他のクラスのクラスメソッドやインスタンスメソッドを、Lambdaの実装として利用することができるようになります。メソッド参照はドット(.)でメソッドを呼ぶ代わりに、コロン2つで呼び出します。</p>

<p><code>
</code></p>

<p>例えば先の文字列の前後にカッコをつけるメソッドが以下のようにSampleクラスのstaticメソッドとして定義されていた場合</p>

<p>``` java Sample.class
public class Sample {</p>

<p>  public static void main(String&hellip; args) {</p>

<pre><code>...
</code></pre>

<p>  }</p>

<p>  private static String add(String value) {</p>

<pre><code>return "[" + value + "]";
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>Sample.addをメソッド参照するには</p>

<p>``` java Sample.class
public class Sample {</p>

<p>  public static void main(String&hellip; args) {</p>

<pre><code>Function&lt;String, String&gt; lambda = Sample::add;
System.out.println(lambda.apply("HOGE"));
</code></pre>

<p>  }</p>

<p>  private static String add(String value) {</p>

<pre><code>return "[" + value + "]";
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>ここではstaticなクラスメソッドを使いましたが、インスタンスメソッドの場合も同様に、インスタンスを生成し、そこからメソッド参照をすることができます。</p>

<p>``` java Sample.class
public class Sample {</p>

<p>  public static void main(String&hellip; args) {</p>

<pre><code>Sample sample = new Sample();
Function&lt;String, String&gt; lambda = sample::add;
System.out.println(lambda.apply("HOGE"));
</code></pre>

<p>  }</p>

<p>  public static String add(String value) {</p>

<pre><code>return "[" + value + "]";
</code></pre>

<p>  }</p>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Day Tokyo 2013報告会@岡山を開催してきた]]></title>
    <link href="http://zephiransas.github.com/blog/2013/06/18/jdt2013-okayama-report/"/>
    <updated>2013-06-18T16:24:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/06/18/jdt2013-okayama-report</id>
    <content type="html"><![CDATA[<p>2013年6月15日（土）に、奉還町リブラホールにて「<a href="http://local.aguuu.com/events/15432">Java Day Tokyo 2013報告会@岡山</a>」を開催してきました。</p>

<p>自分は「Java Day Tokyo2013基調公演より」と題して、報告をさせていただきました。</p>

<script async class="speakerdeck-embed" data-id="ebf8f340b7a20130a14b7e8eb314bbb5" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>当日のTwitterのまとめは、<a href="http://togetter.com/li/518745">こちら</a></p>

<p>その他、岡山Javaユーザ会の運営メンバーと、<a href="https://twitter.com/soudai1025">@soudai1025氏</a>にはJJUG CCCの感想についてもセッションをしていただきました。また角田さんの会社の同僚お二人にもJava Day Tokyoに参加しての感想を話していただきました。</p>

<p>また東京からは櫻庭さんにも来て頂き、JJUG CCCでセッションされた「Project Lambda Essential」を再演していただきました。Java8で最も注目されている機能、Project Lambdaの大事なところを丁寧にお話をしていただきましたので、参加者の皆さんのLambdaに対する理解が深まったものと思います。</p>

<p>この後の懇親会でも次のネタについて、いくつか話あったんですが、個人的には次はハンズオンをやりたいかなーと思っています。</p>

<p>いまのセッション形式もいいのですが、それだとどうしても参加者同士で交流が深まらないように思っていて、これを改善するためにはハンズオン形式のほうがいいのではないだろうか、と考えています。
で、実際にやるとすればJavaEEとかJavaFXあたりを題材にして、ハンズオンをやろうと考えています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GlassFishのアップグレード方法]]></title>
    <link href="http://zephiransas.github.com/blog/2013/05/24/how-to-upgrade-gf/"/>
    <updated>2013-05-24T15:46:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/05/24/how-to-upgrade-gf</id>
    <content type="html"><![CDATA[<p>会社で使ってるJenkinsさんはGlassFish上で動いているんですが、これのアップグレードを行ったので、そのメモ。</p>

<p>具体的にはGlassFish 3.1.1からGlassFish 3.1.2へアップグレードしました。</p>

<h2>updatetoolのインストール</h2>

<p>まずはアップグレードに使用するupdatetoolをインストールします。</p>

<p>方法はasadminと同じディレクトリにある、updatetoolを実行するだけ。</p>

<p>初めてupdatetoolコマンドを実行した際に、updatetoolをインストールするか聞いてきますので、yを押してインストールするだけです。</p>

<p>ちょっと時間がかかるので、アニメでも見ながらゆっくり待ちましょう。</p>

<h2>updatetoolからGlassFishのアップグレード</h2>

<p>上記の手順でupdatetoolのインストールが終了したら、もう一度updatetoolコマンドを実行します。するとGUIが立ち上がって来ますので、以下のようにするだけ。</p>

<p><img src="/images/20130524/updatetool.png" alt="updatetool" /></p>

<p>あとは</p>

<p><code>bash
$ ./asadmin version
</code></p>

<p>などで、アップグレードできていることを確認しましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Day Tokyo 2013に参加してきた（セッション）]]></title>
    <link href="http://zephiransas.github.com/blog/2013/05/19/javadaytokyo2/"/>
    <updated>2013-05-19T00:17:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/05/19/javadaytokyo2</id>
    <content type="html"><![CDATA[<p>前回の基調講演につづいて、今回は自分が参加したセッションのレポートです。</p>

<h2>Ask the Experts</h2>

<p>基調講演にも登壇したJavaSE,JavaFX,JavaEEの各キーパーソンに、直接質問できるセッションです。ちょうど昼の時間だったので、本来は昼食をとりつつ受けるセッションなんですが、うっかり自分は昼食を仕入れるのを忘れてました・・・</p>

<p>JavaSEの担当は、Simon Ritter氏</p>

<p><img src="http://farm8.staticflickr.com/7288/8740173841_d492ab6090_n.jpg"/></p>

<p>JavaFXの担当は、Jim Weaver氏</p>

<p><img src="http://farm8.staticflickr.com/7285/8741292898_42456c92d5_n.jpg"/></p>

<p>JavaFXの担当は、Arun Gupta氏</p>

<p><img src="http://farm8.staticflickr.com/7281/8741293406_f87d358552_n.jpg"/></p>

<p>通訳の方が居たので、もちろん日本語で質問できたのですが、意外と質問が少ないような感じでした。</p>

<p>印象に残ったのは、最後のJavaEEの質問で</p>

<ul>
<li>Q「JavaEEはいろんな仕様で構成されているが、最低限どれを使ってればJavaEEを使ってることになるのか？」</li>
</ul>


<p>という質問がありました。（ちょっと意地悪な質問な気もしますがw）それに対してArunは</p>

<ul>
<li>A「難しい質問だけど、強いて言えばServletかな？あ、でも、Strutsはダメだね！」</li>
</ul>


<p>と返して、会場は大爆笑でしたw</p>

<h2>Javaプラットフォームにおける Batch アプリケーション (JSR 352)</h2>

<p>JavaEE7で導入されるJBatchのセッション。担当はArun氏です。</p>

<p><img src="http://farm8.staticflickr.com/7286/8741295358_cce2037082_n.jpg"/></p>

<p>このJBatchは、エンタープライズアプリケーションでよくある、バッチ処理を効率よく書くためのフレームワークです。セッションを受けつつTLを眺めてて知ったのですが、どうもSpring Batchと非常によく似た仕組みのようです。設定をXMLで記述していくのが少々面倒な気もしますが、この辺りが改善されていけば、バッチ処理のスタンダードになるかなーという感じ。JavaEE準拠のサーバはもちろん、スタンドアロンの環境でも実行可能との事。</p>

<h2>エンタープライズ環境における並列処理の実装方法について</h2>

<p>我らの王子こと、寺田さんによるConcurrency Utilityのセッション。</p>

<p>以前からJavaではThreadを使って、並列処理を書くことが可能でしたが、実際にはなかなか難しいものでした。これを簡単に行えるのがConcurrency Utilityです。実際に以下のデモを会場で見せていました。</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/s9OB3lDPwtg?rel=0" frameborder="0" allowfullscreen></iframe>


<p>詳細は<a href="http://yoshio3.com/2013/05/15/concurrency-utilities-for-ee-7/">寺田氏のブログ</a>に詳しいですが、Concurrncy Utilityを使うことで、CPUリソースを無駄なく使うコードを、簡単に実装することができるようになります。</p>

<h2>Java the Night</h2>

<p><img src="http://farm8.staticflickr.com/7285/8740181743_e4b88c0b29_n.jpg"/></p>

<p>最後はお楽しみ（？）のJava the Night。日本のJava界を代表するエンジニアがLT&amp;デモを行うという趣向です。
一人8分の持ち時間でした。どのLTもさすがはJava界のスーパーエンジニア！と唸らせる、最高に面白い内容でした。
前回のJavaOne Tokyoの時もそうでしたが、この最後のLT枠に参加せずして、Javaのイベントに参加したとは言えないくらい、充実した内容です。
なかでも印象に残ったのは、北海道の大学生2人。</p>

<p><img src="http://farm8.staticflickr.com/7283/8741304934_655e6abe63_n.jpg"/></p>

<p>プレゼンソフトなんですが、JavaFXで様々なエフェクトをつけることができるというものでした。彼らの初々しい（！）発表を聞きながら、その将来に期待をするとともに、まだまだ自分も頑張らなければ、と想いを新たにしました。</p>

<h2>JavaSE7 日本語ドキュメント提供開始</h2>

<p>そしてJava the Night終了後、寺田さんから重大な発表がありました。それはJavaSE7の日本語ドキュメントの提供を開始した、とのアナウンスでした。実はJavaSE7リリース後、しばらくしても日本語ドキュメントは提供されていませんでした。様々な方面から要望は上がっていましたが、残念ながら日本語ドキュメントは当分は提供されないという決定が、以前なされました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>影響度が大きい事を十分承知で申し上げます。誠に残念ながら直近で、提供の予定はございません。“@<a href="https://twitter.com/skrb">skrb</a>: @<a href="https://twitter.com/yoshioterada">yoshioterada</a> それよりもJava SE 7の日本語のJavadocはリリースされないのでしょうか？”</p>&mdash; Terada Yoshioさん (@yoshioterada) <a href="https://twitter.com/yoshioterada/status/183876594010558464">2012年3月25日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>その後、有志を中心にボランティアで日本語化しようかといった動きもありましたが、本格化するには至りませんでした。</p>

<p>そして、Java Day Tokyoにてサプライズとでもいいましょうか、<a href="http://yoshio3.com/2013/05/14/%EF%BD%8A%EF%BD%81%EF%BD%96%EF%BD%81-%EF%BD%93%EF%BD%85%EF%BC%97%EF%BD%81%EF%BD%90%EF%BD%89%E6%97%A5%E6%9C%AC%E8%AA%9E%E7%89%88%E6%8F%90%E4%BE%9B%E9%96%8B%E5%A7%8B/">JavaSE7の日本語ドキュメント提供開始</a>のアナウンスがされました。</p>

<p>JavaSE7がリリースされて随分経ちますが、これでようやくスタートライン。Java7を普通に使ってもらう環境が、日本でも整ったといった感じです。いろいろ想いはありますが、日本オラクル＆寺田さんの努力に敬意を表したいと思います。</p>

<h2>Conclusion</h2>

<p><img src="http://farm8.staticflickr.com/7286/8740206373_002b31196d_n.jpg"/></p>

<p>以上、2回に分けてJava Day Tokyo 2013の模様をまとめました。</p>

<p>1年ぶりにJavaのカンファレンスに参加して「自分はやっぱり、このJavaのコミュニティが好きなんだなぁ」という思いを強くしました。もちろん他のコミュニティでも似たような経験はできるとは思いますが、古参から新参まで多くのカラーが集まり、多種多様な人がいるコミュニティも珍しいように思います。そのような環境でエンジニアをやれるのは、とても嬉しいことです。</p>

<p>さて、岡山Javaユーザ会でも、Java Day Tokyo 2013報告会@岡山と題して、報告会をやります。</p>

<p>お申込みは<a href="http://local.aguuu.com/events/15432">こちら</a>からです。</p>

<p>お近くの方は、是非ご参加ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Day Tokyo 2013に参加してきた（基調講演）]]></title>
    <link href="http://zephiransas.github.com/blog/2013/05/16/javadaytokyo2013/"/>
    <updated>2013-05-16T18:01:00+09:00</updated>
    <id>http://zephiransas.github.com/blog/2013/05/16/javadaytokyo2013</id>
    <content type="html"><![CDATA[<p><img src="http://farm8.staticflickr.com/7284/8740166245_72f3003e48_n.jpg"/></p>

<p>前日、5月14日に秋葉原UDXにて開催されたJava Day Tokyo2013に参加してきました。
JavaOne Tokyo2012が開催されてからほぼ1年。去年イベントが終わった時には「もう、こういったイベントは当分ないだろうなぁ」とか思っていたので、JavaOneではないにしてもちゃんとイベントを開催してくれた日本オラクル＆寺田さんには感謝ですね。</p>

<h2>Keynoteの報告</h2>

<p><img src="http://farm8.staticflickr.com/7294/8740179955_a8a975c375_n.jpg"/></p>

<p>基本的には去年のサンフランシスコでのJavaOneとかで発表された内容とかぶる感じ。ただ、普段はこういった最新情報をチェックしていない人たちでも、イベントであれば直に最新情報を聞けるので、そういった人たちにリーチできるだけでも、意味はあるかと。
残念だったのは最初、写真撮影がNGにされていたこと。</p>

<blockquote class="twitter-tweet" lang="ja"><p>写真撮影禁止とか、俺の仕事＼(^o^)／ｵﾜﾀ　<a href="https://twitter.com/search/%23jdt2013">#jdt2013</a></p>&mdash; Takafumi Yoshida✅さん (@zephiransas) <a href="https://twitter.com/zephiransas/status/334111626368270336">2013年5月14日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>正直コレには参りました。参加者には自分のように地方のコミュニティに属していて、後日報告会をやろうと企画してる人も多いはず。またOracleとしても「Javaを前進させるためにはコミュニティの力が必要です！」と言ってるにもかかわらず、これではなぁ・・・</p>

<p>一応、Keynoteの半分を過ぎたあたりで、寺田さんが取り計らってくれたのか</p>

<blockquote class="twitter-tweet" lang="ja"><p>ただ今から写真全面OKにしました。 <a href="https://twitter.com/search/%23jdt2013">#jdt2013</a></p>&mdash; Terada Yoshioさん (@yoshioterada) <a href="https://twitter.com/yoshioterada/status/334137042609004544">2013年5月14日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とはなりました。なので前半の写真がありません(´・ω・`)</p>

<p>まずは日本オラクルの伊藤敬氏が壇上に。
前回のJavaOne Tokyoは六本木のアカデミーヒルズで開催されましたが「クール・ジャパンの代表格であるアキハバラでJavaのイベントをやったら、どうなるのか？その化学反応も楽しんで欲しい」とのこと。</p>

<p>最初に登壇したのはJava Technology AmbassadorのSimon Ritter氏。JavaSEの最新情報について公演しました。
2012年7月にリリースされたJava7は、Oracleの元でリリースされた最初のメジャーアップデート。世界中で利用されていることを紹介していました。
また、Windows,Mac OSX,Linuxをはじめ、ARMアーキテクチャ上でも動作することを紹介し、Javaがいまや様々なデバイスで動作していることも強調。
そして、（遅れはしたものの）2014年2月には正式リリース予定のJava8についても言及し、その中核はLambdaであるとのこと。Lambdaを使用することのメリットの一つとして、並列処理を容易に書けることを紹介していました。
現在、Java8はプレビュー版が提供されているので、これを通じて多くのフィードバックをして欲しい、とも言っていました。
今後Javaは2年サイクルでメジャーアップデートを行う予定で、そうなるとJava9は2016年リリースになるだろうとも。</p>

<p>次に壇上に上がったのはOracleのNandini Ramani氏。JavaFXや組み込みJavaなどについて公演しました。
Java8からはJavaFXはJavaFX8として、標準でJDKにバンドルされるようになります。そういった意味でもJavaFXはこれから注目の技術になりそうな予感です。</p>

<p>途中、Nandini氏は壇上にJim Weaver氏を招き、Jimが手元でJavaFXのデモを行なっていました。なぜかデモしてた機材がSurface Proでしたw
球体や円柱を3Dで表示し、それにことなる光源を当てて表示するといったデモや、それにテクスチャを貼り付けてみたり。また港湾での貨物運送にでもつかうんでしょうか、コンテナの位置などをJavaFXでレンダリングするようなものを紹介していました。どれも比較的短いコードで実装可能であるとのこと。
また、Jim氏は「When should you download JDK8?」と書かれたスライドを前に、「イツヤルカ？イマデショ！」と日本語でネタを披露していました。これには会場も爆笑w Keynoteで一番盛り上がったかもしれません。Jim氏もご満悦な様子でした。
（しかし、このネタをJim氏に教えたのは、いったい誰なのか気になります！）</p>

<p>（追記）
@skrb さんに教えて頂きましたが、どうもこのネタはタクシーの運ちゃんから仕入れたようです。外人にネタを授けるとは、タクシーの運ちゃん、侮りがたし！！</p>

<p>次に壇上に上がったのはOracleのCameron Purdy氏。JavaEEの最新動向について公演を行いました。
JavaEEは次のメジャーバージョンであるJavaEE7のリリースを6月13日に控えています。そのJavaEE7についての話が主でした。</p>

<p>JavaEE7の主な新機能としては</p>

<ul>
<li>JBatch</li>
<li>JSON対応</li>
<li>WebSocket対応</li>
</ul>


<p>などを紹介。JavaEE準拠のAPサーバも18のメーカーから出荷されているとのこと。
その後OracleのArun Gupta氏を壇上に招き、WebSocketのデモを行なっていました。デモはよくあるWebSocketのチャットに始まり、その後はWhite Boardのアプリケーションをデモ。
やり取りをしている途中で回線が切断された場合でも、回線がもとにもどれば、最新の状態に簡単に復旧できるようなアプリケーションなんですが、これもWebSocketで簡単に実装できるとのこと。</p>

<p>そして最後に壇上に上がったのはOracleのSharat Chander氏。
アメリカ本国でのJavaOneを取り仕切っている人ですね。</p>

<p><img src="http://farm8.staticflickr.com/7294/8741286896_615b239145_n.jpg"/></p>

<p>Sharat氏はJavaとそれを取り巻くコミュニティについて公演を行いました。Javaにとって大事な構成要素は「Oracle、技術、コミュニティ」の3つであるとして、コミュニティの重要性を強調。
また「ここにいる皆さんにも是非Javaのコミュニティに参加してコントリビュートして欲しい」と訴えていました。</p>

<p>そしてSharatに促され壇上に上がったのは日本のJUG(Java User Group)であるJJUG会長の鈴木雄介氏。</p>

<p><img src="http://farm8.staticflickr.com/7293/8741285712_3c14cd9c59_n.jpg"/></p>

<p>鈴木氏はコミュニティに参加する意義を「エンジニアが成長するための場所である」と説明。またJJUGとしても今後、様々な活動を通じて日本のJavaコミュニティのエンジニアをサポートして行きたい、との話がありました。
地方への講師の派遣なども行なっていただけるらしいので、今後岡山Javaユーザ会でも、そういった方をお招きして勉強会を開催していきたいなぁと思います。</p>

<p>そして最後にはなぜか恒例（？）とも言えるTシャツ投げが行われました。</p>

<p><img src="http://farm8.staticflickr.com/7293/8740169741_f0562a4e9e_n.jpg"/></p>

<p>このTシャツ投げは、もはや伝統芸ですが、時間の関係か1つだけだったのが寂しかったり(´・ω・`)</p>

<p>基調講演の報告はここまで。参加したセッションの内容は後日まとめます。</p>

<h2>リンク集</h2>

<p>最後にJava Day Tokyoについて、各メディアのレポートや、個人ブログのリンクをまとめておきます。こちらも参考にしてください。</p>

<h3>メディア系</h3>

<ul>
<li>クラウドWatch &ndash; <a href="http://cloud.watch.impress.co.jp/docs/event/20130515_599350.html">【Java Day Tokyo】Java SE/EEやJavaFXなどの最新トピックを解説</a></li>
<li>ITPro &ndash; <a href="http://itpro.nikkeibp.co.jp/article/NEWS/20130514/476905/">「Java EE 7はHTML5に焦点」-Java Day Tokyo 2013 基調講演</a></li>
<li>マイナビニュース &ndash; <a href="http://news.mynavi.jp/articles/2013/05/16/java/index.html">http://news.mynavi.jp/articles/2013/05/16/java/index.html</a></li>
<li>Publickey &ndash; <a href="http://www.publickey1.jp/blog/13/java_82java_ee_76java_day_tokyo_2013.html">次期Java 8は来年2月、Java EE 7は今年6月にリリース予定。Java Day Tokyo 2013</a></li>
</ul>


<h3>個人ブログなど</h3>

<ul>
<li>Challenge Java EE ! &ndash; <a href="http://kikutaro777.hatenablog.com/entry/2013/05/14/235704">Java Day Tokyo 2013に参加しました</a></li>
<li>エンジニア的なネタを毎週書くブログ &ndash; <a href="http://taichiw.hatenablog.com/entry/2013/05/14/125432">Java Day Tokyo 2013　キーノート感想 #jdt2013</a></li>
<li>torutkの日記 &ndash; <a href="http://d.hatena.ne.jp/torutk/20130514/p1">Java Day Tokyo 2013に参加して</a></li>
</ul>


<h3>その他</h3>

<ul>
<li>当日のツイートまとめ &ndash; <a href="http://togetter.com/li/502898">Java Day Tokyo ( #jdt2013 ) 関連Tweetまとめ</a></li>
<li>写真 &ndash; <a href="http://www.flickr.com/photos/zephiransas/sets/72157633500864874/">http://www.flickr.com/photos/zephiransas/sets/72157633500864874/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
