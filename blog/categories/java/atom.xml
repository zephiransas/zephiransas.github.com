<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | zephiransasのチラシの裏]]></title>
  <link href="http://zephiransas.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://zephiransas.github.io/"/>
  <updated>2016-12-31T13:10:16+09:00</updated>
  <id>http://zephiransas.github.io/</id>
  <author>
    <name><![CDATA[Takafumi Yoshida (@zephiransas)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[スクフェス・ログサーバをつくった]]></title>
    <link href="http://zephiransas.github.io/blog/2016/12/31/schfeslogsvr/"/>
    <updated>2016-12-31T12:47:59+09:00</updated>
    <id>http://zephiransas.github.io/blog/2016/12/31/schfeslogsvr</id>
    <content type="html"><![CDATA[<p>今日は大晦日ですね。年末ですが今年も例によって、コード書いたりプラモ作ったり、普段の連休と同じくダラダラ過ごしております。</p>

<p>ところで今年の<a href="http://www.adventar.org/calendars/1360">ラブライブ！アドベントカレンダー</a>はチェックしましたか？
自分も20日目に<a href="https://zephiransas.goat.me/3OsFK6X7">劇場版ラブライブとμ’ｓメンバーのその後</a>というタイトルでエントリしてます。
今年はその他にも、さまざまな視点から見た素晴らしいエントリがたくさん集まってますので、ラブライバーならぜひチェックしてみてください。</p>

<p>で、22日目のエントリには<a href="https://twitter.com/hideo54">@hideo54</a>さんの<a href="https://blog.hideo54.com/archives/591">スクフェスのライブスコアを取得する”schfeslog”を作った話</a>というのがあります。
これはnodeで建てたプロキシを使って、スクフェスがサーバに送信してる通信内容をみて、ライブのプレイ結果をツイートすることができるツールです。</p>

<ul>
<li>hideo54/schfeslog - <a href="https://github.com/hideo54/schfeslog">https://github.com/hideo54/schfeslog</a></li>
</ul>


<p>これをみて「お、ツイートできるんなら、外部サーバにも送信できるんじゃね？」ってことで、早速コードを書いてみました。</p>

<p>まずはschfeslog側に外部サーバへの通信機能を実装しています。該当するPull Requestは<a href="https://github.com/hideo54/schfeslog/pull/4">こちら</a>。単純にプレイデータをJSON形式にして、設定でされたサーバにPOSTするだけです。</p>

<p>これを受信するサーバはこちら。</p>

<ul>
<li>zephiransas/schfeslogsvr - <a href="https://github.com/zephiransas/schfeslogsvr">https://github.com/zephiransas/schfeslogsvr</a></li>
</ul>


<p>送信されたプレイデータを一覧で見ることもできます。ちなみに私のプレイデータがこちら</p>

<ul>
<li>schfeslog - <a href="http://schfeslog.herokuapp.com/">http://schfeslog.herokuapp.com/</a></li>
</ul>


<p>見た目とかは、もうちょっと改善したいところです・・・</p>

<p>最近、ちょっとJavaの案件をやってるせいもあって、真面目にSpring Bootで書いています。こういったRESTなアプリケーションを作るにはSpring Bootはとても簡単でいいですね。</p>

<p>サーバ側は簡単に自分用に環境を作れるよう、Deploy to Herokuボタンも準備してますので、興味のあるかたはschfeslogと一緒に、ぜひ試してみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Wrapperを使ってプロジェクトで使うMavenのバージョンを指定する]]></title>
    <link href="http://zephiransas.github.io/blog/2016/05/23/maven-wrapper/"/>
    <updated>2016-05-23T16:34:12+09:00</updated>
    <id>http://zephiransas.github.io/blog/2016/05/23/maven-wrapper</id>
    <content type="html"><![CDATA[<p>Javaでの開発において、ライブラリのバージョン管理にMavenを用いているところはたくさんあると思います。</p>

<p>しかし、pom.xmlを使って各ライブラリのバージョンを管理していても、各開発者が使うMavenのバージョンを固定することはできません。</p>

<p>プロジェクトで使うMavenのバージョンを固定したい！そんな場合に使えるのがMaven Wrapperです。</p>

<ul>
<li>takari/maven-wrapper -　<a href="https://github.com/takari/maven-wrapper">https://github.com/takari/maven-wrapper</a></li>
</ul>


<h2>導入方法</h2>

<p>導入方法は至って簡単。</p>

<p>maven wrapperを適用したいプロジェクトに移動して、以下のコマンドを発行するだけ。</p>

<pre><code class="bash">mvn -N io.takari:maven:wrapper
</code></pre>

<p>これだけで、プロジェクトに以下のファイルが追加されます。</p>

<ul>
<li>mvnw - Maven Wrapper経由でmavenを実行するためのファイル</li>
<li>mvnw.cmd - mvnwのWindows版。Windowsで使う場合はこっちを使いましょう。</li>
<li>.mvnディレクトリ - maven wraperがダウンロードしてきたMavenのバイナリとかが入ってる</li>
</ul>


<p>上記のコマンドだと実行時の最新のバージョンが使用されるので、バージョンを指定したい場合はオプションで</p>

<pre><code class="bash">mvn -N io.takari:maven:wrapper -Dmaven=3.3.1
</code></pre>

<p>としてやりましょう。以降は今まで</p>

<pre><code class="bash">mvn clean
mvn package
</code></pre>

<p>としていたのをmvnwコマンドに置き換えるだけで</p>

<pre><code class="bash">./mvnw clean
./mvnw package
</code></pre>

<p>固定されたバージョンをMavenを利用することができます。</p>

<h1>.gitignoreの設定</h1>

<p>~~ Gitなどのバージョン管理にはmvnwとmvnw.cmdのみコミット対象とし、<strong>.mvnディレクトリはコミット対象外</strong>にしましょう。 ~~</p>

<p>はい、これウソでしたorz</p>

<p>正しくは「.mvnディレクトリもコミットしましょう」です。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">YOSHIDAさん慣れないジャバやるから</p>&mdash; やっぱりおいしい木村屋のパン (@razon) <a href="https://twitter.com/razon/status/734898775873884160">2016年5月24日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>はい、その通りですね（真顔</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaプログラマがKindle50%還元セールで買っておくべきIT技術書]]></title>
    <link href="http://zephiransas.github.io/blog/2015/05/31/java-programmer-must-buy/"/>
    <updated>2015-05-31T22:29:48+09:00</updated>
    <id>http://zephiransas.github.io/blog/2015/05/31/java-programmer-must-buy</id>
    <content type="html"><![CDATA[<p>Kindle Storeでセールをやってるようです。今回は50%をポイント還元するってセールらしいです。</p>

<p>で、<a href="http://www.kinleit.link/web/post-4954#Web-2">こちら</a>を見てたらRubyやPHPはあっても、Javaがなかったので、ついカッとなってJavaプログラマ向けのオススメ技術書をチョイスしました。
セールは<strong>6/1の正午まで</strong>ですので、お早めにどーぞ。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00MIM1KFC" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>これは店頭で目次を見た程度です。わりと初心者向けな印象なので、これからJavaを勉強したい人にオススメです。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00V2WMQNE" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>いわずと知れた「パーフェクトシリーズ」のJava版。広範囲に網羅されているので、手元に置いておけば長く使えると思います。初心者でも可。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00JS1EHH4" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>これも「逆引きレシピシリーズ」のJava版。リファレンス的に使うのならコイツは鉄板。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00XTOSYIY" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>そもそもJava EEの日本語の本は少ないのですが、最新のJava EE7に対応した本。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=zephiransas-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0088L9I4W" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>1つ前のバージョンであるJava EE6の本。通称「金魚本」。Java EE6と多少古くはあるがJava EE7と全然違うというわけでもないので、未だに現役で使えるはず。内容はある程度Java EE6の仕組みを理解している人がリファレンス的に使う感じだと思います。</p>

<p>現場からは以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Kullaを試す]]></title>
    <link href="http://zephiransas.github.io/blog/2015/04/16/project-kulla/"/>
    <updated>2015-04-16T12:26:30+09:00</updated>
    <id>http://zephiransas.github.io/blog/2015/04/16/project-kulla</id>
    <content type="html"><![CDATA[<p>以前から気になっていたJavaのREPL、Project Kullaを動かしてみました。</p>

<p>REPLとはRead-eval-print loopの略で、CUIからコードを直接入力していって、その場で動作を確認できるツールです。
Rubyであればirbやpryなどが有名ですね。</p>

<p>Project KullaはOpenJDKにて開発されている、JavaのREPL環境をつくるプロジェクトです。
ちなみにこの機能はJDK9で、正式導入される予定になっています。</p>

<h2>JLine2のインストール</h2>

<p>早速REPL環境を動かしてみたいところですが、まずは前準備として、Kullaに必要なJLine2というライブラリをビルドします。</p>

<p>ソースコードは<a href="https://github.com/jline/jline2">GitHubのリポジトリ</a>でホストされていますので</p>

<pre><code class="bash">git clone git@github.com:jline/jline2.git
cd jline2
mvn install
</code></pre>

<p>ちなみにJLine2はJDK8以前でないとビルドできないので注意です。</p>

<p>ビルドに成功するとjline2/targetディレクトリにjline-2.13-SNAPSHOT.jarが作成されます。Kullaからは、このjarを利用します。</p>

<h2>JDK9 EAのインストール</h2>

<p>KullaのビルドにはJDK9が必要です。<a href="https://jdk9.java.net/download/">こちら</a>からJDK9をダウンロードし、インストールします。
自分がインストールしたのは、以下のバージョン。</p>

<pre><code>java version "1.9.0-ea"
Java(TM) SE Runtime Environment (build 1.9.0-ea-b59)
Java HotSpot(TM) 64-Bit Server VM (build 1.9.0-ea-b59, mixed mode)
</code></pre>

<p>その後、使用するJAVA_HOMEをJDK9に設定します。</p>

<p>普段、自分はJAVA_HOMEの設定にjava_homeコマンドを使用しているので、.bash_profileに</p>

<pre><code>export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
</code></pre>

<p>としてJDK8を使用しています。今回はJDK9を使いたいので、これを</p>

<pre><code>export JAVA_HOME=`/usr/libexec/java_home -v 1.9`
</code></pre>

<p>とし</p>

<pre><code class="bash">source ~/.bash_profile
</code></pre>

<p>として、JDK9を有効にします。</p>

<h2>Kullaのビルド</h2>

<p>いよいよKullaのソースをダウンロードしてビルドします。</p>

<pre><code class="bash">hg clone http://hg.openjdk.java.net/kulla/dev ~/kulla
cd ~/kulla
</code></pre>

<p>次に、その他必要なソース類を取得します。
<code>bash
chmod 755 get_source.sh
./get_source.sh
</code></p>

<p>しばらく待つと、終了します。次にビルドスクリプトを環境に合わせて修正します。</p>

<pre><code class="bash">cd langtools/repl
</code></pre>

<p>scripts/compileを以下のように修正します。</p>

<pre><code class="bash scripts/compile">#!/bin/sh
JLINE2LIB=/Users/[ユーザ名]/jline2/target/jline-2.13-SNAPSHOT.jar
JAVAC_BIN_HOME=/Library/Java/JavaVirtualMachines/jdk1.9.0.jdk/Contents/Home/bin

mkdir -p build
$JAVAC_BIN_HOME/javac -Xlint:unchecked -Xdiags:verbose -cp ${JLINE2LIB} -d build src/*/*.java
</code></pre>

<p>1行目 - OSXの環境に合わせて"#!/bin/sh"に修正
2行目 - jline2のjarを指定
3行目 - JDK9のjavacのあるディレクトリを指定
6行目 - 先頭に"$JAVAC_BIN_HOME"を追加</p>

<p>修正できたら</p>

<pre><code class="bash">scripts/compile
</code></pre>

<p>でビルドしましょう。なにもエラーがでなければ、成功しています。</p>

<h2>REPLを実行する</h2>

<p>実行前にscripts/runを以下のように修正します。</p>

<pre><code class="bash scripts/run">#!/bin/sh
JLINE2LIB=/Users/[ユーザ名]/jline2/target/jline-2.13-SNAPSHOT.jar
JAVA_BIN_HOME=/Library/Java/JavaVirtualMachines/jdk1.9.0.jdk/Contents/Home/bin/
$JAVA_BIN_HOME/java -ea -esa -cp build:${JLINE2LIB} tool.Repl "$@"
</code></pre>

<p>先になおしたスクリプトとほぼ同じです。</p>

<p>修正できたら、早速実行してみましょう。</p>

<pre><code class="bash">scripts/run
</code></pre>

<p>すると、以下のようにプロンプトが表示されます。</p>

<pre><code>|  Welcome to the Java REPL -- Version 0.411
|  Type /help for help

-&gt;
</code></pre>

<p>あとは普通にJavaのプログラムが書けます！</p>

<pre><code>-&gt; System.out.println("Hello!");
</code></pre>

<p>また、CUIなどと同じようにタブによる補完もできます。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/zephiransas">@zephiransas</a> ちなみにSHIFT+TABでメソッドのシグネチャが表示されます．&#10;new String([SHIFT+TAB]みたいな感じで</p>&mdash; bitter_fox (@bitter_fox) <a href="https://twitter.com/bitter_fox/status/588512374845411328">2015, 4月 16</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Shift + Tab補完もなかなかステキ。</p>

<p>当然ですがクラスを定義することもできます。</p>

<pre><code>-&gt; class Hoge {
&gt;&gt; public static String fuga(){ return "FUGA!!"; }
&gt;&gt; }
|  Added class Hoge

-&gt; Hoge.fuga();
|  Expression value is: "FUGA!!"
|    assigned to temporary variable $1 of type String
</code></pre>

<p>面白いのは、<strong>いきなりメソッド定義</strong>もできます！</p>

<pre><code>-&gt; int add(int x, int y){ return x + y;}
|  Added method add

-&gt; add(2,3);
|  Expression value is: 5
|    assigned to temporary variable $2 of type int
</code></pre>

<p>普通に使えそうですね！</p>

<p>またTab補完周りの機能については、我らの<a href="https://twitter.com/bitter_fox/">@bitter_foxくん</a>が実装に関わってるらしいので、補完機能が怪しかったら、ぜひレポートしてあげてください。</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/zephiransas">@zephiransas</a> Tab補完周り僕の少し実装に関わってるんで，良ければフィードバックください！</p>&mdash; bitter_fox (@bitter_fox) <a href="https://twitter.com/bitter_fox/status/588512213050101760">2015, 4月 16</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>参考にしたリンク</h2>

<ul>
<li>Java 9 REPL – Getting started guide - <a href="http://www.jclarity.com/2015/04/15/java-9-repl-getting-started-guide/">http://www.jclarity.com/2015/04/15/java-9-repl-getting-started-guide/</a></li>
<li>REPLで遊ぼう - <a href="http://d.hatena.ne.jp/bitter_fox/20150331/1427754868">http://d.hatena.ne.jp/bitter_fox/20150331/1427754868</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lambda-behaveでテストを書こう]]></title>
    <link href="http://zephiransas.github.io/blog/2014/12/16/about-lambda-behave/"/>
    <updated>2014-12-16T18:17:15+09:00</updated>
    <id>http://zephiransas.github.io/blog/2014/12/16/about-lambda-behave</id>
    <content type="html"><![CDATA[<p>これは<a href="http://qiita.com/advent-calendar/2014/java">Javaアドベントカレンダー2014</a>の12/16分の記事です。</p>

<p>昨日は<a href="https://github.com/grimrose">grimrose</a>さんの、<a href="http://grimrose.blogspot.jp/2014/12/gradle.html">[書評] Gradle徹底入門</a> でした。</p>

<p>明日は<a href="https://twitter.com/com4dc">@com4dc</a>さんの、<a href="http://dev.classmethod.jp/server-side/what-a-wonderful-stream-world/">はじめて触るStreamの世界</a> です。</p>

<p>自分はJavaのテストフレームワークである、<a href="https://github.com/RichardWarburton/lambda-behave">lambda-behave</a>について紹介します。</p>

<p>自分は普段はRailsでの開発を行っているのですが、現場では主にRSpecを使ってテストを記述しています。RSpecでのテストは以下のような感じです。</p>

<pre><code class="ruby">describe 'Sample' do
  context 'hogeメソッドについて' do
    it 'fugaを返すこと' do
      Sample.hoge.should == "fuga"
    end
  end
end
</code></pre>

<p>RSpecでは上記のようにDSLを使って、なにをテストしているかを構造的に記述することができます。
lambda-behaveを使うと、このようなDSLっぽい記述のテストを、Java8のLambdaを使って書くことができるようになります。</p>

<h2>最初のテスト</h2>

<p>まずはテスト対象となるメソッドを準備します。</p>

<pre><code class="java">public class Sample {
    public static int includeTax(Integer price) {
        return 0;
    }
}
</code></pre>

<p>上記のようなstaticなメソッドを準備します。includeTaxメソッドは引数を一つ取り、その税込み金額を返すメソッドとします。<strong>実にギョーミーですね！</strong></p>

<p>今回はTDD的なノリで実装していきますので、ここでは中身の実装はおこないません。</p>

<p>それでは実際のテストを書いて行きましょう。ここでのテストシナリオは</p>

<ul>
<li>includeTaxメソッドに100を渡した場合に、108が返ってくること</li>
</ul>


<p>をテストするとします。これをlambda-behaveで書くと、以下のようになります。</p>

<p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">insightfullogic</span><span class="o">.</span><span class="na">lambdabehave</span><span class="o">.</span><span class="na">Suite</span><span class="o">.*;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JunitSuiteRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleSpec</span> <span class="o">{{</span>
</span><span class='line'>    <span class="n">describe</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">includeTax</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">it</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">it</span><span class="o">.</span><span class="na">should</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">税込み価格が取得できること</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">expect</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">expect</span><span class="o">.</span><span class="na">that</span><span class="o">(</span><span class="n">Sample</span><span class="o">.</span><span class="na">includeTax</span><span class="o">(</span><span class="mi">100</span><span class="o">)).</span><span class="na">is</span><span class="o">(</span><span class="mi">108</span><span class="o">)</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>
</p>

<p>static importを使ってlambda-behaveのメソッドを使えるようにし、こられを使って記述していきます。</p>

<p>JUnitのランナーも用意されていますので、これを@RunWithで指定すれば、IDEからも簡単にテストを実行可能です。早速、テストを実行してみましょう。</p>

<p><img src="/images/20141216/screen1.png" alt="screen1" /></p>

<p>includeTaxは、まだ実装をおこなっていませんので、当然このとおりテストが失敗します。</p>

<p>次に、includeTaxを実装してみます。</p>

<pre><code class="java">public class Sample {
    public static int includeTax(Integer price) {
        final float TAX_RATE = 0.08;
        return (int)Math.floor(price * (1 + TAX_RATE));
    }
}
</code></pre>

<p>再度、テストを実行すれば、テストが成功しています。</p>

<p><img src="/images/20141216/screen2.png" alt="screen2" /></p>

<h2>複数のテストデータでチェック</h2>

<p>先の例では1つの値でしかテストしませんでしたが、lambda-behaveでは同時に複数の値でテストすることもできます。以下のようになります。</p>

<pre><code class="java">it.uses(100, 108)
  .and(200, 216)
  .toShow("税込み価格が取得できること", (expect, price, includeTax) -&gt; {
     expect.that(Sample.includeTax(price)).is(includeTax);
  });
</code></pre>

<p>itのあとにuseとandをチェインして値を準備し、これを使ってtoShowメソッド内でテストを行います。toShowメソッド内ではlambdaの引数で準備した値を利用できますので、lambda内でその値をexpectするようにしています。</p>

<h2>生成した値でチェック</h2>

<p>lambda-behaveではランダムな値を生成する機能も準備されています。適当な数値を5つほど生成して、そのテストを行うコードは以下のようになります。</p>

<p>（あまり例がよくないですが・・・）</p>

<pre><code class="java">it.requires(5)
  .example(Generator.integersUpTo(1000))
  .toShow("税込み価格が取得できること", (expect, price) -&gt; {
    expect.that(Sample.includeTax(price)).is((int)Math.floor(price * 1.08));
  });
</code></pre>

<p>requiresでランダムに準備する値の数を指定します。</p>

<p>exampleではどのようなテストデータを生成するかを指定します。ここではlambda-behaveで準備されたGenerator.integersUpToを使用しています。この他にも適当な文字列を生成するasciiStringsメソッドなどもあります</p>

<h2>例外が発生することをチェック</h2>

<p>引数にnullが渡された場合にNullPointerExceptionの発生をチェックすることも、JUnitと同様に可能です。</p>

<p>まず、includeTaxにnullチェックを記述します。</p>

<pre><code class="java">public class Sample {
    public static int includeTax(Integer price) {
        if(price == null) {
            throw new NullPointerException();
        }
        final float TAX_RATE = 0.08f;
        return (int)Math.floor(price * (1 + TAX_RATE));
    }
}
</code></pre>

<p>これをテストするlambda-behaveのコードは以下のようになります。</p>

<pre><code class="java">it.should("nullの場合ぬるぽ", expect -&gt; {
    expect.exception(NullPointerException.class, () -&gt; {
        Sample.includeTax(null);
    });
});
</code></pre>

<p>exceptionメソッドの第1引数に、発生する予定の例外を指定し、第2引数には例外が発生する処理をlambdaで記述します。</p>

<p>lambdaに慣れていないと少々書きづらいかもしれないですが、DSLちっくに書けるのはJavaっぽくなくてステキですよね！</p>

<p>こちらからは以上です。</p>
]]></content>
  </entry>
  
</feed>
